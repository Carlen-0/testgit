//#include <arm_neon.h>
#include "CIrFireDrc.h"
#include "../Module/PortingAPI.h"
#include <stdint.h>

#ifdef FIRE_DRC_EDITION

//RGB��ʽα�ʱ�
unsigned char PseudoTableRGB[PSEUDONUM][256][4] =
{
	//00 ����
	{ { 0, 0, 0,0 },{ 1, 1, 1,0 },{ 2, 2, 2,0 },{ 3, 3, 3,0 },{ 4, 4, 4,0 },{ 5, 5, 5,0 },{ 6, 6, 6,0 },{ 7, 7, 7,0 },{ 8, 8, 8,0 },{ 9, 9, 9,0 },{ 10, 10, 10,0 },{ 11, 11, 11,0 },{ 12, 12, 12,0 },{ 13, 13, 13,0 },{ 14, 14, 14,0 },{ 15, 15, 15,0 },{ 16, 16, 16,0 },{ 17, 17, 17,0 },{ 18, 18, 18,0 },{ 19, 19, 19,0 },{ 20, 20, 20,0 },{ 21, 21, 21,0 },{ 22, 22, 22,0 },{ 23, 23, 23,0 },{ 24, 24, 24,0 },{ 25, 25, 25,0 },{ 26, 26, 26,0 },{ 27, 27, 27,0 },{ 28, 28, 28,0 },{ 29, 29, 29,0 },{ 30, 30, 30,0 },{ 31, 31, 31,0 },{ 32, 32, 32,0 },{ 33, 33, 33,0 },{ 34, 34, 34,0 },{ 35, 35, 35,0 },{ 36, 36, 36,0 },{ 37, 37, 37,0 },{ 38, 38, 38,0 },{ 39, 39, 39,0 },{ 40, 40, 40,0 },{ 41, 41, 41,0 },{ 42, 42, 42,0 },{ 43, 43, 43,0 },{ 44, 44, 44,0 },{ 45, 45, 45,0 },{ 46, 46, 46,0 },{ 47, 47, 47,0 },{ 48, 48, 48,0 },{ 49, 49, 49,0 },{ 50, 50, 50,0 },{ 51, 51, 51,0 },{ 52, 52, 52,0 },{ 53, 53, 53,0 },{ 54, 54, 54,0 },{ 55, 55, 55,0 },{ 56, 56, 56,0 },{ 57, 57, 57,0 },{ 58, 58, 58,0 },{ 59, 59, 59,0 },{ 60, 60, 60,0 },{ 61, 61, 61,0 },{ 62, 62, 62,0 },{ 63, 63, 63,0 },{ 64, 64, 64,0 },{ 65, 65, 65,0 },{ 66, 66, 66,0 },{ 67, 67, 67,0 },{ 68, 68, 68,0 },{ 69, 69, 69,0 },{ 70, 70, 70,0 },{ 71, 71, 71,0 },{ 72, 72, 72,0 },{ 73, 73, 73,0 },{ 74, 74, 74,0 },{ 75, 75, 75,0 },{ 76, 76, 76,0 },{ 77, 77, 77,0 },{ 78, 78, 78,0 },{ 79, 79, 79,0 },{ 80, 80, 80,0 },{ 81, 81, 81,0 },{ 82, 82, 82,0 },{ 83, 83, 83,0 },{ 84, 84, 84,0 },{ 85, 85, 85,0 },{ 86, 86, 86,0 },{ 87, 87, 87,0 },{ 88, 88, 88,0 },{ 89, 89, 89,0 },{ 90, 90, 90,0 },{ 91, 91, 91,0 },{ 92, 92, 92,0 },{ 93, 93, 93,0 },{ 94, 94, 94,0 },{ 95, 95, 95,0 },{ 96, 96, 96,0 },{ 97, 97, 97,0 },{ 98, 98, 98,0 },{ 99, 99, 99,0 },{ 100, 100, 100,0 },{ 101, 101, 101,0 },{ 102, 102, 102,0 },{ 103, 103, 103,0 },{ 104, 104, 104,0 },{ 105, 105, 105,0 },{ 106, 106, 106,0 },{ 107, 107, 107,0 },{ 108, 108, 108,0 },{ 109, 109, 109,0 },{ 110, 110, 110,0 },{ 111, 111, 111,0 },{ 112, 112, 112,0 },{ 113, 113, 113,0 },{ 114, 114, 114,0 },{ 115, 115, 115,0 },{ 116, 116, 116,0 },{ 117, 117, 117,0 },{ 118, 118, 118,0 },{ 119, 119, 119,0 },{ 120, 120, 120,0 },{ 121, 121, 121,0 },{ 122, 122, 122,0 },{ 123, 123, 123,0 },{ 124, 124, 124,0 },{ 125, 125, 125,0 },{ 126, 126, 126,0 },{ 127, 127, 127,0 },{ 128, 128, 128,0 },{ 129, 129, 129,0 },{ 130, 130, 130,0 },{ 131, 131, 131,0 },{ 132, 132, 132,0 },{ 133, 133, 133,0 },{ 134, 134, 134,0 },{ 135, 135, 135,0 },{ 136, 136, 136,0 },{ 137, 137, 137,0 },{ 138, 138, 138,0 },{ 139, 139, 139,0 },{ 140, 140, 140,0 },{ 141, 141, 141,0 },{ 142, 142, 142,0 },{ 143, 143, 143,0 },{ 144, 144, 144,0 },{ 145, 145, 145,0 },{ 146, 146, 146,0 },{ 147, 147, 147,0 },{ 148, 148, 148,0 },{ 149, 149, 149,0 },{ 150, 150, 150,0 },{ 151, 151, 151,0 },{ 152, 152, 152,0 },{ 153, 153, 153,0 },{ 154, 154, 154,0 },{ 155, 155, 155,0 },{ 156, 156, 156,0 },{ 157, 157, 157,0 },{ 158, 158, 158,0 },{ 159, 159, 159,0 },{ 160, 160, 160,0 },{ 161, 161, 161,0 },{ 162, 162, 162,0 },{ 163, 163, 163,0 },{ 164, 164, 164,0 },{ 165, 165, 165,0 },{ 166, 166, 166,0 },{ 167, 167, 167,0 },{ 168, 168, 168,0 },{ 169, 169, 169,0 },{ 170, 170, 170,0 },{ 171, 171, 171,0 },{ 172, 172, 172,0 },{ 173, 173, 173,0 },{ 174, 174, 174,0 },{ 175, 175, 175,0 },{ 176, 176, 176,0 },{ 177, 177, 177,0 },{ 178, 178, 178,0 },{ 179, 179, 179,0 },{ 180, 180, 180,0 },{ 181, 181, 181,0 },{ 182, 182, 182,0 },{ 183, 183, 183,0 },{ 184, 184, 184,0 },{ 185, 185, 185,0 },{ 186, 186, 186,0 },{ 187, 187, 187,0 },{ 188, 188, 188,0 },{ 189, 189, 189,0 },{ 190, 190, 190,0 },{ 191, 191, 191,0 },{ 192, 192, 192,0 },{ 193, 193, 193,0 },{ 194, 194, 194,0 },{ 195, 195, 195,0 },{ 196, 196, 196,0 },{ 197, 197, 197,0 },{ 198, 198, 198,0 },{ 199, 199, 199,0 },{ 200, 200, 200,0 },{ 201, 201, 201,0 },{ 202, 202, 202,0 },{ 203, 203, 203,0 },{ 204, 204, 204,0 },{ 205, 205, 205,0 },{ 206, 206, 206,0 },{ 207, 207, 207,0 },{ 208, 208, 208,0 },{ 209, 209, 209,0 },{ 210, 210, 210,0 },{ 211, 211, 211,0 },{ 212, 212, 212,0 },{ 213, 213, 213,0 },{ 214, 214, 214,0 },{ 215, 215, 215,0 },{ 216, 216, 216,0 },{ 217, 217, 217,0 },{ 218, 218, 218,0 },{ 219, 219, 219,0 },{ 220, 220, 220,0 },{ 221, 221, 221,0 },{ 222, 222, 222,0 },{ 223, 223, 223,0 },{ 224, 224, 224,0 },{ 225, 225, 225,0 },{ 226, 226, 226,0 },{ 227, 227, 227,0 },{ 228, 228, 228,0 },{ 229, 229, 229,0 },{ 230, 230, 230,0 },{ 231, 231, 231,0 },{ 232, 232, 232,0 },{ 233, 233, 233,0 },{ 234, 234, 234,0 },{ 235, 235, 235,0 },{ 236, 236, 236,0 },{ 237, 237, 237,0 },{ 238, 238, 238,0 },{ 239, 239, 239,0 },{ 240, 240, 240,0 },{ 241, 241, 241,0 },{ 242, 242, 242,0 },{ 243, 243, 243,0 },{ 244, 244, 244,0 },{ 245, 245, 245,0 },{ 246, 246, 246,0 },{ 247, 247, 247,0 },{ 248, 248, 248,0 },{ 249, 249, 249,0 },{ 250, 250, 250,0 },{ 251, 251, 251,0 },{ 252, 252, 252,0 },{ 253, 253, 253,0 },{ 254, 254, 254,0 },{ 255, 255, 255,0 } },

	//01-����:
	{ { 255, 255, 255,0 },{ 254, 254, 254,0 },{ 253, 253, 253,0 },{ 252, 252, 252,0 },{ 251, 251, 251,0 },{ 250, 250, 250,0 },{ 249, 249, 249,0 },{ 248, 248, 248,0 },{ 247, 247, 247,0 },{ 246, 246, 246,0 },{ 245, 245, 245,0 },{ 244, 244, 244,0 },{ 243, 243, 243,0 },{ 242, 242, 242,0 },{ 241, 241, 241,0 },{ 240, 240, 240,0 },{ 239, 239, 239,0 },{ 238, 238, 238,0 },{ 237, 237, 237,0 },{ 236, 236, 236,0 },{ 235, 235, 235,0 },{ 234, 234, 234,0 },{ 233, 233, 233,0 },{ 232, 232, 232,0 },{ 231, 231, 231,0 },{ 230, 230, 230,0 },{ 229, 229, 229,0 },{ 228, 228, 228,0 },{ 227, 227, 227,0 },{ 226, 226, 226,0 },{ 225, 225, 225,0 },{ 224, 224, 224,0 },{ 223, 223, 223,0 },{ 222, 222, 222,0 },{ 221, 221, 221,0 },{ 220, 220, 220,0 },{ 219, 219, 219,0 },{ 218, 218, 218,0 },{ 217, 217, 217,0 },{ 216, 216, 216,0 },{ 215, 215, 215,0 },{ 214, 214, 214,0 },{ 213, 213, 213,0 },{ 212, 212, 212,0 },{ 211, 211, 211,0 },{ 210, 210, 210,0 },{ 209, 209, 209,0 },{ 208, 208, 208,0 },{ 207, 207, 207,0 },{ 206, 206, 206,0 },{ 205, 205, 205,0 },{ 204, 204, 204,0 },{ 203, 203, 203,0 },{ 202, 202, 202,0 },{ 201, 201, 201,0 },{ 200, 200, 200,0 },{ 199, 199, 199,0 },{ 198, 198, 198,0 },{ 197, 197, 197,0 },{ 196, 196, 196,0 },{ 195, 195, 195,0 },{ 194, 194, 194,0 },{ 193, 193, 193,0 },{ 192, 192, 192,0 },{ 191, 191, 191,0 },{ 190, 190, 190,0 },{ 189, 189, 189,0 },{ 188, 188, 188,0 },{ 187, 187, 187,0 },{ 186, 186, 186,0 },{ 185, 185, 185,0 },{ 184, 184, 184,0 },{ 183, 183, 183,0 },{ 182, 182, 182,0 },{ 181, 181, 181,0 },{ 180, 180, 180,0 },{ 179, 179, 179,0 },{ 178, 178, 178,0 },{ 177, 177, 177,0 },{ 176, 176, 176,0 },{ 175, 175, 175,0 },{ 174, 174, 174,0 },{ 173, 173, 173,0 },{ 172, 172, 172,0 },{ 171, 171, 171,0 },{ 170, 170, 170,0 },{ 169, 169, 169,0 },{ 168, 168, 168,0 },{ 167, 167, 167,0 },{ 166, 166, 166,0 },{ 165, 165, 165,0 },{ 164, 164, 164,0 },{ 163, 163, 163,0 },{ 162, 162, 162,0 },{ 161, 161, 161,0 },{ 160, 160, 160,0 },{ 159, 159, 159,0 },{ 158, 158, 158,0 },{ 157, 157, 157,0 },{ 156, 156, 156,0 },{ 155, 155, 155,0 },{ 154, 154, 154,0 },{ 153, 153, 153,0 },{ 152, 152, 152,0 },{ 151, 151, 151,0 },{ 150, 150, 150,0 },{ 149, 149, 149,0 },{ 148, 148, 148,0 },{ 147, 147, 147,0 },{ 146, 146, 146,0 },{ 145, 145, 145,0 },{ 144, 144, 144,0 },{ 143, 143, 143,0 },{ 142, 142, 142,0 },{ 141, 141, 141,0 },{ 140, 140, 140,0 },{ 139, 139, 139,0 },{ 138, 138, 138,0 },{ 137, 137, 137,0 },{ 136, 136, 136,0 },{ 135, 135, 135,0 },{ 134, 134, 134,0 },{ 133, 133, 133,0 },{ 132, 132, 132,0 },{ 131, 131, 131,0 },{ 130, 130, 130,0 },{ 129, 129, 129,0 },{ 128, 128, 128,0 },{ 127, 127, 127,0 },{ 126, 126, 126,0 },{ 125, 125, 125,0 },{ 124, 124, 124,0 },{ 123, 123, 123,0 },{ 122, 122, 122,0 },{ 121, 121, 121,0 },{ 120, 120, 120,0 },{ 119, 119, 119,0 },{ 118, 118, 118,0 },{ 117, 117, 117,0 },{ 116, 116, 116,0 },{ 115, 115, 115,0 },{ 114, 114, 114,0 },{ 113, 113, 113,0 },{ 112, 112, 112,0 },{ 111, 111, 111,0 },{ 110, 110, 110,0 },{ 109, 109, 109,0 },{ 108, 108, 108,0 },{ 107, 107, 107,0 },{ 106, 106, 106,0 },{ 105, 105, 105,0 },{ 104, 104, 104,0 },{ 103, 103, 103,0 },{ 102, 102, 102,0 },{ 101, 101, 101,0 },{ 100, 100, 100,0 },{ 99, 99, 99,0 },{ 98, 98, 98,0 },{ 97, 97, 97,0 },{ 96, 96, 96,0 },{ 95, 95, 95,0 },{ 94, 94, 94,0 },{ 93, 93, 93,0 },{ 92, 92, 92,0 },{ 91, 91, 91,0 },{ 90, 90, 90,0 },{ 89, 89, 89,0 },{ 88, 88, 88,0 },{ 87, 87, 87,0 },{ 86, 86, 86,0 },{ 85, 85, 85,0 },{ 84, 84, 84,0 },{ 83, 83, 83,0 },{ 82, 82, 82,0 },{ 81, 81, 81,0 },{ 80, 80, 80,0 },{ 79, 79, 79,0 },{ 78, 78, 78,0 },{ 77, 77, 77,0 },{ 76, 76, 76,0 },{ 75, 75, 75,0 },{ 74, 74, 74,0 },{ 73, 73, 73,0 },{ 72, 72, 72,0 },{ 71, 71, 71,0 },{ 70, 70, 70,0 },{ 69, 69, 69,0 },{ 68, 68, 68,0 },{ 67, 67, 67,0 },{ 66, 66, 66,0 },{ 65, 65, 65,0 },{ 64, 64, 64,0 },{ 63, 63, 63,0 },{ 62, 62, 62,0 },{ 61, 61, 61,0 },{ 60, 60, 60,0 },{ 59, 59, 59,0 },{ 58, 58, 58,0 },{ 57, 57, 57,0 },{ 56, 56, 56,0 },{ 55, 55, 55,0 },{ 54, 54, 54,0 },{ 53, 53, 53,0 },{ 52, 52, 52,0 },{ 51, 51, 51,0 },{ 50, 50, 50,0 },{ 49, 49, 49,0 },{ 48, 48, 48,0 },{ 47, 47, 47,0 },{ 46, 46, 46,0 },{ 45, 45, 45,0 },{ 44, 44, 44,0 },{ 43, 43, 43,0 },{ 42, 42, 42,0 },{ 41, 41, 41,0 },{ 40, 40, 40,0 },{ 39, 39, 39,0 },{ 38, 38, 38,0 },{ 37, 37, 37,0 },{ 36, 36, 36,0 },{ 35, 35, 35,0 },{ 34, 34, 34,0 },{ 33, 33, 33,0 },{ 32, 32, 32,0 },{ 31, 31, 31,0 },{ 30, 30, 30,0 },{ 29, 29, 29,0 },{ 28, 28, 28,0 },{ 27, 27, 27,0 },{ 26, 26, 26,0 },{ 25, 25, 25,0 },{ 24, 24, 24,0 },{ 23, 23, 23,0 },{ 22, 22, 22,0 },{ 21, 21, 21,0 },{ 20, 20, 20,0 },{ 19, 19, 19,0 },{ 18, 18, 18,0 },{ 17, 17, 17,0 },{ 16, 16, 16,0 },{ 15, 15, 15,0 },{ 14, 14, 14,0 },{ 13, 13, 13,0 },{ 12, 12, 12,0 },{ 11, 11, 11,0 },{ 10, 10, 10,0 },{ 9, 9, 9,0 },{ 8, 8, 8,0 },{ 7, 7, 7,0 },{ 6, 6, 6,0 },{ 5, 5, 5,0 },{ 4, 4, 4,0 },{ 3, 3, 3,0 },{ 2, 2, 2,0 },{ 1, 1, 1,0 },{ 0, 0, 0,0 } },

	//02-����:
	{ { 0, 0, 32,0 },{ 1, 0, 34,0 },{ 2, 0, 36,0 },{ 3, 0, 38,0 },{ 4, 0, 40,0 },{ 5, 0, 42,0 },{ 6, 0, 44,0 },{ 7, 0, 46,0 },{ 8, 0, 49,0 },{ 9, 0, 51,0 },{ 10, 0, 53,0 },{ 11, 0, 55,0 },{ 12, 0, 57,0 },{ 13, 0, 59,0 },{ 14, 0, 61,0 },{ 15, 0, 63,0 },{ 17, 0, 65,0 },{ 18, 0, 67,0 },{ 19, 0, 69,0 },{ 20, 0, 71,0 },{ 21, 0, 73,0 },{ 22, 0, 75,0 },{ 23, 0, 77,0 },{ 24, 0, 79,0 },{ 25, 0, 82,0 },{ 26, 0, 84,0 },{ 27, 0, 86,0 },{ 28, 0, 88,0 },{ 29, 0, 90,0 },{ 30, 0, 92,0 },{ 31, 0, 94,0 },{ 32, 0, 96,0 },{ 34, 0, 97,0 },{ 37, 0, 98,0 },{ 39, 0, 99,0 },{ 41, 0, 100,0 },{ 44, 0, 101,0 },{ 46, 0, 102,0 },{ 48, 0, 103,0 },{ 51, 0, 105,0 },{ 53, 0, 106,0 },{ 55, 0, 107,0 },{ 58, 0, 108,0 },{ 60, 0, 109,0 },{ 62, 0, 110,0 },{ 65, 0, 111,0 },{ 67, 0, 112,0 },{ 69, 0, 113,0 },{ 71, 0, 114,0 },{ 74, 0, 115,0 },{ 76, 0, 116,0 },{ 78, 0, 117,0 },{ 81, 0, 118,0 },{ 83, 0, 119,0 },{ 85, 0, 120,0 },{ 88, 0, 122,0 },{ 90, 0, 123,0 },{ 92, 0, 124,0 },{ 95, 0, 125,0 },{ 97, 0, 126,0 },{ 99, 0, 127,0 },{ 102, 0, 128,0 },{ 104, 0, 129,0 },{ 106, 0, 130,0 },{ 109, 0, 131,0 },{ 111, 0, 132,0 },{ 113, 0, 133,0 },{ 116, 0, 134,0 },{ 118, 0, 135,0 },{ 120, 0, 136,0 },{ 123, 0, 137,0 },{ 125, 0, 139,0 },{ 127, 0, 140,0 },{ 130, 0, 141,0 },{ 132, 0, 142,0 },{ 134, 0, 143,0 },{ 137, 0, 144,0 },{ 139, 0, 145,0 },{ 141, 0, 146,0 },{ 144, 0, 147,0 },{ 146, 0, 148,0 },{ 148, 0, 149,0 },{ 150, 0, 150,0 },{ 153, 0, 151,0 },{ 155, 0, 152,0 },{ 157, 0, 153,0 },{ 160, 0, 154,0 },{ 162, 0, 156,0 },{ 164, 0, 157,0 },{ 167, 0, 158,0 },{ 169, 0, 159,0 },{ 171, 0, 160,0 },{ 174, 0, 161,0 },{ 176, 0, 162,0 },{ 178, 0, 163,0 },{ 181, 0, 164,0 },{ 183, 3, 159,0 },{ 185, 5, 154,0 },{ 188, 8, 149,0 },{ 190, 11, 144,0 },{ 192, 13, 138,0 },{ 195, 16, 133,0 },{ 197, 19, 128,0 },{ 199, 21, 123,0 },{ 202, 24, 118,0 },{ 204, 27, 113,0 },{ 206, 29, 108,0 },{ 209, 32, 103,0 },{ 211, 35, 97,0 },{ 213, 37, 92,0 },{ 216, 40, 87,0 },{ 218, 43, 82,0 },{ 220, 45, 77,0 },{ 222, 48, 72,0 },{ 225, 50, 67,0 },{ 227, 53, 62,0 },{ 229, 56, 56,0 },{ 232, 58, 51,0 },{ 234, 61, 46,0 },{ 236, 64, 41,0 },{ 239, 66, 36,0 },{ 241, 69, 31,0 },{ 243, 72, 26,0 },{ 246, 74, 21,0 },{ 248, 77, 15,0 },{ 250, 80, 10,0 },{ 253, 82, 5,0 },{ 255, 85, 0,0 },{ 255, 88, 0,0 },{ 255, 90, 0,0 },{ 255, 93, 0,0 },{ 255, 96, 0,0 },{ 255, 98, 0,0 },{ 255, 101, 0,0 },{ 255, 104, 0,0 },{ 255, 106, 0,0 },{ 255, 109, 0,0 },{ 255, 112, 0,0 },{ 255, 114, 0,0 },{ 255, 117, 0,0 },{ 255, 120, 0,0 },{ 255, 122, 0,0 },{ 255, 125, 0,0 },{ 255, 128, 0,0 },{ 255, 130, 0,0 },{ 255, 133, 0,0 },{ 255, 135, 0,0 },{ 255, 138, 0,0 },{ 255, 141, 0,0 },{ 255, 143, 0,0 },{ 255, 146, 0,0 },{ 255, 149, 0,0 },{ 255, 151, 0,0 },{ 255, 154, 0,0 },{ 255, 157, 0,0 },{ 255, 159, 0,0 },{ 255, 162, 0,0 },{ 255, 165, 0,0 },{ 255, 167, 0,0 },{ 255, 170, 0,0 },{ 255, 173, 0,0 },{ 255, 175, 0,0 },{ 255, 178, 0,0 },{ 255, 181, 0,0 },{ 255, 183, 0,0 },{ 255, 186, 0,0 },{ 255, 189, 0,0 },{ 255, 191, 0,0 },{ 255, 194, 0,0 },{ 255, 197, 0,0 },{ 255, 199, 0,0 },{ 255, 202, 0,0 },{ 255, 205, 0,0 },{ 255, 207, 0,0 },{ 255, 210, 0,0 },{ 255, 213, 0,0 },{ 255, 215, 0,0 },{ 255, 218, 0,0 },{ 255, 220, 0,0 },{ 255, 223, 0,0 },{ 255, 226, 0,0 },{ 255, 228, 0,0 },{ 255, 231, 0,0 },{ 255, 234, 0,0 },{ 255, 236, 0,0 },{ 255, 239, 0,0 },{ 255, 242, 0,0 },{ 255, 244, 0,0 },{ 255, 247, 0,0 },{ 255, 250, 0,0 },{ 255, 252, 0,0 },{ 255, 255, 0,0 },{ 255, 255, 4,0 },{ 255, 255, 8,0 },{ 255, 255, 12,0 },{ 255, 255, 16,0 },{ 255, 255, 20,0 },{ 255, 255, 24,0 },{ 255, 255, 28,0 },{ 255, 255, 32,0 },{ 255, 255, 36,0 },{ 255, 255, 40,0 },{ 255, 255, 44,0 },{ 255, 255, 48,0 },{ 255, 255, 52,0 },{ 255, 255, 56,0 },{ 255, 255, 60,0 },{ 255, 255, 64,0 },{ 255, 255, 68,0 },{ 255, 255, 72,0 },{ 255, 255, 76,0 },{ 255, 255, 80,0 },{ 255, 255, 84,0 },{ 255, 255, 88,0 },{ 255, 255, 92,0 },{ 255, 255, 96,0 },{ 255, 255, 100,0 },{ 255, 255, 104,0 },{ 255, 255, 108,0 },{ 255, 255, 112,0 },{ 255, 255, 116,0 },{ 255, 255, 120,0 },{ 255, 255, 124,0 },{ 255, 255, 128,0 },{ 255, 255, 131,0 },{ 255, 255, 135,0 },{ 255, 255, 139,0 },{ 255, 255, 143,0 },{ 255, 255, 147,0 },{ 255, 255, 151,0 },{ 255, 255, 155,0 },{ 255, 255, 159,0 },{ 255, 255, 163,0 },{ 255, 255, 167,0 },{ 255, 255, 171,0 },{ 255, 255, 175,0 },{ 255, 255, 179,0 },{ 255, 255, 183,0 },{ 255, 255, 187,0 },{ 255, 255, 191,0 },{ 255, 255, 195,0 },{ 255, 255, 199,0 },{ 255, 255, 203,0 },{ 255, 255, 207,0 },{ 255, 255, 211,0 },{ 255, 255, 215,0 },{ 255, 255, 219,0 },{ 255, 255, 223,0 },{ 255, 255, 227,0 },{ 255, 255, 231,0 },{ 255, 255, 235,0 },{ 255, 255, 239,0 },{ 255, 255, 243,0 },{ 255, 255, 247,0 },{ 255, 255, 251,0 },{ 255, 255, 255,0 } },

	//03-����:
	{ { 0, 32, 64,0 },{ 0, 33, 70,0 },{ 0, 34, 76,0 },{ 0, 35, 82,0 },{ 0, 36, 89,0 },{ 0, 37, 95,0 },{ 0, 38, 101,0 },{ 0, 39, 107,0 },{ 0, 40, 113,0 },{ 0, 41, 119,0 },{ 0, 42, 126,0 },{ 0, 43, 132,0 },{ 0, 44, 138,0 },{ 0, 45, 144,0 },{ 0, 46, 150,0 },{ 0, 47, 156,0 },{ 0, 49, 163,0 },{ 0, 50, 169,0 },{ 0, 51, 175,0 },{ 0, 52, 181,0 },{ 0, 53, 187,0 },{ 0, 54, 193,0 },{ 0, 55, 200,0 },{ 0, 56, 206,0 },{ 0, 57, 212,0 },{ 0, 58, 218,0 },{ 0, 59, 224,0 },{ 0, 60, 230,0 },{ 0, 61, 237,0 },{ 0, 62, 243,0 },{ 0, 63, 249,0 },{ 0, 64, 255,0 },{ 0, 67, 249,0 },{ 0, 70, 243,0 },{ 0, 73, 237,0 },{ 0, 76, 231,0 },{ 0, 79, 225,0 },{ 0, 82, 218,0 },{ 0, 85, 212,0 },{ 0, 88, 206,0 },{ 0, 91, 200,0 },{ 0, 94, 194,0 },{ 0, 97, 188,0 },{ 0, 100, 182,0 },{ 0, 103, 176,0 },{ 0, 106, 170,0 },{ 0, 109, 164,0 },{ 0, 112, 158,0 },{ 0, 115, 151,0 },{ 0, 118, 145,0 },{ 0, 121, 139,0 },{ 0, 124, 133,0 },{ 0, 127, 127,0 },{ 0, 130, 121,0 },{ 0, 133, 115,0 },{ 0, 136, 109,0 },{ 0, 139, 103,0 },{ 0, 142, 97,0 },{ 0, 145, 90,0 },{ 0, 148, 84,0 },{ 0, 151, 78,0 },{ 0, 154, 72,0 },{ 0, 157, 66,0 },{ 0, 160, 60,0 },{ 4, 163, 58,0 },{ 8, 166, 56,0 },{ 12, 169, 54,0 },{ 16, 172, 53,0 },{ 20, 175, 51,0 },{ 24, 178, 49,0 },{ 28, 181, 47,0 },{ 32, 184, 45,0 },{ 36, 187, 43,0 },{ 40, 190, 41,0 },{ 44, 193, 39,0 },{ 48, 196, 38,0 },{ 52, 199, 36,0 },{ 56, 202, 34,0 },{ 60, 205, 32,0 },{ 64, 208, 30,0 },{ 68, 210, 28,0 },{ 72, 213, 26,0 },{ 76, 216, 24,0 },{ 80, 219, 23,0 },{ 84, 222, 21,0 },{ 88, 225, 19,0 },{ 92, 228, 17,0 },{ 96, 231, 15,0 },{ 100, 234, 13,0 },{ 104, 237, 11,0 },{ 108, 240, 9,0 },{ 112, 243, 8,0 },{ 116, 246, 6,0 },{ 120, 249, 4,0 },{ 124, 252, 2,0 },{ 128, 255, 0,0 },{ 131, 255, 0,0 },{ 135, 255, 0,0 },{ 139, 255, 0,0 },{ 143, 255, 0,0 },{ 147, 255, 0,0 },{ 151, 255, 0,0 },{ 155, 255, 0,0 },{ 159, 255, 0,0 },{ 163, 255, 0,0 },{ 167, 255, 0,0 },{ 171, 255, 0,0 },{ 175, 255, 0,0 },{ 179, 255, 0,0 },{ 183, 255, 0,0 },{ 187, 255, 0,0 },{ 191, 255, 0,0 },{ 195, 255, 0,0 },{ 199, 255, 0,0 },{ 203, 255, 0,0 },{ 207, 255, 0,0 },{ 211, 255, 0,0 },{ 215, 255, 0,0 },{ 219, 255, 0,0 },{ 223, 255, 0,0 },{ 227, 255, 0,0 },{ 231, 255, 0,0 },{ 235, 255, 0,0 },{ 239, 255, 0,0 },{ 243, 255, 0,0 },{ 247, 255, 0,0 },{ 251, 255, 0,0 },{ 255, 255, 0,0 },{ 255, 251, 0,0 },{ 255, 247, 0,0 },{ 255, 243, 0,0 },{ 255, 239, 0,0 },{ 255, 235, 0,0 },{ 255, 231, 0,0 },{ 255, 227, 0,0 },{ 255, 223, 0,0 },{ 255, 219, 0,0 },{ 255, 215, 0,0 },{ 255, 211, 0,0 },{ 255, 207, 0,0 },{ 255, 203, 0,0 },{ 255, 199, 0,0 },{ 255, 195, 0,0 },{ 255, 191, 0,0 },{ 255, 187, 0,0 },{ 255, 183, 0,0 },{ 255, 179, 0,0 },{ 255, 175, 0,0 },{ 255, 171, 0,0 },{ 255, 167, 0,0 },{ 255, 163, 0,0 },{ 255, 159, 0,0 },{ 255, 155, 0,0 },{ 255, 151, 0,0 },{ 255, 147, 0,0 },{ 255, 143, 0,0 },{ 255, 139, 0,0 },{ 255, 135, 0,0 },{ 255, 131, 0,0 },{ 255, 128, 0,0 },{ 255, 124, 0,0 },{ 255, 120, 0,0 },{ 255, 116, 0,0 },{ 255, 112, 0,0 },{ 255, 108, 0,0 },{ 255, 104, 0,0 },{ 255, 100, 0,0 },{ 255, 96, 0,0 },{ 255, 92, 0,0 },{ 255, 88, 0,0 },{ 255, 84, 0,0 },{ 255, 80, 0,0 },{ 255, 76, 0,0 },{ 255, 72, 0,0 },{ 255, 68, 0,0 },{ 255, 64, 0,0 },{ 255, 60, 0,0 },{ 255, 56, 0,0 },{ 255, 52, 0,0 },{ 255, 48, 0,0 },{ 255, 44, 0,0 },{ 255, 40, 0,0 },{ 255, 36, 0,0 },{ 255, 32, 0,0 },{ 255, 28, 0,0 },{ 255, 24, 0,0 },{ 255, 20, 0,0 },{ 255, 16, 0,0 },{ 255, 12, 0,0 },{ 255, 8, 0,0 },{ 255, 4, 0,0 },{ 255, 0, 0,0 },{ 255, 0, 8,0 },{ 255, 0, 16,0 },{ 255, 0, 24,0 },{ 255, 0, 32,0 },{ 255, 0, 39,0 },{ 254, 0, 47,0 },{ 254, 0, 55,0 },{ 254, 0, 63,0 },{ 254, 0, 71,0 },{ 254, 0, 79,0 },{ 254, 0, 87,0 },{ 254, 0, 95,0 },{ 254, 0, 102,0 },{ 254, 0, 110,0 },{ 254, 0, 118,0 },{ 254, 0, 126,0 },{ 253, 0, 134,0 },{ 253, 0, 142,0 },{ 253, 0, 150,0 },{ 253, 0, 158,0 },{ 253, 0, 165,0 },{ 253, 0, 173,0 },{ 253, 0, 181,0 },{ 253, 0, 189,0 },{ 253, 0, 197,0 },{ 253, 0, 205,0 },{ 252, 0, 213,0 },{ 252, 0, 221,0 },{ 252, 0, 228,0 },{ 252, 0, 236,0 },{ 252, 0, 244,0 },{ 252, 0, 252,0 },{ 252, 8, 252,0 },{ 252, 16, 252,0 },{ 252, 24, 252,0 },{ 252, 32, 252,0 },{ 252, 40, 252,0 },{ 253, 48, 253,0 },{ 253, 56, 253,0 },{ 253, 64, 253,0 },{ 253, 72, 253,0 },{ 253, 80, 253,0 },{ 253, 88, 253,0 },{ 253, 96, 253,0 },{ 253, 104, 253,0 },{ 253, 112, 253,0 },{ 253, 120, 253,0 },{ 254, 128, 254,0 },{ 254, 135, 254,0 },{ 254, 143, 254,0 },{ 254, 151, 254,0 },{ 254, 159, 254,0 },{ 254, 167, 254,0 },{ 254, 175, 254,0 },{ 254, 183, 254,0 },{ 254, 191, 254,0 },{ 254, 199, 254,0 },{ 254, 207, 254,0 },{ 255, 215, 255,0 },{ 255, 223, 255,0 },{ 255, 231, 255,0 },{ 255, 239, 255,0 },{ 255, 247, 255,0 },{ 255, 255, 255,0 } },

	//04-����:
	{ { 0, 0, 0,0 },{ 0, 1, 1,0 },{ 1, 3, 3,0 },{ 1, 4, 4,0 },{ 1, 6, 6,0 },{ 2, 7, 7,0 },{ 2, 9, 9,0 },{ 3, 10, 10,0 },{ 3, 12, 12,0 },{ 3, 13, 13,0 },{ 4, 15, 15,0 },{ 4, 16, 16,0 },{ 4, 18, 18,0 },{ 5, 19, 19,0 },{ 5, 21, 21,0 },{ 6, 22, 22,0 },{ 6, 24, 24,0 },{ 6, 25, 25,0 },{ 7, 26, 26,0 },{ 7, 28, 28,0 },{ 7, 29, 29,0 },{ 8, 31, 31,0 },{ 8, 32, 32,0 },{ 8, 34, 34,0 },{ 9, 35, 35,0 },{ 9, 37, 37,0 },{ 10, 38, 38,0 },{ 10, 40, 40,0 },{ 10, 41, 41,0 },{ 11, 43, 43,0 },{ 11, 44, 44,0 },{ 11, 46, 46,0 },{ 12, 47, 47,0 },{ 12, 49, 49,0 },{ 13, 50, 50,0 },{ 13, 51, 51,0 },{ 13, 53, 53,0 },{ 14, 54, 54,0 },{ 14, 56, 56,0 },{ 14, 57, 57,0 },{ 15, 59, 59,0 },{ 15, 60, 60,0 },{ 15, 62, 62,0 },{ 16, 63, 63,0 },{ 16, 65, 65,0 },{ 17, 66, 66,0 },{ 17, 68, 68,0 },{ 17, 69, 69,0 },{ 18, 71, 71,0 },{ 18, 72, 72,0 },{ 18, 74, 74,0 },{ 19, 75, 75,0 },{ 19, 77, 77,0 },{ 19, 78, 78,0 },{ 20, 79, 79,0 },{ 20, 81, 81,0 },{ 21, 82, 82,0 },{ 21, 84, 84,0 },{ 21, 85, 85,0 },{ 22, 87, 87,0 },{ 22, 88, 88,0 },{ 22, 90, 90,0 },{ 23, 91, 91,0 },{ 23, 93, 93,0 },{ 24, 94, 94,0 },{ 24, 96, 96,0 },{ 24, 97, 97,0 },{ 25, 99, 99,0 },{ 25, 100, 100,0 },{ 25, 102, 102,0 },{ 26, 103, 103,0 },{ 26, 104, 104,0 },{ 26, 106, 106,0 },{ 27, 107, 107,0 },{ 27, 109, 109,0 },{ 28, 110, 110,0 },{ 28, 112, 112,0 },{ 28, 113, 113,0 },{ 29, 115, 115,0 },{ 29, 116, 116,0 },{ 29, 118, 118,0 },{ 30, 119, 119,0 },{ 30, 121, 121,0 },{ 31, 122, 122,0 },{ 31, 124, 124,0 },{ 31, 125, 125,0 },{ 32, 127, 127,0 },{ 32, 128, 128,0 },{ 34, 129, 127,0 },{ 36, 130, 126,0 },{ 38, 132, 124,0 },{ 41, 133, 123,0 },{ 43, 134, 122,0 },{ 45, 135, 121,0 },{ 47, 137, 119,0 },{ 49, 138, 118,0 },{ 51, 139, 117,0 },{ 53, 140, 116,0 },{ 56, 141, 114,0 },{ 58, 143, 113,0 },{ 60, 144, 112,0 },{ 62, 145, 111,0 },{ 64, 146, 110,0 },{ 66, 148, 108,0 },{ 68, 149, 107,0 },{ 71, 150, 106,0 },{ 73, 151, 105,0 },{ 75, 152, 103,0 },{ 77, 154, 102,0 },{ 79, 155, 101,0 },{ 81, 156, 100,0 },{ 83, 157, 98,0 },{ 86, 159, 97,0 },{ 88, 160, 96,0 },{ 90, 161, 95,0 },{ 92, 162, 94,0 },{ 94, 163, 92,0 },{ 96, 165, 91,0 },{ 98, 166, 90,0 },{ 101, 167, 89,0 },{ 103, 168, 87,0 },{ 105, 170, 86,0 },{ 107, 171, 85,0 },{ 109, 172, 84,0 },{ 111, 173, 82,0 },{ 113, 174, 81,0 },{ 116, 176, 80,0 },{ 118, 177, 79,0 },{ 120, 178, 78,0 },{ 122, 179, 76,0 },{ 124, 181, 75,0 },{ 126, 182, 74,0 },{ 128, 183, 73,0 },{ 131, 184, 71,0 },{ 133, 185, 70,0 },{ 135, 187, 69,0 },{ 137, 188, 68,0 },{ 139, 189, 66,0 },{ 141, 190, 65,0 },{ 144, 192, 64,0 },{ 146, 193, 63,0 },{ 148, 194, 62,0 },{ 150, 195, 60,0 },{ 152, 196, 59,0 },{ 154, 198, 58,0 },{ 156, 199, 57,0 },{ 159, 200, 55,0 },{ 161, 201, 54,0 },{ 163, 202, 53,0 },{ 165, 204, 52,0 },{ 167, 205, 50,0 },{ 169, 206, 49,0 },{ 171, 207, 48,0 },{ 174, 209, 47,0 },{ 176, 210, 46,0 },{ 178, 211, 44,0 },{ 180, 212, 43,0 },{ 182, 213, 42,0 },{ 184, 215, 41,0 },{ 186, 216, 39,0 },{ 189, 217, 38,0 },{ 191, 218, 37,0 },{ 193, 220, 36,0 },{ 195, 221, 34,0 },{ 197, 222, 33,0 },{ 199, 223, 32,0 },{ 201, 224, 31,0 },{ 204, 226, 30,0 },{ 206, 227, 28,0 },{ 208, 228, 27,0 },{ 210, 229, 26,0 },{ 212, 231, 25,0 },{ 214, 232, 23,0 },{ 216, 233, 22,0 },{ 219, 234, 21,0 },{ 221, 235, 20,0 },{ 223, 237, 18,0 },{ 225, 238, 17,0 },{ 227, 239, 16,0 },{ 229, 240, 15,0 },{ 231, 242, 14,0 },{ 234, 243, 12,0 },{ 236, 244, 11,0 },{ 238, 245, 10,0 },{ 240, 246, 9,0 },{ 242, 248, 7,0 },{ 244, 249, 6,0 },{ 246, 250, 5,0 },{ 249, 251, 4,0 },{ 251, 253, 2,0 },{ 253, 254, 1,0 },{ 255, 255, 0,0 },{ 255, 251, 0,0 },{ 255, 247, 0,0 },{ 255, 243, 0,0 },{ 255, 239, 0,0 },{ 255, 235, 0,0 },{ 255, 231, 0,0 },{ 255, 227, 0,0 },{ 255, 223, 0,0 },{ 255, 219, 0,0 },{ 255, 215, 0,0 },{ 255, 211, 0,0 },{ 255, 207, 0,0 },{ 255, 203, 0,0 },{ 255, 199, 0,0 },{ 255, 195, 0,0 },{ 255, 191, 0,0 },{ 255, 187, 0,0 },{ 255, 183, 0,0 },{ 255, 179, 0,0 },{ 255, 175, 0,0 },{ 255, 171, 0,0 },{ 255, 167, 0,0 },{ 255, 163, 0,0 },{ 255, 159, 0,0 },{ 255, 155, 0,0 },{ 255, 151, 0,0 },{ 255, 147, 0,0 },{ 255, 143, 0,0 },{ 255, 139, 0,0 },{ 255, 135, 0,0 },{ 255, 131, 0,0 },{ 255, 128, 0,0 },{ 255, 124, 0,0 },{ 255, 120, 0,0 },{ 255, 116, 0,0 },{ 255, 112, 0,0 },{ 255, 108, 0,0 },{ 255, 104, 0,0 },{ 255, 100, 0,0 },{ 255, 96, 0,0 },{ 255, 92, 0,0 },{ 255, 88, 0,0 },{ 255, 84, 0,0 },{ 255, 80, 0,0 },{ 255, 76, 0,0 },{ 255, 72, 0,0 },{ 255, 68, 0,0 },{ 255, 64, 0,0 },{ 253, 60, 0,0 },{ 251, 56, 0,0 },{ 249, 52, 0,0 },{ 247, 48, 0,0 },{ 245, 44, 0,0 },{ 243, 40, 0,0 },{ 241, 36, 0,0 },{ 240, 32, 0,0 },{ 238, 28, 0,0 },{ 236, 24, 0,0 },{ 234, 20, 0,0 },{ 232, 16, 0,0 },{ 230, 12, 0,0 },{ 228, 8, 0,0 },{ 226, 4, 0,0 },{ 224, 0, 0,0 } },

	//05-�ʺ�1:
	{ { 128, 0, 0,0 },{ 132, 0, 6,0 },{ 136, 0, 12,0 },{ 140, 0, 19,0 },{ 144, 0, 25,0 },{ 148, 0, 31,0 },{ 153, 0, 37,0 },{ 157, 0, 44,0 },{ 161, 0, 50,0 },{ 165, 0, 56,0 },{ 169, 0, 62,0 },{ 173, 0, 68,0 },{ 177, 0, 75,0 },{ 181, 0, 81,0 },{ 185, 0, 87,0 },{ 189, 0, 93,0 },{ 194, 0, 100,0 },{ 198, 0, 106,0 },{ 202, 0, 112,0 },{ 206, 0, 118,0 },{ 210, 0, 124,0 },{ 214, 0, 131,0 },{ 218, 0, 137,0 },{ 222, 0, 143,0 },{ 226, 0, 149,0 },{ 230, 0, 155,0 },{ 235, 0, 162,0 },{ 239, 0, 168,0 },{ 243, 0, 174,0 },{ 247, 0, 180,0 },{ 251, 0, 187,0 },{ 255, 0, 193,0 },{ 250, 0, 199,0 },{ 245, 0, 205,0 },{ 241, 0, 211,0 },{ 236, 0, 218,0 },{ 231, 0, 224,0 },{ 226, 0, 230,0 },{ 221, 0, 236,0 },{ 217, 0, 243,0 },{ 212, 0, 249,0 },{ 207, 0, 255,0 },{ 202, 0, 255,0 },{ 197, 0, 255,0 },{ 192, 0, 255,0 },{ 188, 0, 255,0 },{ 183, 0, 255,0 },{ 178, 0, 255,0 },{ 173, 0, 255,0 },{ 168, 0, 255,0 },{ 164, 0, 255,0 },{ 159, 0, 255,0 },{ 154, 0, 255,0 },{ 149, 0, 255,0 },{ 144, 0, 255,0 },{ 140, 0, 255,0 },{ 135, 0, 255,0 },{ 130, 0, 255,0 },{ 125, 0, 255,0 },{ 120, 0, 255,0 },{ 115, 0, 255,0 },{ 111, 0, 255,0 },{ 106, 0, 255,0 },{ 101, 0, 255,0 },{ 96, 0, 255,0 },{ 91, 0, 255,0 },{ 87, 0, 255,0 },{ 82, 0, 255,0 },{ 77, 0, 255,0 },{ 72, 0, 255,0 },{ 67, 0, 255,0 },{ 63, 0, 255,0 },{ 58, 0, 255,0 },{ 53, 0, 255,0 },{ 48, 0, 255,0 },{ 43, 0, 255,0 },{ 38, 0, 255,0 },{ 34, 0, 255,0 },{ 29, 0, 255,0 },{ 24, 0, 255,0 },{ 19, 0, 255,0 },{ 14, 0, 255,0 },{ 10, 0, 255,0 },{ 5, 0, 255,0 },{ 0, 6, 255,0 },{ 0, 12, 255,0 },{ 0, 18, 255,0 },{ 0, 24, 255,0 },{ 0, 30, 255,0 },{ 0, 36, 255,0 },{ 0, 42, 255,0 },{ 0, 47, 255,0 },{ 0, 53, 255,0 },{ 0, 59, 255,0 },{ 0, 65, 255,0 },{ 0, 71, 255,0 },{ 0, 77, 255,0 },{ 0, 83, 255,0 },{ 0, 89, 255,0 },{ 0, 95, 255,0 },{ 0, 101, 255,0 },{ 0, 107, 255,0 },{ 0, 113, 255,0 },{ 0, 119, 255,0 },{ 0, 125, 255,0 },{ 0, 130, 255,0 },{ 0, 136, 255,0 },{ 0, 142, 255,0 },{ 0, 148, 255,0 },{ 0, 154, 255,0 },{ 0, 160, 255,0 },{ 0, 166, 255,0 },{ 0, 172, 255,0 },{ 0, 178, 255,0 },{ 0, 184, 255,0 },{ 0, 190, 255,0 },{ 0, 196, 255,0 },{ 0, 202, 255,0 },{ 0, 208, 255,0 },{ 0, 213, 255,0 },{ 0, 219, 255,0 },{ 0, 225, 255,0 },{ 0, 231, 255,0 },{ 0, 237, 255,0 },{ 0, 243, 255,0 },{ 0, 249, 255,0 },{ 0, 255, 255,0 },{ 0, 255, 249,0 },{ 0, 255, 243,0 },{ 0, 255, 237,0 },{ 0, 255, 231,0 },{ 0, 255, 225,0 },{ 0, 255, 219,0 },{ 0, 255, 213,0 },{ 0, 255, 208,0 },{ 0, 255, 202,0 },{ 0, 255, 196,0 },{ 0, 255, 190,0 },{ 0, 255, 184,0 },{ 0, 255, 178,0 },{ 0, 255, 172,0 },{ 0, 255, 166,0 },{ 0, 255, 160,0 },{ 0, 255, 154,0 },{ 0, 255, 148,0 },{ 0, 255, 142,0 },{ 0, 255, 136,0 },{ 0, 255, 130,0 },{ 0, 255, 125,0 },{ 0, 255, 119,0 },{ 0, 255, 113,0 },{ 0, 255, 107,0 },{ 0, 255, 101,0 },{ 0, 255, 95,0 },{ 0, 255, 89,0 },{ 0, 255, 83,0 },{ 0, 255, 77,0 },{ 0, 255, 71,0 },{ 0, 255, 65,0 },{ 0, 255, 59,0 },{ 0, 255, 53,0 },{ 0, 255, 47,0 },{ 0, 255, 42,0 },{ 0, 255, 36,0 },{ 0, 255, 30,0 },{ 0, 255, 24,0 },{ 0, 255, 18,0 },{ 0, 255, 12,0 },{ 0, 255, 6,0 },{ 0, 255, 0,0 },{ 6, 255, 0,0 },{ 12, 255, 0,0 },{ 18, 255, 0,0 },{ 24, 255, 0,0 },{ 30, 255, 0,0 },{ 36, 255, 0,0 },{ 43, 255, 0,0 },{ 49, 255, 0,0 },{ 55, 255, 0,0 },{ 61, 255, 0,0 },{ 67, 255, 0,0 },{ 73, 255, 0,0 },{ 79, 255, 0,0 },{ 85, 255, 0,0 },{ 91, 255, 0,0 },{ 97, 255, 0,0 },{ 103, 255, 0,0 },{ 109, 255, 0,0 },{ 115, 255, 0,0 },{ 121, 255, 0,0 },{ 128, 255, 0,0 },{ 134, 255, 0,0 },{ 140, 255, 0,0 },{ 146, 255, 0,0 },{ 152, 255, 0,0 },{ 158, 255, 0,0 },{ 164, 255, 0,0 },{ 170, 255, 0,0 },{ 176, 255, 0,0 },{ 182, 255, 0,0 },{ 188, 255, 0,0 },{ 194, 255, 0,0 },{ 200, 255, 0,0 },{ 206, 255, 0,0 },{ 213, 255, 0,0 },{ 219, 255, 0,0 },{ 225, 255, 0,0 },{ 231, 255, 0,0 },{ 237, 255, 0,0 },{ 243, 255, 0,0 },{ 249, 255, 0,0 },{ 255, 255, 0,0 },{ 255, 249, 0,0 },{ 255, 243, 0,0 },{ 255, 238, 0,0 },{ 255, 232, 0,0 },{ 255, 226, 0,0 },{ 255, 220, 0,0 },{ 255, 214, 0,0 },{ 255, 209, 0,0 },{ 255, 203, 0,0 },{ 255, 197, 0,0 },{ 255, 191, 0,0 },{ 255, 185, 0,0 },{ 255, 180, 0,0 },{ 255, 174, 0,0 },{ 255, 168, 0,0 },{ 255, 162, 0,0 },{ 255, 156, 0,0 },{ 255, 151, 0,0 },{ 255, 145, 0,0 },{ 255, 139, 0,0 },{ 255, 133, 0,0 },{ 255, 127, 0,0 },{ 255, 122, 0,0 },{ 255, 116, 0,0 },{ 255, 110, 0,0 },{ 255, 104, 0,0 },{ 255, 99, 0,0 },{ 255, 93, 0,0 },{ 255, 87, 0,0 },{ 255, 81, 0,0 },{ 255, 75, 0,0 },{ 255, 70, 0,0 },{ 255, 64, 0,0 },{ 255, 58, 0,0 },{ 255, 52, 0,0 },{ 255, 46, 0,0 },{ 255, 41, 0,0 },{ 255, 35, 0,0 },{ 255, 29, 0,0 },{ 255, 23, 0,0 },{ 255, 17, 0,0 },{ 255, 12, 0,0 },{ 255, 6, 0,0 },{ 255, 0, 0,0 } },

	//06-����:
	{ { 0, 0, 0,0 },{ 3, 0, 0,0 },{ 5, 0, 0,0 },{ 8, 0, 0,0 },{ 11, 0, 0,0 },{ 13, 0, 0,0 },{ 16, 0, 0,0 },{ 19, 0, 0,0 },{ 21, 0, 0,0 },{ 24, 0, 0,0 },{ 27, 0, 0,0 },{ 30, 0, 0,0 },{ 32, 0, 0,0 },{ 35, 0, 0,0 },{ 38, 0, 0,0 },{ 40, 0, 0,0 },{ 43, 0, 0,0 },{ 46, 0, 0,0 },{ 48, 0, 0,0 },{ 51, 0, 0,0 },{ 54, 0, 0,0 },{ 56, 0, 0,0 },{ 59, 0, 0,0 },{ 62, 0, 0,0 },{ 64, 0, 0,0 },{ 67, 0, 0,0 },{ 70, 0, 0,0 },{ 72, 0, 0,0 },{ 75, 0, 0,0 },{ 78, 0, 0,0 },{ 81, 0, 0,0 },{ 83, 0, 0,0 },{ 86, 0, 0,0 },{ 89, 0, 0,0 },{ 91, 0, 0,0 },{ 94, 0, 0,0 },{ 97, 0, 0,0 },{ 99, 0, 0,0 },{ 102, 0, 0,0 },{ 105, 0, 0,0 },{ 107, 0, 0,0 },{ 110, 0, 0,0 },{ 113, 0, 0,0 },{ 115, 0, 0,0 },{ 118, 0, 0,0 },{ 121, 0, 0,0 },{ 123, 0, 0,0 },{ 126, 0, 0,0 },{ 129, 0, 0,0 },{ 132, 0, 0,0 },{ 134, 0, 0,0 },{ 137, 0, 0,0 },{ 140, 0, 0,0 },{ 142, 0, 0,0 },{ 145, 0, 0,0 },{ 148, 0, 0,0 },{ 150, 0, 0,0 },{ 153, 0, 0,0 },{ 156, 0, 0,0 },{ 158, 0, 0,0 },{ 161, 0, 0,0 },{ 164, 0, 0,0 },{ 166, 0, 0,0 },{ 169, 0, 0,0 },{ 172, 0, 0,0 },{ 174, 0, 0,0 },{ 177, 0, 0,0 },{ 180, 0, 0,0 },{ 183, 0, 0,0 },{ 185, 0, 0,0 },{ 188, 0, 0,0 },{ 191, 0, 0,0 },{ 193, 0, 0,0 },{ 196, 0, 0,0 },{ 199, 0, 0,0 },{ 201, 0, 0,0 },{ 204, 0, 0,0 },{ 207, 0, 0,0 },{ 209, 0, 0,0 },{ 212, 0, 0,0 },{ 215, 0, 0,0 },{ 217, 0, 0,0 },{ 220, 0, 0,0 },{ 223, 0, 0,0 },{ 225, 0, 0,0 },{ 228, 0, 0,0 },{ 231, 0, 0,0 },{ 234, 0, 0,0 },{ 236, 0, 0,0 },{ 239, 0, 0,0 },{ 242, 0, 0,0 },{ 244, 0, 0,0 },{ 247, 0, 0,0 },{ 250, 0, 0,0 },{ 252, 0, 0,0 },{ 255, 0, 0,0 },{ 255, 3, 0,0 },{ 255, 5, 0,0 },{ 255, 8, 0,0 },{ 255, 11, 0,0 },{ 255, 13, 0,0 },{ 255, 16, 0,0 },{ 255, 19, 0,0 },{ 255, 21, 0,0 },{ 255, 24, 0,0 },{ 255, 27, 0,0 },{ 255, 29, 0,0 },{ 255, 32, 0,0 },{ 255, 35, 0,0 },{ 255, 37, 0,0 },{ 255, 40, 0,0 },{ 255, 43, 0,0 },{ 255, 45, 0,0 },{ 255, 48, 0,0 },{ 255, 50, 0,0 },{ 255, 53, 0,0 },{ 255, 56, 0,0 },{ 255, 58, 0,0 },{ 255, 61, 0,0 },{ 255, 64, 0,0 },{ 255, 66, 0,0 },{ 255, 69, 0,0 },{ 255, 72, 0,0 },{ 255, 74, 0,0 },{ 255, 77, 0,0 },{ 255, 80, 0,0 },{ 255, 82, 0,0 },{ 255, 85, 0,0 },{ 255, 88, 0,0 },{ 255, 90, 0,0 },{ 255, 93, 0,0 },{ 255, 96, 0,0 },{ 255, 98, 0,0 },{ 255, 101, 0,0 },{ 255, 104, 0,0 },{ 255, 106, 0,0 },{ 255, 109, 0,0 },{ 255, 112, 0,0 },{ 255, 114, 0,0 },{ 255, 117, 0,0 },{ 255, 120, 0,0 },{ 255, 122, 0,0 },{ 255, 125, 0,0 },{ 255, 128, 0,0 },{ 255, 130, 0,0 },{ 255, 133, 0,0 },{ 255, 135, 0,0 },{ 255, 138, 0,0 },{ 255, 141, 0,0 },{ 255, 143, 0,0 },{ 255, 146, 0,0 },{ 255, 149, 0,0 },{ 255, 151, 0,0 },{ 255, 154, 0,0 },{ 255, 157, 0,0 },{ 255, 159, 0,0 },{ 255, 162, 0,0 },{ 255, 165, 0,0 },{ 255, 167, 0,0 },{ 255, 170, 0,0 },{ 255, 173, 0,0 },{ 255, 175, 0,0 },{ 255, 178, 0,0 },{ 255, 181, 0,0 },{ 255, 183, 0,0 },{ 255, 186, 0,0 },{ 255, 189, 0,0 },{ 255, 191, 0,0 },{ 255, 194, 0,0 },{ 255, 197, 0,0 },{ 255, 199, 0,0 },{ 255, 202, 0,0 },{ 255, 205, 0,0 },{ 255, 207, 0,0 },{ 255, 210, 0,0 },{ 255, 213, 0,0 },{ 255, 215, 0,0 },{ 255, 218, 0,0 },{ 255, 220, 0,0 },{ 255, 223, 0,0 },{ 255, 226, 0,0 },{ 255, 228, 0,0 },{ 255, 231, 0,0 },{ 255, 234, 0,0 },{ 255, 236, 0,0 },{ 255, 239, 0,0 },{ 255, 242, 0,0 },{ 255, 244, 0,0 },{ 255, 247, 0,0 },{ 255, 250, 0,0 },{ 255, 252, 0,0 },{ 255, 255, 0,0 },{ 255, 255, 4,0 },{ 255, 255, 8,0 },{ 255, 255, 12,0 },{ 255, 255, 16,0 },{ 255, 255, 20,0 },{ 255, 255, 24,0 },{ 255, 255, 28,0 },{ 255, 255, 32,0 },{ 255, 255, 36,0 },{ 255, 255, 40,0 },{ 255, 255, 44,0 },{ 255, 255, 48,0 },{ 255, 255, 52,0 },{ 255, 255, 56,0 },{ 255, 255, 60,0 },{ 255, 255, 64,0 },{ 255, 255, 68,0 },{ 255, 255, 72,0 },{ 255, 255, 76,0 },{ 255, 255, 80,0 },{ 255, 255, 84,0 },{ 255, 255, 88,0 },{ 255, 255, 92,0 },{ 255, 255, 96,0 },{ 255, 255, 100,0 },{ 255, 255, 104,0 },{ 255, 255, 108,0 },{ 255, 255, 112,0 },{ 255, 255, 116,0 },{ 255, 255, 120,0 },{ 255, 255, 124,0 },{ 255, 255, 128,0 },{ 255, 255, 131,0 },{ 255, 255, 135,0 },{ 255, 255, 139,0 },{ 255, 255, 143,0 },{ 255, 255, 147,0 },{ 255, 255, 151,0 },{ 255, 255, 155,0 },{ 255, 255, 159,0 },{ 255, 255, 163,0 },{ 255, 255, 167,0 },{ 255, 255, 171,0 },{ 255, 255, 175,0 },{ 255, 255, 179,0 },{ 255, 255, 183,0 },{ 255, 255, 187,0 },{ 255, 255, 191,0 },{ 255, 255, 195,0 },{ 255, 255, 199,0 },{ 255, 255, 203,0 },{ 255, 255, 207,0 },{ 255, 255, 211,0 },{ 255, 255, 215,0 },{ 255, 255, 219,0 },{ 255, 255, 223,0 },{ 255, 255, 227,0 },{ 255, 255, 231,0 },{ 255, 255, 235,0 },{ 255, 255, 239,0 },{ 255, 255, 243,0 },{ 255, 255, 247,0 },{ 255, 255, 251,0 },{ 255, 255, 255,0 } },

	//07-���?1:
	{ { 0, 0, 0,0 },{ 1, 1, 1,0 },{ 2, 2, 2,0 },{ 3, 3, 3,0 },{ 4, 4, 4,0 },{ 6, 6, 6,0 },{ 7, 7, 7,0 },{ 8, 8, 8,0 },{ 9, 9, 9,0 },{ 10, 10, 10,0 },{ 11, 11, 11,0 },{ 12, 12, 12,0 },{ 13, 13, 13,0 },{ 14, 14, 14,0 },{ 16, 16, 16,0 },{ 17, 17, 17,0 },{ 18, 18, 18,0 },{ 19, 19, 19,0 },{ 20, 20, 20,0 },{ 21, 21, 21,0 },{ 22, 22, 22,0 },{ 23, 23, 23,0 },{ 24, 24, 24,0 },{ 26, 26, 26,0 },{ 27, 27, 27,0 },{ 28, 28, 28,0 },{ 29, 29, 29,0 },{ 30, 30, 30,0 },{ 31, 31, 31,0 },{ 32, 32, 32,0 },{ 33, 33, 33,0 },{ 35, 35, 35,0 },{ 36, 36, 36,0 },{ 37, 37, 37,0 },{ 38, 38, 38,0 },{ 39, 39, 39,0 },{ 40, 40, 40,0 },{ 41, 41, 41,0 },{ 42, 42, 42,0 },{ 43, 43, 43,0 },{ 45, 45, 45,0 },{ 46, 46, 46,0 },{ 47, 47, 47,0 },{ 48, 48, 48,0 },{ 49, 49, 49,0 },{ 50, 50, 50,0 },{ 51, 51, 51,0 },{ 52, 52, 52,0 },{ 53, 53, 53,0 },{ 55, 55, 55,0 },{ 56, 56, 56,0 },{ 57, 57, 57,0 },{ 58, 58, 58,0 },{ 59, 59, 59,0 },{ 60, 60, 60,0 },{ 61, 61, 61,0 },{ 62, 62, 62,0 },{ 63, 63, 63,0 },{ 65, 65, 65,0 },{ 66, 66, 66,0 },{ 67, 67, 67,0 },{ 68, 68, 68,0 },{ 69, 69, 69,0 },{ 70, 70, 70,0 },{ 71, 71, 71,0 },{ 72, 72, 72,0 },{ 73, 73, 73,0 },{ 75, 75, 75,0 },{ 76, 76, 76,0 },{ 77, 77, 77,0 },{ 78, 78, 78,0 },{ 79, 79, 79,0 },{ 80, 80, 80,0 },{ 81, 81, 81,0 },{ 82, 82, 82,0 },{ 84, 84, 84,0 },{ 85, 85, 85,0 },{ 86, 86, 86,0 },{ 87, 87, 87,0 },{ 88, 88, 88,0 },{ 89, 89, 89,0 },{ 90, 90, 90,0 },{ 91, 91, 91,0 },{ 92, 92, 92,0 },{ 94, 94, 94,0 },{ 95, 95, 95,0 },{ 96, 96, 96,0 },{ 97, 97, 97,0 },{ 98, 98, 98,0 },{ 99, 99, 99,0 },{ 100, 100, 100,0 },{ 101, 101, 101,0 },{ 102, 102, 102,0 },{ 104, 104, 104,0 },{ 105, 105, 105,0 },{ 106, 106, 106,0 },{ 107, 107, 107,0 },{ 108, 108, 108,0 },{ 109, 109, 109,0 },{ 110, 110, 110,0 },{ 111, 111, 111,0 },{ 112, 112, 112,0 },{ 114, 114, 114,0 },{ 115, 115, 115,0 },{ 116, 116, 116,0 },{ 117, 117, 117,0 },{ 118, 118, 118,0 },{ 119, 119, 119,0 },{ 120, 120, 120,0 },{ 121, 121, 121,0 },{ 122, 122, 122,0 },{ 124, 124, 124,0 },{ 125, 125, 125,0 },{ 126, 126, 126,0 },{ 127, 127, 127,0 },{ 128, 128, 128,0 },{ 129, 129, 129,0 },{ 130, 130, 130,0 },{ 131, 131, 131,0 },{ 133, 133, 133,0 },{ 134, 134, 134,0 },{ 135, 135, 135,0 },{ 136, 136, 136,0 },{ 137, 137, 137,0 },{ 138, 138, 138,0 },{ 139, 139, 139,0 },{ 140, 140, 140,0 },{ 141, 141, 141,0 },{ 143, 143, 143,0 },{ 144, 144, 144,0 },{ 145, 145, 145,0 },{ 146, 146, 146,0 },{ 147, 147, 147,0 },{ 148, 148, 148,0 },{ 149, 149, 149,0 },{ 150, 150, 150,0 },{ 151, 151, 151,0 },{ 153, 153, 153,0 },{ 154, 154, 154,0 },{ 155, 155, 155,0 },{ 156, 156, 156,0 },{ 157, 157, 157,0 },{ 158, 158, 158,0 },{ 159, 159, 159,0 },{ 160, 160, 160,0 },{ 161, 161, 161,0 },{ 163, 163, 163,0 },{ 164, 164, 164,0 },{ 165, 165, 165,0 },{ 166, 166, 166,0 },{ 167, 167, 167,0 },{ 168, 168, 168,0 },{ 169, 169, 169,0 },{ 170, 170, 170,0 },{ 171, 171, 171,0 },{ 173, 173, 173,0 },{ 174, 174, 174,0 },{ 175, 175, 175,0 },{ 176, 176, 176,0 },{ 177, 177, 177,0 },{ 178, 178, 178,0 },{ 179, 179, 179,0 },{ 180, 180, 180,0 },{ 182, 182, 182,0 },{ 183, 183, 183,0 },{ 184, 184, 184,0 },{ 185, 185, 185,0 },{ 186, 186, 186,0 },{ 187, 187, 187,0 },{ 188, 188, 188,0 },{ 189, 189, 189,0 },{ 190, 190, 190,0 },{ 192, 192, 192,0 },{ 193, 193, 193,0 },{ 194, 194, 194,0 },{ 195, 195, 195,0 },{ 196, 196, 196,0 },{ 197, 197, 197,0 },{ 198, 198, 198,0 },{ 199, 199, 199,0 },{ 200, 200, 200,0 },{ 202, 202, 202,0 },{ 203, 203, 203,0 },{ 204, 204, 204,0 },{ 205, 205, 205,0 },{ 206, 206, 206,0 },{ 207, 207, 207,0 },{ 208, 208, 208,0 },{ 209, 209, 209,0 },{ 210, 210, 210,0 },{ 212, 212, 212,0 },{ 213, 213, 213,0 },{ 214, 214, 214,0 },{ 215, 215, 215,0 },{ 216, 216, 216,0 },{ 217, 217, 217,0 },{ 218, 218, 218,0 },{ 219, 219, 219,0 },{ 220, 220, 220,0 },{ 222, 222, 222,0 },{ 223, 223, 223,0 },{ 224, 224, 224,0 },{ 225, 225, 225,0 },{ 226, 226, 226,0 },{ 227, 227, 227,0 },{ 228, 228, 228,0 },{ 229, 229, 229,0 },{ 231, 231, 231,0 },{ 232, 232, 232,0 },{ 233, 233, 233,0 },{ 234, 234, 234,0 },{ 235, 235, 235,0 },{ 236, 236, 236,0 },{ 237, 237, 237,0 },{ 238, 238, 238,0 },{ 239, 239, 239,0 },{ 241, 241, 241,0 },{ 242, 242, 242,0 },{ 243, 243, 243,0 },{ 244, 244, 244,0 },{ 245, 245, 245,0 },{ 246, 246, 246,0 },{ 247, 247, 247,0 },{ 248, 248, 248,0 },{ 249, 249, 249,0 },{ 251, 251, 251,0 },{ 252, 252, 252,0 },{ 253, 253, 253,0 },{ 254, 254, 254,0 },{ 255, 255, 255,0 },{ 255, 249, 249,0 },{ 255, 242, 242,0 },{ 255, 236, 236,0 },{ 255, 230, 230,0 },{ 255, 223, 223,0 },{ 255, 217, 217,0 },{ 255, 211, 211,0 },{ 255, 204, 204,0 },{ 255, 198, 198,0 },{ 255, 192, 192,0 },{ 255, 185, 185,0 },{ 255, 179, 179,0 },{ 255, 172, 172,0 },{ 255, 166, 166,0 },{ 255, 160, 160,0 },{ 255, 153, 153,0 },{ 255, 147, 147,0 },{ 255, 141, 141,0 },{ 255, 134, 134,0 },{ 255, 128, 128,0 },{ 250, 107, 107,0 },{ 245, 85, 85,0 },{ 240, 64, 64,0 },{ 234, 43, 43,0 },{ 229, 21, 21,0 },{ 224, 0, 0,0 } },

	//08-���?3
	{ { 255,142,142,0 },{ 255,142,142,0 },{ 255,142,142,0 },{ 255,142,142,0 },{ 255,141,141,0 },{ 255,141,141,0 },{ 255,141,141,0 },{ 255,141,141,0 },{ 255,140,140,0 },{ 255,140,140,0 },{ 255,140,140,0 },{ 255,139,139,0 },{ 255,138,138,0 },{ 255,138,138,0 },{ 255,137,137,0 },{ 255,137,137,0 },{ 255,136,136,0 },{ 255,135,135,0 },{ 255,135,135,0 },{ 255,134,134,0 },{ 255,134,134,0 },{ 255,133,133,0 },{ 255,133,133,0 },{ 255,132,132,0 },{ 255,132,132,0 },{ 255,132,132,0 },{ 255,131,131,0 },{ 255,131,131,0 },{ 255,130,130,0 },{ 255,130,130,0 },{ 255,129,129,0 },{ 255,129,129,0 },{ 255,128,128,0 },{ 255,128,128,0 },{ 255,128,128,0 },{ 255,127,127,0 },{ 255,127,127,0 },{ 255,127,127,0 },{ 255,126,126,0 },{ 255,126,126,0 },{ 255,125,125,0 },{ 254,125,125,0 },{ 254,125,125,0 },{ 254,124,124,0 },{ 254,124,124,0 },{ 254,124,124,0 },{ 254,123,123,0 },{ 254,123,123,0 },{ 254,123,123,0 },{ 254,122,122,0 },{ 254,122,122,0 },{ 254,121,121,0 },{ 254,121,121,0 },{ 254,121,121,0 },{ 254,120,120,0 },{ 253,120,120,0 },{ 253,120,120,0 },{ 253,119,119,0 },{ 253,119,119,0 },{ 253,118,118,0 },{ 253,118,118,0 },{ 253,118,118,0 },{ 253,117,117,0 },{ 253,117,117,0 },{ 252,117,117,0 },{ 252,116,116,0 },{ 252,116,116,0 },{ 252,115,115,0 },{ 252,115,115,0 },{ 252,115,115,0 },{ 251,114,114,0 },{ 251,114,114,0 },{ 251,114,114,0 },{ 251,113,113,0 },{ 251,113,113,0 },{ 251,112,112,0 },{ 251,112,112,0 },{ 251,112,112,0 },{ 251,111,111,0 },{ 251,111,111,0 },{ 250,111,111,0 },{ 250,110,110,0 },{ 250,110,110,0 },{ 250,110,110,0 },{ 250,109,109,0 },{ 250,109,109,0 },{ 250,108,108,0 },{ 250,108,108,0 },{ 250,108,108,0 },{ 250,107,107,0 },{ 250,107,107,0 },{ 250,107,107,0 },{ 250,106,106,0 },{ 250,106,106,0 },{ 249,105,105,0 },{ 249,105,105,0 },{ 249,105,105,0 },{ 249,104,104,0 },{ 249,104,104,0 },{ 249,104,104,0 },{ 249,103,103,0 },{ 249,103,103,0 },{ 249,102,102,0 },{ 249,102,102,0 },{ 249,102,102,0 },{ 249,101,101,0 },{ 249,101,101,0 },{ 249,101,101,0 },{ 248,100,100,0 },{ 248,100,100,0 },{ 248,99,99,0 },{ 248,99,99,0 },{ 248,99,99,0 },{ 248,98,98,0 },{ 248,98,98,0 },{ 248,98,98,0 },{ 248,97,97,0 },{ 248,97,97,0 },{ 248,97,97,0 },{ 248,96,96,0 },{ 248,96,96,0 },{ 248,96,96,0 },{ 247,96,96,0 },{ 247,95,95,0 },{ 247,95,95,0 },{ 247,95,95,0 },{ 247,94,94,0 },{ 247,94,94,0 },{ 247,94,94,0 },{ 247,93,93,0 },{ 247,93,93,0 },{ 247,93,93,0 },{ 246,92,92,0 },{ 246,92,92,0 },{ 246,92,92,0 },{ 246,91,91,0 },{ 246,91,91,0 },{ 246,91,91,0 },{ 245,90,90,0 },{ 245,90,90,0 },{ 245,89,89,0 },{ 245,89,89,0 },{ 245,89,89,0 },{ 245,88,88,0 },{ 245,88,88,0 },{ 245,88,88,0 },{ 245,87,87,0 },{ 244,87,87,0 },{ 244,86,86,0 },{ 244,86,86,0 },{ 244,86,86,0 },{ 244,85,85,0 },{ 244,85,85,0 },{ 244,85,85,0 },{ 244,84,84,0 },{ 244,84,84,0 },{ 244,83,83,0 },{ 244,83,83,0 },{ 244,83,83,0 },{ 244,82,82,0 },{ 244,82,82,0 },{ 244,82,82,0 },{ 243,81,81,0 },{ 243,81,81,0 },{ 243,80,80,0 },{ 243,80,80,0 },{ 243,80,80,0 },{ 243,79,79,0 },{ 243,79,79,0 },{ 243,79,79,0 },{ 243,78,78,0 },{ 243,78,78,0 },{ 243,77,77,0 },{ 243,77,77,0 },{ 243,77,77,0 },{ 242,76,76,0 },{ 242,76,76,0 },{ 242,76,76,0 },{ 242,75,75,0 },{ 242,75,75,0 },{ 242,75,75,0 },{ 242,74,74,0 },{ 242,74,74,0 },{ 242,73,73,0 },{ 242,73,73,0 },{ 242,73,73,0 },{ 242,72,72,0 },{ 242,72,72,0 },{ 242,72,72,0 },{ 241,71,71,0 },{ 241,71,71,0 },{ 241,70,70,0 },{ 241,70,70,0 },{ 241,70,70,0 },{ 241,69,69,0 },{ 241,69,69,0 },{ 241,69,69,0 },{ 241,68,68,0 },{ 241,68,68,0 },{ 241,67,67,0 },{ 241,67,67,0 },{ 241,67,67,0 },{ 241,66,66,0 },{ 240,66,66,0 },{ 240,66,66,0 },{ 240,65,65,0 },{ 240,65,65,0 },{ 240,64,64,0 },{ 240,64,64,0 },{ 240,64,64,0 },{ 240,63,63,0 },{ 240,63,63,0 },{ 240,63,63,0 },{ 239,62,62,0 },{ 239,62,62,0 },{ 239,62,62,0 },{ 239,61,61,0 },{ 239,61,61,0 },{ 239,60,60,0 },{ 238,60,60,0 },{ 238,60,60,0 },{ 238,59,59,0 },{ 238,59,59,0 },{ 238,59,59,0 },{ 238,58,58,0 },{ 238,58,58,0 },{ 238,57,57,0 },{ 238,57,57,0 },{ 237,57,57,0 },{ 237,56,56,0 },{ 237,56,56,0 },{ 237,56,56,0 },{ 237,55,55,0 },{ 237,55,55,0 },{ 237,54,54,0 },{ 237,54,54,0 },{ 237,54,54,0 },{ 237,53,53,0 },{ 237,53,53,0 },{ 237,52,52,0 },{ 237,52,52,0 },{ 237,52,52,0 },{ 236,51,51,0 },{ 236,51,51,0 },{ 236,50,50,0 },{ 236,50,50,0 },{ 236,50,50,0 },{ 236,49,49,0 },{ 236,49,49,0 },{ 236,49,49,0 },{ 236,49,49,0 },{ 236,49,49,0 },{ 236,49,49,0 },{ 236,48,48,0 },{ 236,48,48,0 },{ 236,48,48,0 } },

	//09-����α��
	{ { 255, 255, 200,0 },{ 255, 255, 197,0 },{ 255, 255, 195,0 },{ 255, 255, 192,0 },{ 255, 255, 190,0 },{ 255, 255, 187,0 },{ 255, 255, 185,0 },{ 255, 255, 182,0 },{ 255, 255, 180,0 },{ 255, 255, 177,0 },{ 255, 255, 175,0 },{ 255, 255, 172,0 },{ 255, 255, 170,0 },{ 255, 255, 167,0 },{ 255, 255, 165,0 },{ 255, 255, 162,0 },{ 255, 255, 159,0 },{ 255, 255, 157,0 },{ 255, 255, 154,0 },{ 255, 255, 152,0 },{ 255, 255, 149,0 },{ 255, 255, 147,0 },{ 255, 255, 144,0 },{ 255, 255, 142,0 },{ 255, 255, 139,0 },{ 255, 255, 137,0 },{ 255, 255, 134,0 },{ 255, 255, 132,0 },{ 255, 255, 129,0 },{ 255, 255, 127,0 },{ 255, 255, 124,0 },{ 255, 255, 122,0 },{ 255, 255, 119,0 },{ 255, 255, 116,0 },{ 255, 255, 114,0 },{ 255, 255, 111,0 },{ 255, 255, 109,0 },{ 255, 255, 106,0 },{ 255, 255, 104,0 },{ 255, 255, 101,0 },{ 255, 255, 99,0 },{ 255, 255, 96,0 },{ 255, 255, 94,0 },{ 255, 255, 91,0 },{ 255, 255, 89,0 },{ 255, 255, 86,0 },{ 255, 255, 84,0 },{ 255, 255, 81,0 },{ 255, 255, 78,0 },{ 255, 255, 76,0 },{ 255, 255, 73,0 },{ 255, 255, 71,0 },{ 255, 255, 68,0 },{ 255, 255, 66,0 },{ 255, 255, 63,0 },{ 255, 255, 61,0 },{ 255, 255, 58,0 },{ 255, 255, 56,0 },{ 255, 255, 53,0 },{ 255, 255, 51,0 },{ 255, 255, 48,0 },{ 255, 255, 46,0 },{ 255, 255, 43,0 },{ 255, 255, 41,0 },{ 255, 255, 38,0 },{ 255, 255, 35,0 },{ 255, 255, 33,0 },{ 255, 255, 30,0 },{ 255, 255, 28,0 },{ 255, 255, 25,0 },{ 255, 255, 23,0 },{ 255, 255, 20,0 },{ 255, 255, 18,0 },{ 255, 255, 15,0 },{ 255, 255, 13,0 },{ 255, 255, 10,0 },{ 255, 255, 8,0 },{ 255, 255, 5,0 },{ 255, 255, 3,0 },{ 255, 255, 0,0 },{ 255, 254, 0,0 },{ 255, 252, 0,0 },{ 254, 251, 0,0 },{ 254, 249, 0,0 },{ 254, 248, 0,0 },{ 254, 246, 0,0 },{ 254, 245, 0,0 },{ 254, 243, 0,0 },{ 253, 242, 0,0 },{ 253, 241, 0,0 },{ 253, 239, 0,0 },{ 253, 238, 0,0 },{ 253, 236, 0,0 },{ 253, 235, 0,0 },{ 252, 233, 0,0 },{ 252, 232, 0,0 },{ 252, 230, 0,0 },{ 252, 229, 0,0 },{ 252, 227, 0,0 },{ 252, 226, 0,0 },{ 251, 225, 0,0 },{ 251, 223, 0,0 },{ 251, 222, 0,0 },{ 251, 220, 0,0 },{ 251, 219, 0,0 },{ 251, 217, 0,0 },{ 250, 216, 0,0 },{ 250, 214, 0,0 },{ 250, 213, 0,0 },{ 250, 212, 0,0 },{ 250, 210, 0,0 },{ 250, 209, 0,0 },{ 249, 207, 0,0 },{ 249, 206, 0,0 },{ 249, 204, 0,0 },{ 249, 203, 0,0 },{ 249, 201, 0,0 },{ 249, 200, 0,0 },{ 248, 198, 0,0 },{ 248, 197, 0,0 },{ 248, 196, 0,0 },{ 248, 194, 0,0 },{ 248, 193, 0,0 },{ 248, 191, 0,0 },{ 247, 190, 0,0 },{ 247, 188, 0,0 },{ 247, 187, 0,0 },{ 247, 185, 0,0 },{ 247, 184, 0,0 },{ 246, 183, 0,0 },{ 246, 181, 0,0 },{ 246, 180, 0,0 },{ 246, 178, 0,0 },{ 246, 177, 0,0 },{ 246, 175, 0,0 },{ 245, 174, 0,0 },{ 245, 172, 0,0 },{ 245, 171, 0,0 },{ 245, 170, 0,0 },{ 245, 168, 0,0 },{ 245, 167, 0,0 },{ 244, 165, 0,0 },{ 244, 164, 0,0 },{ 244, 162, 0,0 },{ 244, 161, 0,0 },{ 244, 159, 0,0 },{ 244, 158, 0,0 },{ 243, 156, 0,0 },{ 243, 155, 0,0 },{ 243, 154, 0,0 },{ 243, 152, 0,0 },{ 243, 151, 0,0 },{ 243, 149, 0,0 },{ 242, 148, 0,0 },{ 242, 146, 0,0 },{ 242, 145, 0,0 },{ 242, 143, 0,0 },{ 242, 142, 0,0 },{ 242, 141, 0,0 },{ 241, 139, 0,0 },{ 241, 138, 0,0 },{ 241, 136, 0,0 },{ 241, 135, 0,0 },{ 241, 133, 0,0 },{ 241, 132, 0,0 },{ 240, 130, 0,0 },{ 240, 129, 0,0 },{ 240, 127, 0,0 },{ 240, 126, 0,0 },{ 240, 125, 0,0 },{ 239, 123, 0,0 },{ 239, 122, 0,0 },{ 239, 120, 0,0 },{ 239, 119, 0,0 },{ 239, 117, 0,0 },{ 239, 116, 0,0 },{ 238, 114, 0,0 },{ 238, 113, 0,0 },{ 238, 112, 0,0 },{ 238, 110, 0,0 },{ 238, 109, 0,0 },{ 238, 107, 0,0 },{ 237, 106, 0,0 },{ 237, 104, 0,0 },{ 237, 103, 0,0 },{ 237, 101, 0,0 },{ 237, 100, 0,0 },{ 237, 99, 0,0 },{ 236, 97, 0,0 },{ 236, 96, 0,0 },{ 236, 94, 0,0 },{ 236, 93, 0,0 },{ 236, 91, 0,0 },{ 236, 90, 0,0 },{ 235, 88, 0,0 },{ 235, 87, 0,0 },{ 235, 85, 0,0 },{ 235, 84, 0,0 },{ 235, 83, 0,0 },{ 235, 81, 0,0 },{ 234, 80, 0,0 },{ 234, 78, 0,0 },{ 234, 77, 0,0 },{ 234, 75, 0,0 },{ 234, 74, 0,0 },{ 234, 72, 0,0 },{ 233, 71, 0,0 },{ 233, 70, 0,0 },{ 233, 68, 0,0 },{ 233, 67, 0,0 },{ 233, 65, 0,0 },{ 233, 64, 0,0 },{ 232, 62, 0,0 },{ 232, 61, 0,0 },{ 232, 59, 0,0 },{ 232, 58, 0,0 },{ 232, 57, 0,0 },{ 231, 55, 0,0 },{ 231, 54, 0,0 },{ 231, 52, 0,0 },{ 231, 51, 0,0 },{ 231, 49, 0,0 },{ 231, 48, 0,0 },{ 230, 46, 0,0 },{ 230, 45, 0,0 },{ 230, 43, 0,0 },{ 230, 42, 0,0 },{ 230, 41, 0,0 },{ 230, 39, 0,0 },{ 229, 38, 0,0 },{ 229, 36, 0,0 },{ 229, 35, 0,0 },{ 229, 33, 0,0 },{ 229, 32, 0,0 },{ 229, 30, 0,0 },{ 228, 29, 0,0 },{ 228, 28, 0,0 },{ 228, 26, 0,0 },{ 228, 25, 0,0 },{ 228, 23, 0,0 },{ 228, 22, 0,0 },{ 227, 20, 0,0 },{ 227, 19, 0,0 },{ 227, 17, 0,0 },{ 227, 16, 0,0 },{ 227, 14, 0,0 },{ 227, 13, 0,0 },{ 226, 12, 0,0 },{ 226, 10, 0,0 },{ 226, 9, 0,0 },{ 226, 7, 0,0 },{ 226, 6, 0,0 },{ 226, 4, 0,0 },{ 225, 3, 0,0 },{ 225, 1, 0,0 },{ 225, 0, 0,0 } },
};

unsigned char ZC17APseudoColorTableBGRA[PSEUDONUM][256][4] =
{
	{ { 0,0,0,0 },{ 1,1,1,0 },{ 2,2,2,0 },{ 3,3,3,0 },{ 4,4,4,0 },{ 5,5,5,0 },{ 6,6,6,0 },{ 7,7,7,0 },{ 8,8,8,0 },{ 9,9,9,0 },{ 10,10,10,0 },{ 11,11,11,0 },{ 12,12,12,0 },{ 13,13,13,0 },{ 14,14,14,0 },{ 15,15,15,0 },{ 16,16,16,0 },{ 17,17,17,0 },{ 18,18,18,0 },{ 19,19,19,0 },{ 20,20,20,0 },{ 21,21,21,0 },{ 22,22,22,0 },{ 23,23,23,0 },{ 24,24,24,0 },{ 25,25,25,0 },{ 26,26,26,0 },{ 27,27,27,0 },{ 28,28,28,0 },{ 29,29,29,0 },{ 30,30,30,0 },{ 31,31,31,0 },{ 32,32,32,0 },{ 33,33,33,0 },{ 34,34,34,0 },{ 35,35,35,0 },{ 36,36,36,0 },{ 37,37,37,0 },{ 38,38,38,0 },{ 39,39,39,0 },{ 40,40,40,0 },{ 41,41,41,0 },{ 42,42,42,0 },{ 43,43,43,0 },{ 44,44,44,0 },{ 45,45,45,0 },{ 46,46,46,0 },{ 47,47,47,0 },{ 48,48,48,0 },{ 49,49,49,0 },{ 50,50,50,0 },{ 51,51,51,0 },{ 52,52,52,0 },{ 53,53,53,0 },{ 54,54,54,0 },{ 55,55,55,0 },{ 56,56,56,0 },{ 57,57,57,0 },{ 58,58,58,0 },{ 59,59,59,0 },{ 60,60,60,0 },{ 61,61,61,0 },{ 62,62,62,0 },{ 63,63,63,0 },{ 64,64,64,0 },{ 65,65,65,0 },{ 66,66,66,0 },{ 67,67,67,0 },{ 68,68,68,0 },{ 69,69,69,0 },{ 70,70,70,0 },{ 71,71,71,0 },{ 72,72,72,0 },{ 73,73,73,0 },{ 74,74,74,0 },{ 75,75,75,0 },{ 76,76,76,0 },{ 77,77,77,0 },{ 78,78,78,0 },{ 79,79,79,0 },{ 80,80,80,0 },{ 81,81,81,0 },{ 82,82,82,0 },{ 83,83,83,0 },{ 84,84,84,0 },{ 85,85,85,0 },{ 86,86,86,0 },{ 87,87,87,0 },{ 88,88,88,0 },{ 89,89,89,0 },{ 90,90,90,0 },{ 91,91,91,0 },{ 92,92,92,0 },{ 93,93,93,0 },{ 94,94,94,0 },{ 95,95,95,0 },{ 96,96,96,0 },{ 97,97,97,0 },{ 98,98,98,0 },{ 99,99,99,0 },{ 100,100,100,0 },{ 101,101,101,0 },{ 102,102,102,0 },{ 103,103,103,0 },{ 104,104,104,0 },{ 105,105,105,0 },{ 106,106,106,0 },{ 107,107,107,0 },{ 108,108,108,0 },{ 109,109,109,0 },{ 110,110,110,0 },{ 111,111,111,0 },{ 112,112,112,0 },{ 113,113,113,0 },{ 114,114,114,0 },{ 115,115,115,0 },{ 116,116,116,0 },{ 117,117,117,0 },{ 118,118,118,0 },{ 119,119,119,0 },{ 120,120,120,0 },{ 121,121,121,0 },{ 122,122,122,0 },{ 123,123,123,0 },{ 124,124,124,0 },{ 125,125,125,0 },{ 126,126,126,0 },{ 127,127,127,0 },{ 128,128,128,0 },{ 129,129,129,0 },{ 130,130,130,0 },{ 131,131,131,0 },{ 132,132,132,0 },{ 133,133,133,0 },{ 134,134,134,0 },{ 135,135,135,0 },{ 136,136,136,0 },{ 137,137,137,0 },{ 138,138,138,0 },{ 139,139,139,0 },{ 140,140,140,0 },{ 141,141,141,0 },{ 142,142,142,0 },{ 143,143,143,0 },{ 144,144,144,0 },{ 145,145,145,0 },{ 146,146,146,0 },{ 147,147,147,0 },{ 148,148,148,0 },{ 149,149,149,0 },{ 150,150,150,0 },{ 151,151,151,0 },{ 152,152,152,0 },{ 153,153,153,0 },{ 154,154,154,0 },{ 155,155,155,0 },{ 156,156,156,0 },{ 157,157,157,0 },{ 158,158,158,0 },{ 159,159,159,0 },{ 160,160,160,0 },{ 161,161,161,0 },{ 162,162,162,0 },{ 163,163,163,0 },{ 164,164,164,0 },{ 165,165,165,0 },{ 166,166,166,0 },{ 167,167,167,0 },{ 168,168,168,0 },{ 169,169,169,0 },{ 170,170,170,0 },{ 171,171,171,0 },{ 172,172,172,0 },{ 173,173,173,0 },{ 174,174,174,0 },{ 175,175,175,0 },{ 176,176,176,0 },{ 177,177,177,0 },{ 178,178,178,0 },{ 179,179,179,0 },{ 180,180,180,0 },{ 181,181,181,0 },{ 182,182,182,0 },{ 183,183,183,0 },{ 184,184,184,0 },{ 185,185,185,0 },{ 186,186,186,0 },{ 187,187,187,0 },{ 188,188,188,0 },{ 189,189,189,0 },{ 190,190,190,0 },{ 191,191,191,0 },{ 192,192,192,0 },{ 193,193,193,0 },{ 194,194,194,0 },{ 195,195,195,0 },{ 196,196,196,0 },{ 197,197,197,0 },{ 198,198,198,0 },{ 199,199,199,0 },{ 200,200,200,0 },{ 201,201,201,0 },{ 202,202,202,0 },{ 203,203,203,0 },{ 204,204,204,0 },{ 205,205,205,0 },{ 206,206,206,0 },{ 207,207,207,0 },{ 208,208,208,0 },{ 209,209,209,0 },{ 210,210,210,0 },{ 211,211,211,0 },{ 212,212,212,0 },{ 213,213,213,0 },{ 214,214,214,0 },{ 215,215,215,0 },{ 216,216,216,0 },{ 217,217,217,0 },{ 218,218,218,0 },{ 219,219,219,0 },{ 220,220,220,0 },{ 221,221,221,0 },{ 222,222,222,0 },{ 223,223,223,0 },{ 224,224,224,0 },{ 225,225,225,0 },{ 226,226,226,0 },{ 227,227,227,0 },{ 228,228,228,0 },{ 229,229,229,0 },{ 230,230,230,0 },{ 231,231,231,0 },{ 232,232,232,0 },{ 233,233,233,0 },{ 234,234,234,0 },{ 235,235,235,0 },{ 236,236,236,0 },{ 237,237,237,0 },{ 238,238,238,0 },{ 239,239,239,0 },{ 240,240,240,0 },{ 241,241,241,0 },{ 242,242,242,0 },{ 243,243,243,0 },{ 244,244,244,0 },{ 245,245,245,0 },{ 246,246,246,0 },{ 247,247,247,0 },{ 248,248,248,0 },{ 249,249,249,0 },{ 250,250,250,0 },{ 251,251,251,0 },{ 252,252,252,0 },{ 253,253,253,0 },{ 254,254,254,0 },{ 255,255,255,0 }, },
	{ { 255,255,255,0 },{ 254,254,254,0 },{ 253,253,253,0 },{ 252,252,252,0 },{ 251,251,251,0 },{ 250,250,250,0 },{ 249,249,249,0 },{ 248,248,248,0 },{ 247,247,247,0 },{ 246,246,246,0 },{ 245,245,245,0 },{ 244,244,244,0 },{ 243,243,243,0 },{ 242,242,242,0 },{ 241,241,241,0 },{ 240,240,240,0 },{ 239,239,239,0 },{ 238,238,238,0 },{ 237,237,237,0 },{ 236,236,236,0 },{ 235,235,235,0 },{ 234,234,234,0 },{ 233,233,233,0 },{ 232,232,232,0 },{ 231,231,231,0 },{ 230,230,230,0 },{ 229,229,229,0 },{ 228,228,228,0 },{ 227,227,227,0 },{ 226,226,226,0 },{ 225,225,225,0 },{ 224,224,224,0 },{ 223,223,223,0 },{ 222,222,222,0 },{ 221,221,221,0 },{ 220,220,220,0 },{ 219,219,219,0 },{ 218,218,218,0 },{ 217,217,217,0 },{ 216,216,216,0 },{ 215,215,215,0 },{ 214,214,214,0 },{ 213,213,213,0 },{ 212,212,212,0 },{ 211,211,211,0 },{ 210,210,210,0 },{ 209,209,209,0 },{ 208,208,208,0 },{ 207,207,207,0 },{ 206,206,206,0 },{ 205,205,205,0 },{ 204,204,204,0 },{ 203,203,203,0 },{ 202,202,202,0 },{ 201,201,201,0 },{ 200,200,200,0 },{ 199,199,199,0 },{ 198,198,198,0 },{ 197,197,197,0 },{ 196,196,196,0 },{ 195,195,195,0 },{ 194,194,194,0 },{ 193,193,193,0 },{ 192,192,192,0 },{ 191,191,191,0 },{ 190,190,190,0 },{ 189,189,189,0 },{ 188,188,188,0 },{ 187,187,187,0 },{ 186,186,186,0 },{ 185,185,185,0 },{ 184,184,184,0 },{ 183,183,183,0 },{ 182,182,182,0 },{ 181,181,181,0 },{ 180,180,180,0 },{ 179,179,179,0 },{ 178,178,178,0 },{ 177,177,177,0 },{ 176,176,176,0 },{ 175,175,175,0 },{ 174,174,174,0 },{ 173,173,173,0 },{ 172,172,172,0 },{ 171,171,171,0 },{ 170,170,170,0 },{ 169,169,169,0 },{ 168,168,168,0 },{ 167,167,167,0 },{ 166,166,166,0 },{ 165,165,165,0 },{ 164,164,164,0 },{ 163,163,163,0 },{ 162,162,162,0 },{ 161,161,161,0 },{ 160,160,160,0 },{ 159,159,159,0 },{ 158,158,158,0 },{ 157,157,157,0 },{ 156,156,156,0 },{ 155,155,155,0 },{ 154,154,154,0 },{ 153,153,153,0 },{ 152,152,152,0 },{ 151,151,151,0 },{ 150,150,150,0 },{ 149,149,149,0 },{ 148,148,148,0 },{ 147,147,147,0 },{ 146,146,146,0 },{ 145,145,145,0 },{ 144,144,144,0 },{ 143,143,143,0 },{ 142,142,142,0 },{ 141,141,141,0 },{ 140,140,140,0 },{ 139,139,139,0 },{ 138,138,138,0 },{ 137,137,137,0 },{ 136,136,136,0 },{ 135,135,135,0 },{ 134,134,134,0 },{ 133,133,133,0 },{ 132,132,132,0 },{ 131,131,131,0 },{ 130,130,130,0 },{ 129,129,129,0 },{ 128,128,128,0 },{ 127,127,127,0 },{ 126,126,126,0 },{ 125,125,125,0 },{ 124,124,124,0 },{ 123,123,123,0 },{ 122,122,122,0 },{ 121,121,121,0 },{ 120,120,120,0 },{ 119,119,119,0 },{ 118,118,118,0 },{ 117,117,117,0 },{ 116,116,116,0 },{ 115,115,115,0 },{ 114,114,114,0 },{ 113,113,113,0 },{ 112,112,112,0 },{ 111,111,111,0 },{ 110,110,110,0 },{ 109,109,109,0 },{ 108,108,108,0 },{ 107,107,107,0 },{ 106,106,106,0 },{ 105,105,105,0 },{ 104,104,104,0 },{ 103,103,103,0 },{ 102,102,102,0 },{ 101,101,101,0 },{ 100,100,100,0 },{ 99,99,99,0 },{ 98,98,98,0 },{ 97,97,97,0 },{ 96,96,96,0 },{ 95,95,95,0 },{ 94,94,94,0 },{ 93,93,93,0 },{ 92,92,92,0 },{ 91,91,91,0 },{ 90,90,90,0 },{ 89,89,89,0 },{ 88,88,88,0 },{ 87,87,87,0 },{ 86,86,86,0 },{ 85,85,85,0 },{ 84,84,84,0 },{ 83,83,83,0 },{ 82,82,82,0 },{ 81,81,81,0 },{ 80,80,80,0 },{ 79,79,79,0 },{ 78,78,78,0 },{ 77,77,77,0 },{ 76,76,76,0 },{ 75,75,75,0 },{ 74,74,74,0 },{ 73,73,73,0 },{ 72,72,72,0 },{ 71,71,71,0 },{ 70,70,70,0 },{ 69,69,69,0 },{ 68,68,68,0 },{ 67,67,67,0 },{ 66,66,66,0 },{ 65,65,65,0 },{ 64,64,64,0 },{ 63,63,63,0 },{ 62,62,62,0 },{ 61,61,61,0 },{ 60,60,60,0 },{ 59,59,59,0 },{ 58,58,58,0 },{ 57,57,57,0 },{ 56,56,56,0 },{ 55,55,55,0 },{ 54,54,54,0 },{ 53,53,53,0 },{ 52,52,52,0 },{ 51,51,51,0 },{ 50,50,50,0 },{ 49,49,49,0 },{ 48,48,48,0 },{ 47,47,47,0 },{ 46,46,46,0 },{ 45,45,45,0 },{ 44,44,44,0 },{ 43,43,43,0 },{ 42,42,42,0 },{ 41,41,41,0 },{ 40,40,40,0 },{ 39,39,39,0 },{ 38,38,38,0 },{ 37,37,37,0 },{ 36,36,36,0 },{ 35,35,35,0 },{ 34,34,34,0 },{ 33,33,33,0 },{ 32,32,32,0 },{ 31,31,31,0 },{ 30,30,30,0 },{ 29,29,29,0 },{ 28,28,28,0 },{ 27,27,27,0 },{ 26,26,26,0 },{ 25,25,25,0 },{ 24,24,24,0 },{ 23,23,23,0 },{ 22,22,22,0 },{ 21,21,21,0 },{ 20,20,20,0 },{ 19,19,19,0 },{ 18,18,18,0 },{ 17,17,17,0 },{ 16,16,16,0 },{ 15,15,15,0 },{ 14,14,14,0 },{ 13,13,13,0 },{ 12,12,12,0 },{ 11,11,11,0 },{ 10,10,10,0 },{ 9,9,9,0 },{ 8,8,8,0 },{ 7,7,7,0 },{ 6,6,6,0 },{ 5,5,5,0 },{ 4,4,4,0 },{ 3,3,3,0 },{ 2,2,2,0 },{ 1,1,1,0 },{ 0,0,0,0 }, },
	{ { 32,0,0,0 },{ 34,0,1,0 },{ 36,0,2,0 },{ 38,0,3,0 },{ 40,0,4,0 },{ 42,0,5,0 },{ 44,0,6,0 },{ 46,0,7,0 },{ 49,0,8,0 },{ 51,0,9,0 },{ 53,0,10,0 },{ 55,0,11,0 },{ 57,0,12,0 },{ 59,0,13,0 },{ 61,0,14,0 },{ 63,0,15,0 },{ 65,0,17,0 },{ 67,0,18,0 },{ 69,0,19,0 },{ 71,0,20,0 },{ 73,0,21,0 },{ 75,0,22,0 },{ 77,0,23,0 },{ 79,0,24,0 },{ 82,0,25,0 },{ 84,0,26,0 },{ 86,0,27,0 },{ 88,0,28,0 },{ 90,0,29,0 },{ 92,0,30,0 },{ 94,0,31,0 },{ 96,0,32,0 },{ 97,0,34,0 },{ 98,0,37,0 },{ 99,0,39,0 },{ 100,0,41,0 },{ 101,0,44,0 },{ 102,0,46,0 },{ 103,0,48,0 },{ 105,0,51,0 },{ 106,0,53,0 },{ 107,0,55,0 },{ 108,0,58,0 },{ 109,0,60,0 },{ 110,0,62,0 },{ 111,0,65,0 },{ 112,0,67,0 },{ 113,0,69,0 },{ 114,0,71,0 },{ 115,0,74,0 },{ 116,0,76,0 },{ 117,0,78,0 },{ 118,0,81,0 },{ 119,0,83,0 },{ 120,0,85,0 },{ 122,0,88,0 },{ 123,0,90,0 },{ 124,0,92,0 },{ 125,0,95,0 },{ 126,0,97,0 },{ 127,0,99,0 },{ 128,0,102,0 },{ 129,0,104,0 },{ 130,0,106,0 },{ 131,0,109,0 },{ 132,0,111,0 },{ 133,0,113,0 },{ 134,0,116,0 },{ 135,0,118,0 },{ 136,0,120,0 },{ 137,0,123,0 },{ 139,0,125,0 },{ 140,0,127,0 },{ 141,0,130,0 },{ 142,0,132,0 },{ 143,0,134,0 },{ 144,0,137,0 },{ 145,0,139,0 },{ 146,0,141,0 },{ 147,0,144,0 },{ 148,0,146,0 },{ 149,0,148,0 },{ 150,0,150,0 },{ 151,0,153,0 },{ 152,0,155,0 },{ 153,0,157,0 },{ 154,0,160,0 },{ 156,0,162,0 },{ 157,0,164,0 },{ 158,0,167,0 },{ 159,0,169,0 },{ 160,0,171,0 },{ 161,0,174,0 },{ 162,0,176,0 },{ 163,0,178,0 },{ 164,0,181,0 },{ 159,3,183,0 },{ 154,5,185,0 },{ 149,8,188,0 },{ 144,11,190,0 },{ 138,13,192,0 },{ 133,16,195,0 },{ 128,19,197,0 },{ 123,21,199,0 },{ 118,24,202,0 },{ 113,27,204,0 },{ 108,29,206,0 },{ 103,32,209,0 },{ 97,35,211,0 },{ 92,37,213,0 },{ 87,40,216,0 },{ 82,43,218,0 },{ 77,45,220,0 },{ 72,48,222,0 },{ 67,50,225,0 },{ 62,53,227,0 },{ 56,56,229,0 },{ 51,58,232,0 },{ 46,61,234,0 },{ 41,64,236,0 },{ 36,66,239,0 },{ 31,69,241,0 },{ 26,72,243,0 },{ 21,74,246,0 },{ 15,77,248,0 },{ 10,80,250,0 },{ 5,82,253,0 },{ 0,85,255,0 },{ 0,88,255,0 },{ 0,90,255,0 },{ 0,93,255,0 },{ 0,96,255,0 },{ 0,98,255,0 },{ 0,101,255,0 },{ 0,104,255,0 },{ 0,106,255,0 },{ 0,109,255,0 },{ 0,112,255,0 },{ 0,114,255,0 },{ 0,117,255,0 },{ 0,120,255,0 },{ 0,122,255,0 },{ 0,125,255,0 },{ 0,128,255,0 },{ 0,130,255,0 },{ 0,133,255,0 },{ 0,135,255,0 },{ 0,138,255,0 },{ 0,141,255,0 },{ 0,143,255,0 },{ 0,146,255,0 },{ 0,149,255,0 },{ 0,151,255,0 },{ 0,154,255,0 },{ 0,157,255,0 },{ 0,159,255,0 },{ 0,162,255,0 },{ 0,165,255,0 },{ 0,167,255,0 },{ 0,170,255,0 },{ 0,173,255,0 },{ 0,175,255,0 },{ 0,178,255,0 },{ 0,181,255,0 },{ 0,183,255,0 },{ 0,186,255,0 },{ 0,189,255,0 },{ 0,191,255,0 },{ 0,194,255,0 },{ 0,197,255,0 },{ 0,199,255,0 },{ 0,202,255,0 },{ 0,205,255,0 },{ 0,207,255,0 },{ 0,210,255,0 },{ 0,213,255,0 },{ 0,215,255,0 },{ 0,218,255,0 },{ 0,220,255,0 },{ 0,223,255,0 },{ 0,226,255,0 },{ 0,228,255,0 },{ 0,231,255,0 },{ 0,234,255,0 },{ 0,236,255,0 },{ 0,239,255,0 },{ 0,242,255,0 },{ 0,244,255,0 },{ 0,247,255,0 },{ 0,250,255,0 },{ 0,252,255,0 },{ 0,255,255,0 },{ 4,255,255,0 },{ 8,255,255,0 },{ 12,255,255,0 },{ 16,255,255,0 },{ 20,255,255,0 },{ 24,255,255,0 },{ 28,255,255,0 },{ 32,255,255,0 },{ 36,255,255,0 },{ 40,255,255,0 },{ 44,255,255,0 },{ 48,255,255,0 },{ 52,255,255,0 },{ 56,255,255,0 },{ 60,255,255,0 },{ 64,255,255,0 },{ 68,255,255,0 },{ 72,255,255,0 },{ 76,255,255,0 },{ 80,255,255,0 },{ 84,255,255,0 },{ 88,255,255,0 },{ 92,255,255,0 },{ 96,255,255,0 },{ 100,255,255,0 },{ 104,255,255,0 },{ 108,255,255,0 },{ 112,255,255,0 },{ 116,255,255,0 },{ 120,255,255,0 },{ 124,255,255,0 },{ 128,255,255,0 },{ 131,255,255,0 },{ 135,255,255,0 },{ 139,255,255,0 },{ 143,255,255,0 },{ 147,255,255,0 },{ 151,255,255,0 },{ 155,255,255,0 },{ 159,255,255,0 },{ 163,255,255,0 },{ 167,255,255,0 },{ 171,255,255,0 },{ 175,255,255,0 },{ 179,255,255,0 },{ 183,255,255,0 },{ 187,255,255,0 },{ 191,255,255,0 },{ 195,255,255,0 },{ 199,255,255,0 },{ 203,255,255,0 },{ 207,255,255,0 },{ 211,255,255,0 },{ 215,255,255,0 },{ 219,255,255,0 },{ 223,255,255,0 },{ 227,255,255,0 },{ 231,255,255,0 },{ 235,255,255,0 },{ 239,255,255,0 },{ 243,255,255,0 },{ 247,255,255,0 },{ 251,255,255,0 },{ 255,255,255,0 }, },
	{ { 64,32,0,0 },{ 70,33,0,0 },{ 76,34,0,0 },{ 82,35,0,0 },{ 89,36,0,0 },{ 95,37,0,0 },{ 101,38,0,0 },{ 107,39,0,0 },{ 113,40,0,0 },{ 119,41,0,0 },{ 126,42,0,0 },{ 132,43,0,0 },{ 138,44,0,0 },{ 144,45,0,0 },{ 150,46,0,0 },{ 156,47,0,0 },{ 163,49,0,0 },{ 169,50,0,0 },{ 175,51,0,0 },{ 181,52,0,0 },{ 187,53,0,0 },{ 193,54,0,0 },{ 200,55,0,0 },{ 206,56,0,0 },{ 212,57,0,0 },{ 218,58,0,0 },{ 224,59,0,0 },{ 230,60,0,0 },{ 237,61,0,0 },{ 243,62,0,0 },{ 249,63,0,0 },{ 255,64,0,0 },{ 249,67,0,0 },{ 243,70,0,0 },{ 237,73,0,0 },{ 231,76,0,0 },{ 225,79,0,0 },{ 218,82,0,0 },{ 212,85,0,0 },{ 206,88,0,0 },{ 200,91,0,0 },{ 194,94,0,0 },{ 188,97,0,0 },{ 182,100,0,0 },{ 176,103,0,0 },{ 170,106,0,0 },{ 164,109,0,0 },{ 158,112,0,0 },{ 151,115,0,0 },{ 145,118,0,0 },{ 139,121,0,0 },{ 133,124,0,0 },{ 127,127,0,0 },{ 121,130,0,0 },{ 115,133,0,0 },{ 109,136,0,0 },{ 103,139,0,0 },{ 97,142,0,0 },{ 90,145,0,0 },{ 84,148,0,0 },{ 78,151,0,0 },{ 72,154,0,0 },{ 66,157,0,0 },{ 60,160,0,0 },{ 58,163,4,0 },{ 56,166,8,0 },{ 54,169,12,0 },{ 53,172,16,0 },{ 51,175,20,0 },{ 49,178,24,0 },{ 47,181,28,0 },{ 45,184,32,0 },{ 43,187,36,0 },{ 41,190,40,0 },{ 39,193,44,0 },{ 38,196,48,0 },{ 36,199,52,0 },{ 34,202,56,0 },{ 32,205,60,0 },{ 30,208,64,0 },{ 28,210,68,0 },{ 26,213,72,0 },{ 24,216,76,0 },{ 23,219,80,0 },{ 21,222,84,0 },{ 19,225,88,0 },{ 17,228,92,0 },{ 15,231,96,0 },{ 13,234,100,0 },{ 11,237,104,0 },{ 9,240,108,0 },{ 8,243,112,0 },{ 6,246,116,0 },{ 4,249,120,0 },{ 2,252,124,0 },{ 0,255,128,0 },{ 0,255,131,0 },{ 0,255,135,0 },{ 0,255,139,0 },{ 0,255,143,0 },{ 0,255,147,0 },{ 0,255,151,0 },{ 0,255,155,0 },{ 0,255,159,0 },{ 0,255,163,0 },{ 0,255,167,0 },{ 0,255,171,0 },{ 0,255,175,0 },{ 0,255,179,0 },{ 0,255,183,0 },{ 0,255,187,0 },{ 0,255,191,0 },{ 0,255,195,0 },{ 0,255,199,0 },{ 0,255,203,0 },{ 0,255,207,0 },{ 0,255,211,0 },{ 0,255,215,0 },{ 0,255,219,0 },{ 0,255,223,0 },{ 0,255,227,0 },{ 0,255,231,0 },{ 0,255,235,0 },{ 0,255,239,0 },{ 0,255,243,0 },{ 0,255,247,0 },{ 0,255,251,0 },{ 0,255,255,0 },{ 0,251,255,0 },{ 0,247,255,0 },{ 0,243,255,0 },{ 0,239,255,0 },{ 0,235,255,0 },{ 0,231,255,0 },{ 0,227,255,0 },{ 0,223,255,0 },{ 0,219,255,0 },{ 0,215,255,0 },{ 0,211,255,0 },{ 0,207,255,0 },{ 0,203,255,0 },{ 0,199,255,0 },{ 0,195,255,0 },{ 0,191,255,0 },{ 0,187,255,0 },{ 0,183,255,0 },{ 0,179,255,0 },{ 0,175,255,0 },{ 0,171,255,0 },{ 0,167,255,0 },{ 0,163,255,0 },{ 0,159,255,0 },{ 0,155,255,0 },{ 0,151,255,0 },{ 0,147,255,0 },{ 0,143,255,0 },{ 0,139,255,0 },{ 0,135,255,0 },{ 0,131,255,0 },{ 0,128,255,0 },{ 0,124,255,0 },{ 0,120,255,0 },{ 0,116,255,0 },{ 0,112,255,0 },{ 0,108,255,0 },{ 0,104,255,0 },{ 0,100,255,0 },{ 0,96,255,0 },{ 0,92,255,0 },{ 0,88,255,0 },{ 0,84,255,0 },{ 0,80,255,0 },{ 0,76,255,0 },{ 0,72,255,0 },{ 0,68,255,0 },{ 0,64,255,0 },{ 0,60,255,0 },{ 0,56,255,0 },{ 0,52,255,0 },{ 0,48,255,0 },{ 0,44,255,0 },{ 0,40,255,0 },{ 0,36,255,0 },{ 0,32,255,0 },{ 0,28,255,0 },{ 0,24,255,0 },{ 0,20,255,0 },{ 0,16,255,0 },{ 0,12,255,0 },{ 0,8,255,0 },{ 0,4,255,0 },{ 0,0,255,0 },{ 8,0,255,0 },{ 16,0,255,0 },{ 24,0,255,0 },{ 32,0,255,0 },{ 39,0,255,0 },{ 47,0,254,0 },{ 55,0,254,0 },{ 63,0,254,0 },{ 71,0,254,0 },{ 79,0,254,0 },{ 87,0,254,0 },{ 95,0,254,0 },{ 102,0,254,0 },{ 110,0,254,0 },{ 118,0,254,0 },{ 126,0,254,0 },{ 134,0,253,0 },{ 142,0,253,0 },{ 150,0,253,0 },{ 158,0,253,0 },{ 165,0,253,0 },{ 173,0,253,0 },{ 181,0,253,0 },{ 189,0,253,0 },{ 197,0,253,0 },{ 205,0,253,0 },{ 213,0,252,0 },{ 221,0,252,0 },{ 228,0,252,0 },{ 236,0,252,0 },{ 244,0,252,0 },{ 252,0,252,0 },{ 252,8,252,0 },{ 252,16,252,0 },{ 252,24,252,0 },{ 252,32,252,0 },{ 252,40,252,0 },{ 253,48,253,0 },{ 253,56,253,0 },{ 253,64,253,0 },{ 253,72,253,0 },{ 253,80,253,0 },{ 253,88,253,0 },{ 253,96,253,0 },{ 253,104,253,0 },{ 253,112,253,0 },{ 253,120,253,0 },{ 254,128,254,0 },{ 254,135,254,0 },{ 254,143,254,0 },{ 254,151,254,0 },{ 254,159,254,0 },{ 254,167,254,0 },{ 254,175,254,0 },{ 254,183,254,0 },{ 254,191,254,0 },{ 254,199,254,0 },{ 254,207,254,0 },{ 255,215,255,0 },{ 255,223,255,0 },{ 255,231,255,0 },{ 255,239,255,0 },{ 255,247,255,0 },{ 255,255,255,0 }, },
	{ { 0,0,0,0 },{ 1,1,0,0 },{ 3,3,1,0 },{ 4,4,1,0 },{ 6,6,1,0 },{ 7,7,2,0 },{ 9,9,2,0 },{ 10,10,3,0 },{ 12,12,3,0 },{ 13,13,3,0 },{ 15,15,4,0 },{ 16,16,4,0 },{ 18,18,4,0 },{ 19,19,5,0 },{ 21,21,5,0 },{ 22,22,6,0 },{ 24,24,6,0 },{ 25,25,6,0 },{ 26,26,7,0 },{ 28,28,7,0 },{ 29,29,7,0 },{ 31,31,8,0 },{ 32,32,8,0 },{ 34,34,8,0 },{ 35,35,9,0 },{ 37,37,9,0 },{ 38,38,10,0 },{ 40,40,10,0 },{ 41,41,10,0 },{ 43,43,11,0 },{ 44,44,11,0 },{ 46,46,11,0 },{ 47,47,12,0 },{ 49,49,12,0 },{ 50,50,13,0 },{ 51,51,13,0 },{ 53,53,13,0 },{ 54,54,14,0 },{ 56,56,14,0 },{ 57,57,14,0 },{ 59,59,15,0 },{ 60,60,15,0 },{ 62,62,15,0 },{ 63,63,16,0 },{ 65,65,16,0 },{ 66,66,17,0 },{ 68,68,17,0 },{ 69,69,17,0 },{ 71,71,18,0 },{ 72,72,18,0 },{ 74,74,18,0 },{ 75,75,19,0 },{ 77,77,19,0 },{ 78,78,19,0 },{ 79,79,20,0 },{ 81,81,20,0 },{ 82,82,21,0 },{ 84,84,21,0 },{ 85,85,21,0 },{ 87,87,22,0 },{ 88,88,22,0 },{ 90,90,22,0 },{ 91,91,23,0 },{ 93,93,23,0 },{ 94,94,24,0 },{ 96,96,24,0 },{ 97,97,24,0 },{ 99,99,25,0 },{ 100,100,25,0 },{ 102,102,25,0 },{ 103,103,26,0 },{ 104,104,26,0 },{ 106,106,26,0 },{ 107,107,27,0 },{ 109,109,27,0 },{ 110,110,28,0 },{ 112,112,28,0 },{ 113,113,28,0 },{ 115,115,29,0 },{ 116,116,29,0 },{ 118,118,29,0 },{ 119,119,30,0 },{ 121,121,30,0 },{ 122,122,31,0 },{ 124,124,31,0 },{ 125,125,31,0 },{ 127,127,32,0 },{ 128,128,32,0 },{ 127,129,34,0 },{ 126,130,36,0 },{ 124,132,38,0 },{ 123,133,41,0 },{ 122,134,43,0 },{ 121,135,45,0 },{ 119,137,47,0 },{ 118,138,49,0 },{ 117,139,51,0 },{ 116,140,53,0 },{ 114,141,56,0 },{ 113,143,58,0 },{ 112,144,60,0 },{ 111,145,62,0 },{ 110,146,64,0 },{ 108,148,66,0 },{ 107,149,68,0 },{ 106,150,71,0 },{ 105,151,73,0 },{ 103,152,75,0 },{ 102,154,77,0 },{ 101,155,79,0 },{ 100,156,81,0 },{ 98,157,83,0 },{ 97,159,86,0 },{ 96,160,88,0 },{ 95,161,90,0 },{ 94,162,92,0 },{ 92,163,94,0 },{ 91,165,96,0 },{ 90,166,98,0 },{ 89,167,101,0 },{ 87,168,103,0 },{ 86,170,105,0 },{ 85,171,107,0 },{ 84,172,109,0 },{ 82,173,111,0 },{ 81,174,113,0 },{ 80,176,116,0 },{ 79,177,118,0 },{ 78,178,120,0 },{ 76,179,122,0 },{ 75,181,124,0 },{ 74,182,126,0 },{ 73,183,128,0 },{ 71,184,131,0 },{ 70,185,133,0 },{ 69,187,135,0 },{ 68,188,137,0 },{ 66,189,139,0 },{ 65,190,141,0 },{ 64,192,144,0 },{ 63,193,146,0 },{ 62,194,148,0 },{ 60,195,150,0 },{ 59,196,152,0 },{ 58,198,154,0 },{ 57,199,156,0 },{ 55,200,159,0 },{ 54,201,161,0 },{ 53,202,163,0 },{ 52,204,165,0 },{ 50,205,167,0 },{ 49,206,169,0 },{ 48,207,171,0 },{ 47,209,174,0 },{ 46,210,176,0 },{ 44,211,178,0 },{ 43,212,180,0 },{ 42,213,182,0 },{ 41,215,184,0 },{ 39,216,186,0 },{ 38,217,189,0 },{ 37,218,191,0 },{ 36,220,193,0 },{ 34,221,195,0 },{ 33,222,197,0 },{ 32,223,199,0 },{ 31,224,201,0 },{ 30,226,204,0 },{ 28,227,206,0 },{ 27,228,208,0 },{ 26,229,210,0 },{ 25,231,212,0 },{ 23,232,214,0 },{ 22,233,216,0 },{ 21,234,219,0 },{ 20,235,221,0 },{ 18,237,223,0 },{ 17,238,225,0 },{ 16,239,227,0 },{ 15,240,229,0 },{ 14,242,231,0 },{ 12,243,234,0 },{ 11,244,236,0 },{ 10,245,238,0 },{ 9,246,240,0 },{ 7,248,242,0 },{ 6,249,244,0 },{ 5,250,246,0 },{ 4,251,249,0 },{ 2,253,251,0 },{ 1,254,253,0 },{ 0,255,255,0 },{ 0,251,255,0 },{ 0,247,255,0 },{ 0,243,255,0 },{ 0,239,255,0 },{ 0,235,255,0 },{ 0,231,255,0 },{ 0,227,255,0 },{ 0,223,255,0 },{ 0,219,255,0 },{ 0,215,255,0 },{ 0,211,255,0 },{ 0,207,255,0 },{ 0,203,255,0 },{ 0,199,255,0 },{ 0,195,255,0 },{ 0,191,255,0 },{ 0,187,255,0 },{ 0,183,255,0 },{ 0,179,255,0 },{ 0,175,255,0 },{ 0,171,255,0 },{ 0,167,255,0 },{ 0,163,255,0 },{ 0,159,255,0 },{ 0,155,255,0 },{ 0,151,255,0 },{ 0,147,255,0 },{ 0,143,255,0 },{ 0,139,255,0 },{ 0,135,255,0 },{ 0,131,255,0 },{ 0,128,255,0 },{ 0,124,255,0 },{ 0,120,255,0 },{ 0,116,255,0 },{ 0,112,255,0 },{ 0,108,255,0 },{ 0,104,255,0 },{ 0,100,255,0 },{ 0,96,255,0 },{ 0,92,255,0 },{ 0,88,255,0 },{ 0,84,255,0 },{ 0,80,255,0 },{ 0,76,255,0 },{ 0,72,255,0 },{ 0,68,255,0 },{ 0,64,255,0 },{ 0,60,253,0 },{ 0,56,251,0 },{ 0,52,249,0 },{ 0,48,247,0 },{ 0,44,245,0 },{ 0,40,243,0 },{ 0,36,241,0 },{ 0,32,240,0 },{ 0,28,238,0 },{ 0,24,236,0 },{ 0,20,234,0 },{ 0,16,232,0 },{ 0,12,230,0 },{ 0,8,228,0 },{ 0,4,226,0 },{ 0,0,224,0 }, },
	{ { 0,0,128,0 },{ 6,0,132,0 },{ 12,0,136,0 },{ 19,0,140,0 },{ 25,0,144,0 },{ 31,0,148,0 },{ 37,0,153,0 },{ 44,0,157,0 },{ 50,0,161,0 },{ 56,0,165,0 },{ 62,0,169,0 },{ 68,0,173,0 },{ 75,0,177,0 },{ 81,0,181,0 },{ 87,0,185,0 },{ 93,0,189,0 },{ 100,0,194,0 },{ 106,0,198,0 },{ 112,0,202,0 },{ 118,0,206,0 },{ 124,0,210,0 },{ 131,0,214,0 },{ 137,0,218,0 },{ 143,0,222,0 },{ 149,0,226,0 },{ 155,0,230,0 },{ 162,0,235,0 },{ 168,0,239,0 },{ 174,0,243,0 },{ 180,0,247,0 },{ 187,0,251,0 },{ 193,0,255,0 },{ 199,0,250,0 },{ 205,0,245,0 },{ 211,0,241,0 },{ 218,0,236,0 },{ 224,0,231,0 },{ 230,0,226,0 },{ 236,0,221,0 },{ 243,0,217,0 },{ 249,0,212,0 },{ 255,0,207,0 },{ 255,0,202,0 },{ 255,0,197,0 },{ 255,0,192,0 },{ 255,0,188,0 },{ 255,0,183,0 },{ 255,0,178,0 },{ 255,0,173,0 },{ 255,0,168,0 },{ 255,0,164,0 },{ 255,0,159,0 },{ 255,0,154,0 },{ 255,0,149,0 },{ 255,0,144,0 },{ 255,0,140,0 },{ 255,0,135,0 },{ 255,0,130,0 },{ 255,0,125,0 },{ 255,0,120,0 },{ 255,0,115,0 },{ 255,0,111,0 },{ 255,0,106,0 },{ 255,0,101,0 },{ 255,0,96,0 },{ 255,0,91,0 },{ 255,0,87,0 },{ 255,0,82,0 },{ 255,0,77,0 },{ 255,0,72,0 },{ 255,0,67,0 },{ 255,0,63,0 },{ 255,0,58,0 },{ 255,0,53,0 },{ 255,0,48,0 },{ 255,0,43,0 },{ 255,0,38,0 },{ 255,0,34,0 },{ 255,0,29,0 },{ 255,0,24,0 },{ 255,0,19,0 },{ 255,0,14,0 },{ 255,0,10,0 },{ 255,0,5,0 },{ 255,6,0,0 },{ 255,12,0,0 },{ 255,18,0,0 },{ 255,24,0,0 },{ 255,30,0,0 },{ 255,36,0,0 },{ 255,42,0,0 },{ 255,47,0,0 },{ 255,53,0,0 },{ 255,59,0,0 },{ 255,65,0,0 },{ 255,71,0,0 },{ 255,77,0,0 },{ 255,83,0,0 },{ 255,89,0,0 },{ 255,95,0,0 },{ 255,101,0,0 },{ 255,107,0,0 },{ 255,113,0,0 },{ 255,119,0,0 },{ 255,125,0,0 },{ 255,130,0,0 },{ 255,136,0,0 },{ 255,142,0,0 },{ 255,148,0,0 },{ 255,154,0,0 },{ 255,160,0,0 },{ 255,166,0,0 },{ 255,172,0,0 },{ 255,178,0,0 },{ 255,184,0,0 },{ 255,190,0,0 },{ 255,196,0,0 },{ 255,202,0,0 },{ 255,208,0,0 },{ 255,213,0,0 },{ 255,219,0,0 },{ 255,225,0,0 },{ 255,231,0,0 },{ 255,237,0,0 },{ 255,243,0,0 },{ 255,249,0,0 },{ 255,255,0,0 },{ 249,255,0,0 },{ 243,255,0,0 },{ 237,255,0,0 },{ 231,255,0,0 },{ 225,255,0,0 },{ 219,255,0,0 },{ 213,255,0,0 },{ 208,255,0,0 },{ 202,255,0,0 },{ 196,255,0,0 },{ 190,255,0,0 },{ 184,255,0,0 },{ 178,255,0,0 },{ 172,255,0,0 },{ 166,255,0,0 },{ 160,255,0,0 },{ 154,255,0,0 },{ 148,255,0,0 },{ 142,255,0,0 },{ 136,255,0,0 },{ 130,255,0,0 },{ 125,255,0,0 },{ 119,255,0,0 },{ 113,255,0,0 },{ 107,255,0,0 },{ 101,255,0,0 },{ 95,255,0,0 },{ 89,255,0,0 },{ 83,255,0,0 },{ 77,255,0,0 },{ 71,255,0,0 },{ 65,255,0,0 },{ 59,255,0,0 },{ 53,255,0,0 },{ 47,255,0,0 },{ 42,255,0,0 },{ 36,255,0,0 },{ 30,255,0,0 },{ 24,255,0,0 },{ 18,255,0,0 },{ 12,255,0,0 },{ 6,255,0,0 },{ 0,255,0,0 },{ 0,255,6,0 },{ 0,255,12,0 },{ 0,255,18,0 },{ 0,255,24,0 },{ 0,255,30,0 },{ 0,255,36,0 },{ 0,255,43,0 },{ 0,255,49,0 },{ 0,255,55,0 },{ 0,255,61,0 },{ 0,255,67,0 },{ 0,255,73,0 },{ 0,255,79,0 },{ 0,255,85,0 },{ 0,255,91,0 },{ 0,255,97,0 },{ 0,255,103,0 },{ 0,255,109,0 },{ 0,255,115,0 },{ 0,255,121,0 },{ 0,255,128,0 },{ 0,255,134,0 },{ 0,255,140,0 },{ 0,255,146,0 },{ 0,255,152,0 },{ 0,255,158,0 },{ 0,255,164,0 },{ 0,255,170,0 },{ 0,255,176,0 },{ 0,255,182,0 },{ 0,255,188,0 },{ 0,255,194,0 },{ 0,255,200,0 },{ 0,255,206,0 },{ 0,255,213,0 },{ 0,255,219,0 },{ 0,255,225,0 },{ 0,255,231,0 },{ 0,255,237,0 },{ 0,255,243,0 },{ 0,255,249,0 },{ 0,255,255,0 },{ 0,249,255,0 },{ 0,243,255,0 },{ 0,238,255,0 },{ 0,232,255,0 },{ 0,226,255,0 },{ 0,220,255,0 },{ 0,214,255,0 },{ 0,209,255,0 },{ 0,203,255,0 },{ 0,197,255,0 },{ 0,191,255,0 },{ 0,185,255,0 },{ 0,180,255,0 },{ 0,174,255,0 },{ 0,168,255,0 },{ 0,162,255,0 },{ 0,156,255,0 },{ 0,151,255,0 },{ 0,145,255,0 },{ 0,139,255,0 },{ 0,133,255,0 },{ 0,127,255,0 },{ 0,122,255,0 },{ 0,116,255,0 },{ 0,110,255,0 },{ 0,104,255,0 },{ 0,99,255,0 },{ 0,93,255,0 },{ 0,87,255,0 },{ 0,81,255,0 },{ 0,75,255,0 },{ 0,70,255,0 },{ 0,64,255,0 },{ 0,58,255,0 },{ 0,52,255,0 },{ 0,46,255,0 },{ 0,41,255,0 },{ 0,35,255,0 },{ 0,29,255,0 },{ 0,23,255,0 },{ 0,17,255,0 },{ 0,12,255,0 },{ 0,6,255,0 },{ 0,0,255,0 }, },
	{ { 0,0,0,0 },{ 0,0,3,0 },{ 0,0,5,0 },{ 0,0,8,0 },{ 0,0,11,0 },{ 0,0,13,0 },{ 0,0,16,0 },{ 0,0,19,0 },{ 0,0,21,0 },{ 0,0,24,0 },{ 0,0,27,0 },{ 0,0,30,0 },{ 0,0,32,0 },{ 0,0,35,0 },{ 0,0,38,0 },{ 0,0,40,0 },{ 0,0,43,0 },{ 0,0,46,0 },{ 0,0,48,0 },{ 0,0,51,0 },{ 0,0,54,0 },{ 0,0,56,0 },{ 0,0,59,0 },{ 0,0,62,0 },{ 0,0,64,0 },{ 0,0,67,0 },{ 0,0,70,0 },{ 0,0,72,0 },{ 0,0,75,0 },{ 0,0,78,0 },{ 0,0,81,0 },{ 0,0,83,0 },{ 0,0,86,0 },{ 0,0,89,0 },{ 0,0,91,0 },{ 0,0,94,0 },{ 0,0,97,0 },{ 0,0,99,0 },{ 0,0,102,0 },{ 0,0,105,0 },{ 0,0,107,0 },{ 0,0,110,0 },{ 0,0,113,0 },{ 0,0,115,0 },{ 0,0,118,0 },{ 0,0,121,0 },{ 0,0,123,0 },{ 0,0,126,0 },{ 0,0,129,0 },{ 0,0,132,0 },{ 0,0,134,0 },{ 0,0,137,0 },{ 0,0,140,0 },{ 0,0,142,0 },{ 0,0,145,0 },{ 0,0,148,0 },{ 0,0,150,0 },{ 0,0,153,0 },{ 0,0,156,0 },{ 0,0,158,0 },{ 0,0,161,0 },{ 0,0,164,0 },{ 0,0,166,0 },{ 0,0,169,0 },{ 0,0,172,0 },{ 0,0,174,0 },{ 0,0,177,0 },{ 0,0,180,0 },{ 0,0,183,0 },{ 0,0,185,0 },{ 0,0,188,0 },{ 0,0,191,0 },{ 0,0,193,0 },{ 0,0,196,0 },{ 0,0,199,0 },{ 0,0,201,0 },{ 0,0,204,0 },{ 0,0,207,0 },{ 0,0,209,0 },{ 0,0,212,0 },{ 0,0,215,0 },{ 0,0,217,0 },{ 0,0,220,0 },{ 0,0,223,0 },{ 0,0,225,0 },{ 0,0,228,0 },{ 0,0,231,0 },{ 0,0,234,0 },{ 0,0,236,0 },{ 0,0,239,0 },{ 0,0,242,0 },{ 0,0,244,0 },{ 0,0,247,0 },{ 0,0,250,0 },{ 0,0,252,0 },{ 0,0,255,0 },{ 0,3,255,0 },{ 0,5,255,0 },{ 0,8,255,0 },{ 0,11,255,0 },{ 0,13,255,0 },{ 0,16,255,0 },{ 0,19,255,0 },{ 0,21,255,0 },{ 0,24,255,0 },{ 0,27,255,0 },{ 0,29,255,0 },{ 0,32,255,0 },{ 0,35,255,0 },{ 0,37,255,0 },{ 0,40,255,0 },{ 0,43,255,0 },{ 0,45,255,0 },{ 0,48,255,0 },{ 0,50,255,0 },{ 0,53,255,0 },{ 0,56,255,0 },{ 0,58,255,0 },{ 0,61,255,0 },{ 0,64,255,0 },{ 0,66,255,0 },{ 0,69,255,0 },{ 0,72,255,0 },{ 0,74,255,0 },{ 0,77,255,0 },{ 0,80,255,0 },{ 0,82,255,0 },{ 0,85,255,0 },{ 0,88,255,0 },{ 0,90,255,0 },{ 0,93,255,0 },{ 0,96,255,0 },{ 0,98,255,0 },{ 0,101,255,0 },{ 0,104,255,0 },{ 0,106,255,0 },{ 0,109,255,0 },{ 0,112,255,0 },{ 0,114,255,0 },{ 0,117,255,0 },{ 0,120,255,0 },{ 0,122,255,0 },{ 0,125,255,0 },{ 0,128,255,0 },{ 0,130,255,0 },{ 0,133,255,0 },{ 0,135,255,0 },{ 0,138,255,0 },{ 0,141,255,0 },{ 0,143,255,0 },{ 0,146,255,0 },{ 0,149,255,0 },{ 0,151,255,0 },{ 0,154,255,0 },{ 0,157,255,0 },{ 0,159,255,0 },{ 0,162,255,0 },{ 0,165,255,0 },{ 0,167,255,0 },{ 0,170,255,0 },{ 0,173,255,0 },{ 0,175,255,0 },{ 0,178,255,0 },{ 0,181,255,0 },{ 0,183,255,0 },{ 0,186,255,0 },{ 0,189,255,0 },{ 0,191,255,0 },{ 0,194,255,0 },{ 0,197,255,0 },{ 0,199,255,0 },{ 0,202,255,0 },{ 0,205,255,0 },{ 0,207,255,0 },{ 0,210,255,0 },{ 0,213,255,0 },{ 0,215,255,0 },{ 0,218,255,0 },{ 0,220,255,0 },{ 0,223,255,0 },{ 0,226,255,0 },{ 0,228,255,0 },{ 0,231,255,0 },{ 0,234,255,0 },{ 0,236,255,0 },{ 0,239,255,0 },{ 0,242,255,0 },{ 0,244,255,0 },{ 0,247,255,0 },{ 0,250,255,0 },{ 0,252,255,0 },{ 0,255,255,0 },{ 4,255,255,0 },{ 8,255,255,0 },{ 12,255,255,0 },{ 16,255,255,0 },{ 20,255,255,0 },{ 24,255,255,0 },{ 28,255,255,0 },{ 32,255,255,0 },{ 36,255,255,0 },{ 40,255,255,0 },{ 44,255,255,0 },{ 48,255,255,0 },{ 52,255,255,0 },{ 56,255,255,0 },{ 60,255,255,0 },{ 64,255,255,0 },{ 68,255,255,0 },{ 72,255,255,0 },{ 76,255,255,0 },{ 80,255,255,0 },{ 84,255,255,0 },{ 88,255,255,0 },{ 92,255,255,0 },{ 96,255,255,0 },{ 100,255,255,0 },{ 104,255,255,0 },{ 108,255,255,0 },{ 112,255,255,0 },{ 116,255,255,0 },{ 120,255,255,0 },{ 124,255,255,0 },{ 128,255,255,0 },{ 131,255,255,0 },{ 135,255,255,0 },{ 139,255,255,0 },{ 143,255,255,0 },{ 147,255,255,0 },{ 151,255,255,0 },{ 155,255,255,0 },{ 159,255,255,0 },{ 163,255,255,0 },{ 167,255,255,0 },{ 171,255,255,0 },{ 175,255,255,0 },{ 179,255,255,0 },{ 183,255,255,0 },{ 187,255,255,0 },{ 191,255,255,0 },{ 195,255,255,0 },{ 199,255,255,0 },{ 203,255,255,0 },{ 207,255,255,0 },{ 211,255,255,0 },{ 215,255,255,0 },{ 219,255,255,0 },{ 223,255,255,0 },{ 227,255,255,0 },{ 231,255,255,0 },{ 235,255,255,0 },{ 239,255,255,0 },{ 243,255,255,0 },{ 247,255,255,0 },{ 251,255,255,0 },{ 255,255,255,0 }, },
	{ { 0,0,0,0 },{ 1,1,1,0 },{ 2,2,2,0 },{ 3,3,3,0 },{ 4,4,4,0 },{ 6,6,6,0 },{ 7,7,7,0 },{ 8,8,8,0 },{ 9,9,9,0 },{ 10,10,10,0 },{ 11,11,11,0 },{ 12,12,12,0 },{ 13,13,13,0 },{ 14,14,14,0 },{ 16,16,16,0 },{ 17,17,17,0 },{ 18,18,18,0 },{ 19,19,19,0 },{ 20,20,20,0 },{ 21,21,21,0 },{ 22,22,22,0 },{ 23,23,23,0 },{ 24,24,24,0 },{ 26,26,26,0 },{ 27,27,27,0 },{ 28,28,28,0 },{ 29,29,29,0 },{ 30,30,30,0 },{ 31,31,31,0 },{ 32,32,32,0 },{ 33,33,33,0 },{ 35,35,35,0 },{ 36,36,36,0 },{ 37,37,37,0 },{ 38,38,38,0 },{ 39,39,39,0 },{ 40,40,40,0 },{ 41,41,41,0 },{ 42,42,42,0 },{ 43,43,43,0 },{ 45,45,45,0 },{ 46,46,46,0 },{ 47,47,47,0 },{ 48,48,48,0 },{ 49,49,49,0 },{ 50,50,50,0 },{ 51,51,51,0 },{ 52,52,52,0 },{ 53,53,53,0 },{ 55,55,55,0 },{ 56,56,56,0 },{ 57,57,57,0 },{ 58,58,58,0 },{ 59,59,59,0 },{ 60,60,60,0 },{ 61,61,61,0 },{ 62,62,62,0 },{ 63,63,63,0 },{ 65,65,65,0 },{ 66,66,66,0 },{ 67,67,67,0 },{ 68,68,68,0 },{ 69,69,69,0 },{ 70,70,70,0 },{ 71,71,71,0 },{ 72,72,72,0 },{ 73,73,73,0 },{ 75,75,75,0 },{ 76,76,76,0 },{ 77,77,77,0 },{ 78,78,78,0 },{ 79,79,79,0 },{ 80,80,80,0 },{ 81,81,81,0 },{ 82,82,82,0 },{ 84,84,84,0 },{ 85,85,85,0 },{ 86,86,86,0 },{ 87,87,87,0 },{ 88,88,88,0 },{ 89,89,89,0 },{ 90,90,90,0 },{ 91,91,91,0 },{ 92,92,92,0 },{ 94,94,94,0 },{ 95,95,95,0 },{ 96,96,96,0 },{ 97,97,97,0 },{ 98,98,98,0 },{ 99,99,99,0 },{ 100,100,100,0 },{ 101,101,101,0 },{ 102,102,102,0 },{ 104,104,104,0 },{ 105,105,105,0 },{ 106,106,106,0 },{ 107,107,107,0 },{ 108,108,108,0 },{ 109,109,109,0 },{ 110,110,110,0 },{ 111,111,111,0 },{ 112,112,112,0 },{ 114,114,114,0 },{ 115,115,115,0 },{ 116,116,116,0 },{ 117,117,117,0 },{ 118,118,118,0 },{ 119,119,119,0 },{ 120,120,120,0 },{ 121,121,121,0 },{ 122,122,122,0 },{ 124,124,124,0 },{ 125,125,125,0 },{ 126,126,126,0 },{ 127,127,127,0 },{ 128,128,128,0 },{ 129,129,129,0 },{ 130,130,130,0 },{ 131,131,131,0 },{ 133,133,133,0 },{ 134,134,134,0 },{ 135,135,135,0 },{ 136,136,136,0 },{ 137,137,137,0 },{ 138,138,138,0 },{ 139,139,139,0 },{ 140,140,140,0 },{ 141,141,141,0 },{ 143,143,143,0 },{ 144,144,144,0 },{ 145,145,145,0 },{ 146,146,146,0 },{ 147,147,147,0 },{ 148,148,148,0 },{ 149,149,149,0 },{ 150,150,150,0 },{ 151,151,151,0 },{ 153,153,153,0 },{ 154,154,154,0 },{ 155,155,155,0 },{ 156,156,156,0 },{ 157,157,157,0 },{ 158,158,158,0 },{ 159,159,159,0 },{ 160,160,160,0 },{ 161,161,161,0 },{ 163,163,163,0 },{ 164,164,164,0 },{ 165,165,165,0 },{ 166,166,166,0 },{ 167,167,167,0 },{ 168,168,168,0 },{ 169,169,169,0 },{ 170,170,170,0 },{ 171,171,171,0 },{ 173,173,173,0 },{ 174,174,174,0 },{ 175,175,175,0 },{ 176,176,176,0 },{ 177,177,177,0 },{ 178,178,178,0 },{ 179,179,179,0 },{ 180,180,180,0 },{ 182,182,182,0 },{ 183,183,183,0 },{ 184,184,184,0 },{ 185,185,185,0 },{ 186,186,186,0 },{ 187,187,187,0 },{ 188,188,188,0 },{ 189,189,189,0 },{ 190,190,190,0 },{ 192,192,192,0 },{ 193,193,193,0 },{ 194,194,194,0 },{ 195,195,195,0 },{ 196,196,196,0 },{ 197,197,197,0 },{ 198,198,198,0 },{ 199,199,199,0 },{ 200,200,200,0 },{ 202,202,202,0 },{ 203,203,203,0 },{ 204,204,204,0 },{ 205,205,205,0 },{ 206,206,206,0 },{ 207,207,207,0 },{ 208,208,208,0 },{ 209,209,209,0 },{ 210,210,210,0 },{ 212,212,212,0 },{ 213,213,213,0 },{ 214,214,214,0 },{ 215,215,215,0 },{ 216,216,216,0 },{ 217,217,217,0 },{ 218,218,218,0 },{ 219,219,219,0 },{ 220,220,220,0 },{ 222,222,222,0 },{ 223,223,223,0 },{ 224,224,224,0 },{ 225,225,225,0 },{ 226,226,226,0 },{ 227,227,227,0 },{ 228,228,228,0 },{ 229,229,229,0 },{ 231,231,231,0 },{ 232,232,232,0 },{ 233,233,233,0 },{ 234,234,234,0 },{ 235,235,235,0 },{ 236,236,236,0 },{ 237,237,237,0 },{ 238,238,238,0 },{ 239,239,239,0 },{ 241,241,241,0 },{ 242,242,242,0 },{ 243,243,243,0 },{ 244,244,244,0 },{ 245,245,245,0 },{ 246,246,246,0 },{ 247,247,247,0 },{ 248,248,248,0 },{ 249,249,249,0 },{ 251,251,251,0 },{ 252,252,252,0 },{ 253,253,253,0 },{ 254,254,254,0 },{ 255,255,255,0 },{ 249,249,255,0 },{ 242,242,255,0 },{ 236,236,255,0 },{ 230,230,255,0 },{ 223,223,255,0 },{ 217,217,255,0 },{ 211,211,255,0 },{ 204,204,255,0 },{ 198,198,255,0 },{ 192,192,255,0 },{ 185,185,255,0 },{ 179,179,255,0 },{ 172,172,255,0 },{ 166,166,255,0 },{ 160,160,255,0 },{ 153,153,255,0 },{ 147,147,255,0 },{ 141,141,255,0 },{ 134,134,255,0 },{ 128,128,255,0 },{ 107,107,250,0 },{ 85,85,245,0 },{ 64,64,240,0 },{ 43,43,234,0 },{ 21,21,229,0 },{ 0,0,224,0 }, },
	{ { 142,142,255,0 },{ 142,142,255,0 },{ 142,142,255,0 },{ 142,142,255,0 },{ 141,141,255,0 },{ 141,141,255,0 },{ 141,141,255,0 },{ 141,141,255,0 },{ 140,140,255,0 },{ 140,140,255,0 },{ 140,140,255,0 },{ 139,139,255,0 },{ 138,138,255,0 },{ 138,138,255,0 },{ 137,137,255,0 },{ 137,137,255,0 },{ 136,136,255,0 },{ 135,135,255,0 },{ 135,135,255,0 },{ 134,134,255,0 },{ 134,134,255,0 },{ 133,133,255,0 },{ 133,133,255,0 },{ 132,132,255,0 },{ 132,132,255,0 },{ 132,132,255,0 },{ 131,131,255,0 },{ 131,131,255,0 },{ 130,130,255,0 },{ 130,130,255,0 },{ 129,129,255,0 },{ 129,129,255,0 },{ 128,128,255,0 },{ 128,128,255,0 },{ 128,128,255,0 },{ 127,127,255,0 },{ 127,127,255,0 },{ 127,127,255,0 },{ 126,126,255,0 },{ 126,126,255,0 },{ 125,125,255,0 },{ 125,125,254,0 },{ 125,125,254,0 },{ 124,124,254,0 },{ 124,124,254,0 },{ 124,124,254,0 },{ 123,123,254,0 },{ 123,123,254,0 },{ 123,123,254,0 },{ 122,122,254,0 },{ 122,122,254,0 },{ 121,121,254,0 },{ 121,121,254,0 },{ 121,121,254,0 },{ 120,120,254,0 },{ 120,120,253,0 },{ 120,120,253,0 },{ 119,119,253,0 },{ 119,119,253,0 },{ 118,118,253,0 },{ 118,118,253,0 },{ 118,118,253,0 },{ 117,117,253,0 },{ 117,117,253,0 },{ 117,117,252,0 },{ 116,116,252,0 },{ 116,116,252,0 },{ 115,115,252,0 },{ 115,115,252,0 },{ 115,115,252,0 },{ 114,114,251,0 },{ 114,114,251,0 },{ 114,114,251,0 },{ 113,113,251,0 },{ 113,113,251,0 },{ 112,112,251,0 },{ 112,112,251,0 },{ 112,112,251,0 },{ 111,111,251,0 },{ 111,111,251,0 },{ 111,111,250,0 },{ 110,110,250,0 },{ 110,110,250,0 },{ 110,110,250,0 },{ 109,109,250,0 },{ 109,109,250,0 },{ 108,108,250,0 },{ 108,108,250,0 },{ 108,108,250,0 },{ 107,107,250,0 },{ 107,107,250,0 },{ 107,107,250,0 },{ 106,106,250,0 },{ 106,106,250,0 },{ 105,105,249,0 },{ 105,105,249,0 },{ 105,105,249,0 },{ 104,104,249,0 },{ 104,104,249,0 },{ 104,104,249,0 },{ 103,103,249,0 },{ 103,103,249,0 },{ 102,102,249,0 },{ 102,102,249,0 },{ 102,102,249,0 },{ 101,101,249,0 },{ 101,101,249,0 },{ 101,101,249,0 },{ 100,100,248,0 },{ 100,100,248,0 },{ 99,99,248,0 },{ 99,99,248,0 },{ 99,99,248,0 },{ 98,98,248,0 },{ 98,98,248,0 },{ 98,98,248,0 },{ 97,97,248,0 },{ 97,97,248,0 },{ 97,97,248,0 },{ 96,96,248,0 },{ 96,96,248,0 },{ 96,96,248,0 },{ 96,96,247,0 },{ 95,95,247,0 },{ 95,95,247,0 },{ 95,95,247,0 },{ 94,94,247,0 },{ 94,94,247,0 },{ 94,94,247,0 },{ 93,93,247,0 },{ 93,93,247,0 },{ 93,93,247,0 },{ 92,92,246,0 },{ 92,92,246,0 },{ 92,92,246,0 },{ 91,91,246,0 },{ 91,91,246,0 },{ 91,91,246,0 },{ 90,90,245,0 },{ 90,90,245,0 },{ 89,89,245,0 },{ 89,89,245,0 },{ 89,89,245,0 },{ 88,88,245,0 },{ 88,88,245,0 },{ 88,88,245,0 },{ 87,87,245,0 },{ 87,87,244,0 },{ 86,86,244,0 },{ 86,86,244,0 },{ 86,86,244,0 },{ 85,85,244,0 },{ 85,85,244,0 },{ 85,85,244,0 },{ 84,84,244,0 },{ 84,84,244,0 },{ 83,83,244,0 },{ 83,83,244,0 },{ 83,83,244,0 },{ 82,82,244,0 },{ 82,82,244,0 },{ 82,82,244,0 },{ 81,81,243,0 },{ 81,81,243,0 },{ 80,80,243,0 },{ 80,80,243,0 },{ 80,80,243,0 },{ 79,79,243,0 },{ 79,79,243,0 },{ 79,79,243,0 },{ 78,78,243,0 },{ 78,78,243,0 },{ 77,77,243,0 },{ 77,77,243,0 },{ 77,77,243,0 },{ 76,76,242,0 },{ 76,76,242,0 },{ 76,76,242,0 },{ 75,75,242,0 },{ 75,75,242,0 },{ 75,75,242,0 },{ 74,74,242,0 },{ 74,74,242,0 },{ 73,73,242,0 },{ 73,73,242,0 },{ 73,73,242,0 },{ 72,72,242,0 },{ 72,72,242,0 },{ 72,72,242,0 },{ 71,71,241,0 },{ 71,71,241,0 },{ 70,70,241,0 },{ 70,70,241,0 },{ 70,70,241,0 },{ 69,69,241,0 },{ 69,69,241,0 },{ 69,69,241,0 },{ 68,68,241,0 },{ 68,68,241,0 },{ 67,67,241,0 },{ 67,67,241,0 },{ 67,67,241,0 },{ 66,66,241,0 },{ 66,66,240,0 },{ 66,66,240,0 },{ 65,65,240,0 },{ 65,65,240,0 },{ 64,64,240,0 },{ 64,64,240,0 },{ 64,64,240,0 },{ 63,63,240,0 },{ 63,63,240,0 },{ 63,63,240,0 },{ 62,62,239,0 },{ 62,62,239,0 },{ 62,62,239,0 },{ 61,61,239,0 },{ 61,61,239,0 },{ 60,60,239,0 },{ 60,60,238,0 },{ 60,60,238,0 },{ 59,59,238,0 },{ 59,59,238,0 },{ 59,59,238,0 },{ 58,58,238,0 },{ 58,58,238,0 },{ 57,57,238,0 },{ 57,57,238,0 },{ 57,57,237,0 },{ 56,56,237,0 },{ 56,56,237,0 },{ 56,56,237,0 },{ 55,55,237,0 },{ 55,55,237,0 },{ 54,54,237,0 },{ 54,54,237,0 },{ 54,54,237,0 },{ 53,53,237,0 },{ 53,53,237,0 },{ 52,52,237,0 },{ 52,52,237,0 },{ 52,52,237,0 },{ 51,51,236,0 },{ 51,51,236,0 },{ 50,50,236,0 },{ 50,50,236,0 },{ 50,50,236,0 },{ 49,49,236,0 },{ 49,49,236,0 },{ 49,49,236,0 },{ 49,49,236,0 },{ 49,49,236,0 },{ 49,49,236,0 },{ 48,48,236,0 },{ 48,48,236,0 },{ 48,48,236,0 }, },
	{ { 200,255,255,0 },{ 197,255,255,0 },{ 195,255,255,0 },{ 192,255,255,0 },{ 190,255,255,0 },{ 187,255,255,0 },{ 185,255,255,0 },{ 182,255,255,0 },{ 180,255,255,0 },{ 177,255,255,0 },{ 175,255,255,0 },{ 172,255,255,0 },{ 170,255,255,0 },{ 167,255,255,0 },{ 165,255,255,0 },{ 162,255,255,0 },{ 159,255,255,0 },{ 157,255,255,0 },{ 154,255,255,0 },{ 152,255,255,0 },{ 149,255,255,0 },{ 147,255,255,0 },{ 144,255,255,0 },{ 142,255,255,0 },{ 139,255,255,0 },{ 137,255,255,0 },{ 134,255,255,0 },{ 132,255,255,0 },{ 129,255,255,0 },{ 127,255,255,0 },{ 124,255,255,0 },{ 122,255,255,0 },{ 119,255,255,0 },{ 116,255,255,0 },{ 114,255,255,0 },{ 111,255,255,0 },{ 109,255,255,0 },{ 106,255,255,0 },{ 104,255,255,0 },{ 101,255,255,0 },{ 99,255,255,0 },{ 96,255,255,0 },{ 94,255,255,0 },{ 91,255,255,0 },{ 89,255,255,0 },{ 86,255,255,0 },{ 84,255,255,0 },{ 81,255,255,0 },{ 78,255,255,0 },{ 76,255,255,0 },{ 73,255,255,0 },{ 71,255,255,0 },{ 68,255,255,0 },{ 66,255,255,0 },{ 63,255,255,0 },{ 61,255,255,0 },{ 58,255,255,0 },{ 56,255,255,0 },{ 53,255,255,0 },{ 51,255,255,0 },{ 48,255,255,0 },{ 46,255,255,0 },{ 43,255,255,0 },{ 41,255,255,0 },{ 38,255,255,0 },{ 35,255,255,0 },{ 33,255,255,0 },{ 30,255,255,0 },{ 28,255,255,0 },{ 25,255,255,0 },{ 23,255,255,0 },{ 20,255,255,0 },{ 18,255,255,0 },{ 15,255,255,0 },{ 13,255,255,0 },{ 10,255,255,0 },{ 8,255,255,0 },{ 5,255,255,0 },{ 3,255,255,0 },{ 0,255,255,0 },{ 0,254,255,0 },{ 0,252,255,0 },{ 0,251,254,0 },{ 0,249,254,0 },{ 0,248,254,0 },{ 0,246,254,0 },{ 0,245,254,0 },{ 0,243,254,0 },{ 0,242,253,0 },{ 0,241,253,0 },{ 0,239,253,0 },{ 0,238,253,0 },{ 0,236,253,0 },{ 0,235,253,0 },{ 0,233,252,0 },{ 0,232,252,0 },{ 0,230,252,0 },{ 0,229,252,0 },{ 0,227,252,0 },{ 0,226,252,0 },{ 0,225,251,0 },{ 0,223,251,0 },{ 0,222,251,0 },{ 0,220,251,0 },{ 0,219,251,0 },{ 0,217,251,0 },{ 0,216,250,0 },{ 0,214,250,0 },{ 0,213,250,0 },{ 0,212,250,0 },{ 0,210,250,0 },{ 0,209,250,0 },{ 0,207,249,0 },{ 0,206,249,0 },{ 0,204,249,0 },{ 0,203,249,0 },{ 0,201,249,0 },{ 0,200,249,0 },{ 0,198,248,0 },{ 0,197,248,0 },{ 0,196,248,0 },{ 0,194,248,0 },{ 0,193,248,0 },{ 0,191,248,0 },{ 0,190,247,0 },{ 0,188,247,0 },{ 0,187,247,0 },{ 0,185,247,0 },{ 0,184,247,0 },{ 0,183,246,0 },{ 0,181,246,0 },{ 0,180,246,0 },{ 0,178,246,0 },{ 0,177,246,0 },{ 0,175,246,0 },{ 0,174,245,0 },{ 0,172,245,0 },{ 0,171,245,0 },{ 0,170,245,0 },{ 0,168,245,0 },{ 0,167,245,0 },{ 0,165,244,0 },{ 0,164,244,0 },{ 0,162,244,0 },{ 0,161,244,0 },{ 0,159,244,0 },{ 0,158,244,0 },{ 0,156,243,0 },{ 0,155,243,0 },{ 0,154,243,0 },{ 0,152,243,0 },{ 0,151,243,0 },{ 0,149,243,0 },{ 0,148,242,0 },{ 0,146,242,0 },{ 0,145,242,0 },{ 0,143,242,0 },{ 0,142,242,0 },{ 0,141,242,0 },{ 0,139,241,0 },{ 0,138,241,0 },{ 0,136,241,0 },{ 0,135,241,0 },{ 0,133,241,0 },{ 0,132,241,0 },{ 0,130,240,0 },{ 0,129,240,0 },{ 0,127,240,0 },{ 0,126,240,0 },{ 0,125,240,0 },{ 0,123,239,0 },{ 0,122,239,0 },{ 0,120,239,0 },{ 0,119,239,0 },{ 0,117,239,0 },{ 0,116,239,0 },{ 0,114,238,0 },{ 0,113,238,0 },{ 0,112,238,0 },{ 0,110,238,0 },{ 0,109,238,0 },{ 0,107,238,0 },{ 0,106,237,0 },{ 0,104,237,0 },{ 0,103,237,0 },{ 0,101,237,0 },{ 0,100,237,0 },{ 0,99,237,0 },{ 0,97,236,0 },{ 0,96,236,0 },{ 0,94,236,0 },{ 0,93,236,0 },{ 0,91,236,0 },{ 0,90,236,0 },{ 0,88,235,0 },{ 0,87,235,0 },{ 0,85,235,0 },{ 0,84,235,0 },{ 0,83,235,0 },{ 0,81,235,0 },{ 0,80,234,0 },{ 0,78,234,0 },{ 0,77,234,0 },{ 0,75,234,0 },{ 0,74,234,0 },{ 0,72,234,0 },{ 0,71,233,0 },{ 0,70,233,0 },{ 0,68,233,0 },{ 0,67,233,0 },{ 0,65,233,0 },{ 0,64,233,0 },{ 0,62,232,0 },{ 0,61,232,0 },{ 0,59,232,0 },{ 0,58,232,0 },{ 0,57,232,0 },{ 0,55,231,0 },{ 0,54,231,0 },{ 0,52,231,0 },{ 0,51,231,0 },{ 0,49,231,0 },{ 0,48,231,0 },{ 0,46,230,0 },{ 0,45,230,0 },{ 0,43,230,0 },{ 0,42,230,0 },{ 0,41,230,0 },{ 0,39,230,0 },{ 0,38,229,0 },{ 0,36,229,0 },{ 0,35,229,0 },{ 0,33,229,0 },{ 0,32,229,0 },{ 0,30,229,0 },{ 0,29,228,0 },{ 0,28,228,0 },{ 0,26,228,0 },{ 0,25,228,0 },{ 0,23,228,0 },{ 0,22,228,0 },{ 0,20,227,0 },{ 0,19,227,0 },{ 0,17,227,0 },{ 0,16,227,0 },{ 0,14,227,0 },{ 0,13,227,0 },{ 0,12,226,0 },{ 0,10,226,0 },{ 0,9,226,0 },{ 0,7,226,0 },{ 0,6,226,0 },{ 0,4,226,0 },{ 0,3,225,0 },{ 0,1,225,0 },{ 0,0,225,0 }, },

};

//YUV��ʽα�ʱ�
unsigned char PseudoTableYUV[PSEUDONUM][256][4] =
{
	//00����
	{ { 16, 128, 128,0 },{ 17, 128, 128,0 },{ 18, 128, 128,0 },{ 19, 128, 128,0 },{ 19, 128, 129,0 },{ 20, 128, 128,0 },{ 22, 128, 129,0 },{ 23, 128, 128,0 },{ 23, 129, 128,0 },{ 24, 128, 128,0 },{ 25, 128, 127,0 },{ 26, 128, 128,0 },{ 26, 128, 128,0 },{ 27, 128, 128,0 },{ 28, 128, 128,0 },{ 29, 129, 128,0 },{ 30, 128, 128,0 },{ 31, 127, 128,0 },{ 32, 128, 128,0 },{ 33, 127, 128,0 },{ 33, 128, 129,0 },{ 34, 128, 128,0 },{ 35, 129, 128,0 },{ 36, 128, 128,0 },{ 36, 128, 128,0 },{ 37, 128, 128,0 },{ 39, 127, 127,0 },{ 40, 128, 128,0 },{ 40, 128, 128,0 },{ 41, 129, 128,0 },{ 42, 128, 128,0 },{ 43, 128, 129,0 },{ 43, 128, 128,0 },{ 44, 127, 128,0 },{ 45, 128, 128,0 },{ 46, 128, 128,0 },{ 47, 129, 128,0 },{ 49, 128, 127,0 },{ 49, 128, 128,0 },{ 50, 128, 128,0 },{ 50, 128, 128,0 },{ 52, 128, 128,0 },{ 52, 128, 128,0 },{ 53, 128, 128,0 },{ 53, 127, 128,0 },{ 55, 128, 128,0 },{ 56, 128, 128,0 },{ 57, 128, 129,0 },{ 57, 128, 128,0 },{ 59, 129, 129,0 },{ 59, 128, 128,0 },{ 60, 127, 127,0 },{ 60, 128, 128,0 },{ 62, 128, 127,0 },{ 62, 128, 128,0 },{ 63, 128, 128,0 },{ 63, 129, 128,0 },{ 66, 128, 128,0 },{ 66, 127, 128,0 },{ 67, 128, 128,0 },{ 67, 128, 128,0 },{ 69, 128, 129,0 },{ 69, 128, 128,0 },{ 70, 129, 129,0 },{ 70, 128, 127,0 },{ 72, 128, 128,0 },{ 72, 128, 128,0 },{ 74, 128, 127,0 },{ 74, 128, 128,0 },{ 76, 128, 128,0 },{ 76, 129, 128,0 },{ 77, 127, 128,0 },{ 78, 128, 129,0 },{ 79, 128, 128,0 },{ 79, 127, 128,0 },{ 80, 128, 128,0 },{ 81, 128, 128,0 },{ 83, 129, 129,0 },{ 83, 127, 127,0 },{ 84, 128, 128,0 },{ 85, 128, 128,0 },{ 86, 128, 128,0 },{ 86, 128, 128,0 },{ 87, 128, 127,0 },{ 88, 129, 128,0 },{ 89, 127, 128,0 },{ 89, 128, 128,0 },{ 91, 128, 128,0 },{ 92, 128, 129,0 },{ 93, 128, 128,0 },{ 93, 129, 129,0 },{ 94, 129, 129,0 },{ 95, 127, 127,0 },{ 96, 128, 128,0 },{ 96, 128, 127,0 },{ 97, 128, 128,0 },{ 98, 128, 128,0 },{ 100, 129, 128,0 },{ 100, 127, 128,0 },{ 101, 127, 128,0 },{ 102, 128, 128,0 },{ 103, 128, 128,0 },{ 103, 128, 128,0 },{ 104, 128, 128,0 },{ 105, 129, 129,0 },{ 106, 127, 128,0 },{ 106, 128, 128,0 },{ 107, 128, 128,0 },{ 109, 128, 127,0 },{ 110, 128, 128,0 },{ 110, 128, 128,0 },{ 112, 129, 128,0 },{ 112, 127, 128,0 },{ 113, 128, 128,0 },{ 113, 128, 128,0 },{ 115, 128, 128,0 },{ 115, 128, 128,0 },{ 116, 128, 128,0 },{ 117, 129, 129,0 },{ 119, 127, 128,0 },{ 119, 128, 128,0 },{ 120, 128, 127,0 },{ 120, 128, 128,0 },{ 122, 128, 128,0 },{ 122, 128, 127,0 },{ 123, 128, 128,0 },{ 124, 127, 128,0 },{ 125, 128, 128,0 },{ 127, 128, 128,0 },{ 127, 128, 129,0 },{ 128, 128, 128,0 },{ 129, 129, 129,0 },{ 130, 128, 128,0 },{ 130, 127, 128,0 },{ 131, 128, 128,0 },{ 132, 128, 127,0 },{ 133, 128, 128,0 },{ 133, 128, 128,0 },{ 135, 129, 128,0 },{ 136, 128, 128,0 },{ 137, 127, 127,0 },{ 137, 128, 128,0 },{ 138, 128, 128,0 },{ 139, 128, 128,0 },{ 140, 128, 128,0 },{ 140, 129, 129,0 },{ 142, 128, 128,0 },{ 142, 128, 129,0 },{ 144, 128, 128,0 },{ 144, 128, 127,0 },{ 146, 128, 128,0 },{ 146, 128, 127,0 },{ 147, 129, 128,0 },{ 147, 127, 128,0 },{ 149, 128, 128,0 },{ 149, 128, 128,0 },{ 150, 128, 128,0 },{ 150, 128, 128,0 },{ 152, 128, 128,0 },{ 153, 128, 128,0 },{ 154, 127, 128,0 },{ 154, 128, 129,0 },{ 156, 128, 127,0 },{ 156, 129, 128,0 },{ 157, 128, 128,0 },{ 157, 128, 127,0 },{ 159, 128, 128,0 },{ 159, 127, 128,0 },{ 160, 128, 128,0 },{ 161, 128, 128,0 },{ 163, 129, 128,0 },{ 163, 128, 128,0 },{ 164, 129, 129,0 },{ 164, 128, 128,0 },{ 166, 127, 128,0 },{ 166, 128, 129,0 },{ 167, 128, 128,0 },{ 167, 128, 128,0 },{ 169, 128, 127,0 },{ 170, 129, 128,0 },{ 171, 128, 128,0 },{ 172, 127, 127,0 },{ 173, 128, 128,0 },{ 173, 128, 128,0 },{ 174, 128, 128,0 },{ 175, 128, 128,0 },{ 176, 128, 129,0 },{ 176, 128, 128,0 },{ 177, 128, 129,0 },{ 179, 128, 128,0 },{ 180, 128, 128,0 },{ 180, 128, 128,0 },{ 181, 128, 127,0 },{ 182, 128, 128,0 },{ 183, 128, 128,0 },{ 183, 128, 128,0 },{ 184, 128, 128,0 },{ 185, 128, 128,0 },{ 186, 128, 128,0 },{ 187, 128, 128,0 },{ 188, 128, 128,0 },{ 189, 128, 128,0 },{ 190, 128, 129,0 },{ 190, 128, 128,0 },{ 191, 129, 129,0 },{ 192, 128, 128,0 },{ 193, 128, 127,0 },{ 193, 128, 128,0 },{ 194, 127, 127,0 },{ 195, 128, 128,0 },{ 197, 128, 128,0 },{ 197, 129, 128,0 },{ 198, 128, 128,0 },{ 199, 128, 129,0 },{ 200, 128, 128,0 },{ 200, 127, 128,0 },{ 202, 128, 129,0 },{ 202, 128, 128,0 },{ 203, 129, 129,0 },{ 203, 128, 127,0 },{ 206, 128, 128,0 },{ 206, 128, 128,0 },{ 207, 127, 127,0 },{ 207, 128, 128,0 },{ 209, 128, 128,0 },{ 209, 129, 128,0 },{ 210, 128, 128,0 },{ 210, 128, 128,0 },{ 212, 128, 128,0 },{ 212, 128, 129,0 },{ 214, 128, 128,0 },{ 214, 128, 128,0 },{ 216, 128, 129,0 },{ 216, 128, 127,0 },{ 217, 128, 128,0 },{ 217, 128, 128,0 },{ 219, 128, 128,0 },{ 219, 128, 128,0 },{ 220, 128, 127,0 },{ 220, 128, 128,0 },{ 223, 127, 128,0 },{ 223, 128, 128,0 },{ 224, 128, 128,0 },{ 224, 128, 129,0 },{ 226, 128, 128,0 },{ 226, 129, 129,0 },{ 227, 128, 128,0 },{ 227, 127, 127,0 },{ 229, 128, 128,0 },{ 229, 128, 127,0 },{ 231, 128, 128,0 },{ 233, 128, 128,0 },{ 233, 129, 128,0 },{ 234, 128, 128,0 },{ 234, 128, 129,0 },{ 236, 128, 128,0 } },

	//01-����:
	{ { 236, 128, 128,0 },{ 234, 128, 129,0 },{ 234, 128, 128,0 },{ 233, 129, 128,0 },{ 233, 128, 128,0 },{ 231, 128, 128,0 },{ 229, 128, 127,0 },{ 229, 128, 128,0 },{ 227, 127, 127,0 },{ 227, 128, 127,0 },{ 226, 129, 128,0 },{ 226, 128, 127,0 },{ 224, 128, 129,0 },{ 224, 128, 128,0 },{ 223, 128, 128,0 },{ 223, 127, 128,0 },{ 220, 128, 128,0 },{ 220, 128, 127,0 },{ 219, 128, 128,0 },{ 219, 128, 128,0 },{ 217, 128, 128,0 },{ 217, 128, 128,0 },{ 216, 128, 127,0 },{ 216, 128, 128,0 },{ 214, 128, 127,0 },{ 214, 128, 127,0 },{ 212, 128, 129,0 },{ 212, 128, 128,0 },{ 210, 128, 128,0 },{ 210, 128, 128,0 },{ 209, 129, 128,0 },{ 209, 128, 128,0 },{ 207, 128, 128,0 },{ 207, 127, 127,0 },{ 206, 128, 128,0 },{ 206, 128, 128,0 },{ 203, 128, 127,0 },{ 203, 129, 128,0 },{ 202, 128, 127,0 },{ 202, 128, 128,0 },{ 200, 127, 128,0 },{ 200, 128, 128,0 },{ 199, 128, 129,0 },{ 198, 128, 128,0 },{ 197, 129, 128,0 },{ 197, 128, 128,0 },{ 195, 128, 128,0 },{ 194, 127, 127,0 },{ 193, 128, 128,0 },{ 193, 128, 127,0 },{ 192, 128, 128,0 },{ 191, 129, 128,0 },{ 190, 128, 127,0 },{ 190, 128, 128,0 },{ 189, 128, 128,0 },{ 188, 128, 128,0 },{ 187, 128, 128,0 },{ 186, 128, 128,0 },{ 185, 128, 128,0 },{ 184, 128, 128,0 },{ 183, 128, 128,0 },{ 183, 128, 128,0 },{ 182, 128, 128,0 },{ 181, 128, 127,0 },{ 180, 128, 128,0 },{ 180, 128, 127,0 },{ 179, 128, 127,0 },{ 177, 128, 128,0 },{ 176, 128, 128,0 },{ 176, 128, 129,0 },{ 175, 128, 128,0 },{ 174, 128, 128,0 },{ 173, 128, 128,0 },{ 173, 128, 128,0 },{ 172, 127, 127,0 },{ 171, 128, 128,0 },{ 170, 129, 128,0 },{ 169, 128, 127,0 },{ 167, 128, 128,0 },{ 167, 128, 127,0 },{ 166, 128, 128,0 },{ 166, 127, 127,0 },{ 164, 128, 128,0 },{ 164, 129, 129,0 },{ 163, 128, 128,0 },{ 163, 129, 128,0 },{ 161, 128, 128,0 },{ 160, 128, 128,0 },{ 159, 127, 128,0 },{ 159, 128, 128,0 },{ 157, 128, 127,0 },{ 157, 128, 128,0 },{ 156, 129, 128,0 },{ 156, 128, 127,0 },{ 154, 128, 128,0 },{ 154, 127, 127,0 },{ 153, 128, 128,0 },{ 152, 128, 128,0 },{ 150, 128, 128,0 },{ 150, 128, 128,0 },{ 149, 128, 128,0 },{ 149, 128, 128,0 },{ 147, 127, 128,0 },{ 147, 129, 128,0 },{ 146, 128, 127,0 },{ 146, 128, 128,0 },{ 144, 128, 127,0 },{ 144, 128, 128,0 },{ 142, 128, 128,0 },{ 142, 128, 127,0 },{ 140, 129, 129,0 },{ 140, 128, 128,0 },{ 139, 128, 128,0 },{ 138, 128, 128,0 },{ 137, 128, 128,0 },{ 137, 127, 127,0 },{ 136, 128, 128,0 },{ 135, 129, 128,0 },{ 133, 128, 128,0 },{ 133, 128, 128,0 },{ 132, 128, 127,0 },{ 131, 128, 128,0 },{ 130, 127, 127,0 },{ 130, 128, 127,0 },{ 129, 129, 129,0 },{ 128, 128, 128,0 },{ 127, 128, 129,0 },{ 127, 128, 128,0 },{ 125, 128, 128,0 },{ 124, 127, 128,0 },{ 123, 128, 128,0 },{ 122, 128, 127,0 },{ 122, 128, 128,0 },{ 120, 128, 128,0 },{ 120, 128, 127,0 },{ 119, 128, 128,0 },{ 119, 127, 127,0 },{ 117, 129, 129,0 },{ 116, 128, 128,0 },{ 115, 128, 128,0 },{ 115, 128, 128,0 },{ 113, 128, 128,0 },{ 113, 128, 128,0 },{ 112, 127, 128,0 },{ 112, 129, 128,0 },{ 110, 128, 128,0 },{ 110, 128, 128,0 },{ 109, 128, 127,0 },{ 107, 128, 128,0 },{ 106, 128, 128,0 },{ 106, 127, 127,0 },{ 105, 129, 129,0 },{ 104, 128, 128,0 },{ 103, 128, 128,0 },{ 103, 128, 128,0 },{ 102, 128, 128,0 },{ 101, 127, 128,0 },{ 100, 127, 128,0 },{ 100, 129, 128,0 },{ 98, 128, 128,0 },{ 97, 128, 128,0 },{ 96, 128, 127,0 },{ 96, 128, 128,0 },{ 95, 127, 127,0 },{ 94, 129, 128,0 },{ 93, 129, 129,0 },{ 93, 128, 128,0 },{ 92, 128, 129,0 },{ 91, 128, 128,0 },{ 89, 128, 128,0 },{ 89, 127, 128,0 },{ 88, 129, 128,0 },{ 87, 128, 127,0 },{ 86, 128, 128,0 },{ 86, 128, 128,0 },{ 85, 128, 128,0 },{ 84, 128, 128,0 },{ 83, 127, 127,0 },{ 83, 129, 128,0 },{ 81, 128, 128,0 },{ 80, 128, 128,0 },{ 79, 127, 128,0 },{ 79, 128, 128,0 },{ 78, 128, 129,0 },{ 77, 127, 128,0 },{ 76, 129, 128,0 },{ 76, 128, 128,0 },{ 74, 128, 128,0 },{ 74, 128, 127,0 },{ 72, 128, 128,0 },{ 72, 128, 128,0 },{ 70, 128, 127,0 },{ 70, 129, 128,0 },{ 69, 128, 128,0 },{ 69, 128, 129,0 },{ 67, 128, 128,0 },{ 67, 128, 128,0 },{ 66, 127, 128,0 },{ 66, 128, 128,0 },{ 63, 129, 128,0 },{ 63, 128, 128,0 },{ 62, 128, 128,0 },{ 62, 128, 127,0 },{ 60, 128, 128,0 },{ 60, 127, 127,0 },{ 59, 128, 128,0 },{ 59, 129, 128,0 },{ 57, 128, 128,0 },{ 57, 128, 129,0 },{ 56, 128, 128,0 },{ 55, 128, 128,0 },{ 53, 127, 128,0 },{ 53, 128, 128,0 },{ 52, 128, 128,0 },{ 52, 128, 128,0 },{ 50, 128, 128,0 },{ 50, 128, 128,0 },{ 49, 128, 128,0 },{ 49, 128, 127,0 },{ 47, 129, 128,0 },{ 46, 128, 127,0 },{ 45, 128, 128,0 },{ 44, 127, 128,0 },{ 43, 128, 128,0 },{ 43, 128, 129,0 },{ 42, 128, 128,0 },{ 41, 129, 128,0 },{ 40, 128, 128,0 },{ 40, 128, 128,0 },{ 39, 127, 127,0 },{ 37, 128, 128,0 },{ 36, 128, 128,0 },{ 36, 128, 128,0 },{ 35, 129, 128,0 },{ 34, 128, 127,0 },{ 33, 128, 129,0 },{ 33, 127, 128,0 },{ 32, 128, 128,0 },{ 31, 127, 128,0 },{ 30, 128, 128,0 },{ 29, 129, 128,0 },{ 28, 128, 128,0 },{ 27, 128, 128,0 },{ 26, 128, 128,0 },{ 26, 128, 128,0 },{ 25, 128, 127,0 },{ 24, 128, 128,0 },{ 23, 129, 128,0 },{ 23, 128, 127,0 },{ 22, 128, 129,0 },{ 20, 128, 128,0 },{ 19, 128, 129,0 },{ 19, 128, 128,0 },{ 18, 128, 128,0 },{ 17, 128, 128,0 },{ 16, 128, 128,0 } },

	//02-����:
	{ { 19, 142, 126,0 },{ 19, 143, 126,0 },{ 21, 144, 126,0 },{ 21, 145, 126,0 },{ 21, 145, 127,0 },{ 21, 145, 127,0 },{ 22, 146, 128,0 },{ 23, 147, 128,0 },{ 23, 149, 128,0 },{ 23, 149, 128,0 },{ 24, 150, 128,0 },{ 24, 150, 129,0 },{ 25, 151, 129,0 },{ 25, 152, 130,0 },{ 26, 153, 130,0 },{ 26, 154, 130,0 },{ 26, 154, 130,0 },{ 28, 154, 131,0 },{ 28, 155, 131,0 },{ 28, 156, 132,0 },{ 28, 157, 132,0 },{ 29, 158, 133,0 },{ 30, 159, 132,0 },{ 30, 159, 133,0 },{ 30, 160, 133,0 },{ 31, 161, 133,0 },{ 31, 162, 134,0 },{ 32, 163, 134,0 },{ 32, 164, 135,0 },{ 33, 164, 134,0 },{ 33, 164, 135,0 },{ 33, 165, 135,0 },{ 35, 166, 136,0 },{ 36, 166, 137,0 },{ 36, 165, 138,0 },{ 37, 166, 139,0 },{ 37, 165, 140,0 },{ 38, 166, 141,0 },{ 38, 166, 142,0 },{ 39, 166, 142,0 },{ 40, 167, 143,0 },{ 40, 167, 144,0 },{ 42, 166, 145,0 },{ 42, 167, 146,0 },{ 43, 167, 147,0 },{ 44, 167, 149,0 },{ 44, 167, 149,0 },{ 45, 168, 150,0 },{ 45, 167, 151,0 },{ 46, 167, 152,0 },{ 47, 168, 153,0 },{ 47, 167, 154,0 },{ 49, 168, 156,0 },{ 49, 168, 155,0 },{ 50, 168, 156,0 },{ 51, 169, 158,0 },{ 51, 169, 159,0 },{ 52, 168, 159,0 },{ 52, 169, 161,0 },{ 53, 169, 162,0 },{ 53, 169, 162,0 },{ 55, 169, 164,0 },{ 56, 170, 165,0 },{ 56, 169, 166,0 },{ 57, 170, 167,0 },{ 58, 170, 167,0 },{ 58, 169, 168,0 },{ 59, 170, 169,0 },{ 59, 170, 170,0 },{ 60, 170, 171,0 },{ 61, 170, 172,0 },{ 62, 170, 173,0 },{ 63, 170, 174,0 },{ 63, 171, 175,0 },{ 64, 170, 176,0 },{ 64, 171, 177,0 },{ 65, 171, 178,0 },{ 66, 171, 179,0 },{ 66, 171, 179,0 },{ 67, 172, 180,0 },{ 69, 171, 181,0 },{ 69, 171, 182,0 },{ 70, 172, 183,0 },{ 70, 171, 184,0 },{ 71, 172, 185,0 },{ 71, 172, 186,0 },{ 72, 172, 187,0 },{ 73, 172, 188,0 },{ 73, 173, 189,0 },{ 74, 172, 190,0 },{ 75, 173, 191,0 },{ 76, 173, 191,0 },{ 77, 173, 192,0 },{ 77, 173, 193,0 },{ 78, 174, 194,0 },{ 79, 173, 195,0 },{ 81, 170, 196,0 },{ 82, 168, 196,0 },{ 83, 163, 197,0 },{ 85, 160, 197,0 },{ 86, 157, 197,0 },{ 87, 152, 198,0 },{ 90, 149, 198,0 },{ 90, 147, 198,0 },{ 92, 143, 200,0 },{ 93, 140, 200,0 },{ 95, 137, 199,0 },{ 96, 133, 201,0 },{ 98, 130, 201,0 },{ 99, 125, 201,0 },{ 101, 122, 202,0 },{ 102, 119, 202,0 },{ 104, 116, 202,0 },{ 104, 113, 202,0 },{ 106, 109, 204,0 },{ 107, 106, 204,0 },{ 108, 103, 204,0 },{ 110, 99, 205,0 },{ 112, 95, 206,0 },{ 113, 92, 205,0 },{ 114, 90, 206,0 },{ 116, 86, 207,0 },{ 117, 82, 207,0 },{ 118, 79, 207,0 },{ 120, 76, 208,0 },{ 121, 72, 208,0 },{ 122, 69, 209,0 },{ 125, 65, 209,0 },{ 126, 64, 208,0 },{ 127, 64, 207,0 },{ 129, 63, 206,0 },{ 130, 62, 205,0 },{ 131, 61, 204,0 },{ 133, 61, 203,0 },{ 134, 60, 202,0 },{ 135, 59, 201,0 },{ 137, 58, 200,0 },{ 138, 57, 199,0 },{ 139, 57, 198,0 },{ 141, 56, 197,0 },{ 142, 55, 196,0 },{ 143, 54, 195,0 },{ 145, 54, 194,0 },{ 147, 53, 193,0 },{ 148, 52, 192,0 },{ 149, 51, 191,0 },{ 150, 51, 190,0 },{ 152, 50, 189,0 },{ 153, 49, 188,0 },{ 154, 48, 187,0 },{ 156, 48, 186,0 },{ 157, 47, 185,0 },{ 158, 46, 184,0 },{ 160, 45, 183,0 },{ 161, 44, 182,0 },{ 162, 44, 181,0 },{ 164, 43, 180,0 },{ 165, 42, 179,0 },{ 166, 41, 179,0 },{ 168, 41, 177,0 },{ 169, 40, 176,0 },{ 170, 39, 176,0 },{ 172, 38, 174,0 },{ 173, 37, 173,0 },{ 174, 37, 173,0 },{ 176, 36, 172,0 },{ 177, 35, 170,0 },{ 178, 34, 170,0 },{ 180, 34, 169,0 },{ 181, 33, 168,0 },{ 182, 32, 167,0 },{ 184, 31, 166,0 },{ 185, 30, 165,0 },{ 186, 30, 164,0 },{ 188, 29, 163,0 },{ 189, 28, 162,0 },{ 190, 27, 161,0 },{ 192, 27, 160,0 },{ 193, 26, 159,0 },{ 194, 25, 158,0 },{ 196, 24, 157,0 },{ 197, 24, 156,0 },{ 198, 23, 155,0 },{ 200, 22, 154,0 },{ 201, 21, 153,0 },{ 202, 20, 152,0 },{ 204, 20, 151,0 },{ 205, 19, 150,0 },{ 206, 18, 149,0 },{ 208, 17, 148,0 },{ 209, 17, 147,0 },{ 211, 16, 146,0 },{ 211, 18, 146,0 },{ 212, 20, 145,0 },{ 212, 21, 145,0 },{ 213, 23, 145,0 },{ 213, 25, 145,0 },{ 213, 27, 144,0 },{ 214, 28, 144,0 },{ 214, 30, 144,0 },{ 215, 32, 143,0 },{ 215, 34, 143,0 },{ 215, 35, 143,0 },{ 216, 37, 143,0 },{ 216, 39, 142,0 },{ 216, 41, 142,0 },{ 217, 42, 142,0 },{ 217, 44, 141,0 },{ 218, 46, 141,0 },{ 218, 48, 141,0 },{ 218, 49, 141,0 },{ 219, 51, 140,0 },{ 219, 53, 140,0 },{ 220, 55, 140,0 },{ 220, 56, 139,0 },{ 220, 58, 139,0 },{ 221, 60, 139,0 },{ 221, 62, 139,0 },{ 222, 63, 138,0 },{ 222, 65, 138,0 },{ 222, 67, 138,0 },{ 223, 69, 137,0 },{ 223, 70, 137,0 },{ 224, 72, 137,0 },{ 224, 74, 137,0 },{ 224, 75, 136,0 },{ 225, 77, 136,0 },{ 225, 79, 136,0 },{ 225, 81, 135,0 },{ 226, 82, 135,0 },{ 226, 84, 135,0 },{ 227, 86, 135,0 },{ 227, 88, 134,0 },{ 227, 89, 134,0 },{ 228, 91, 134,0 },{ 228, 93, 133,0 },{ 229, 95, 133,0 },{ 229, 96, 133,0 },{ 229, 98, 133,0 },{ 230, 100, 132,0 },{ 230, 102, 132,0 },{ 231, 103, 132,0 },{ 231, 105, 131,0 },{ 231, 107, 131,0 },{ 232, 109, 131,0 },{ 232, 110, 131,0 },{ 232, 112, 130,0 },{ 233, 114, 130,0 },{ 233, 116, 130,0 },{ 234, 117, 129,0 },{ 234, 119, 129,0 },{ 234, 121, 129,0 },{ 235, 123, 129,0 },{ 235, 124, 128,0 },{ 236, 126, 128,0 },{ 236, 128, 128,0 } },

	//03-����:
	{ { 38, 147, 111,0 },{ 40, 149, 111,0 },{ 40, 151, 110,0 },{ 42, 154, 109,0 },{ 43, 157, 109,0 },{ 44, 159, 107,0 },{ 45, 161, 107,0 },{ 46, 164, 106,0 },{ 47, 166, 105,0 },{ 49, 168, 104,0 },{ 49, 171, 104,0 },{ 51, 173, 102,0 },{ 52, 176, 102,0 },{ 53, 178, 101,0 },{ 54, 181, 100,0 },{ 55, 182, 100,0 },{ 57, 186, 98,0 },{ 58, 187, 98,0 },{ 59, 190, 96,0 },{ 60, 192, 96,0 },{ 61, 195, 95,0 },{ 62, 197, 94,0 },{ 64, 200, 94,0 },{ 64, 202, 92,0 },{ 66, 204, 92,0 },{ 66, 207, 91,0 },{ 68, 209, 90,0 },{ 69, 212, 89,0 },{ 70, 214, 89,0 },{ 71, 217, 88,0 },{ 72, 219, 87,0 },{ 73, 221, 86,0 },{ 74, 218, 85,0 },{ 75, 215, 85,0 },{ 76, 211, 84,0 },{ 77, 207, 83,0 },{ 78, 204, 83,0 },{ 78, 200, 82,0 },{ 80, 196, 82,0 },{ 80, 192, 81,0 },{ 82, 190, 81,0 },{ 82, 186, 79,0 },{ 83, 183, 78,0 },{ 84, 179, 78,0 },{ 85, 175, 77,0 },{ 86, 172, 77,0 },{ 87, 168, 76,0 },{ 87, 164, 76,0 },{ 89, 161, 75,0 },{ 89, 158, 75,0 },{ 91, 154, 73,0 },{ 91, 150, 72,0 },{ 92, 147, 72,0 },{ 94, 143, 71,0 },{ 94, 139, 71,0 },{ 96, 136, 70,0 },{ 96, 133, 70,0 },{ 98, 130, 69,0 },{ 98, 126, 69,0 },{ 99, 122, 68,0 },{ 100, 118, 66,0 },{ 101, 115, 66,0 },{ 101, 111, 65,0 },{ 103, 107, 65,0 },{ 105, 105, 66,0 },{ 107, 104, 67,0 },{ 109, 101, 67,0 },{ 112, 99, 68,0 },{ 114, 96, 69,0 },{ 117, 94, 69,0 },{ 119, 92, 70,0 },{ 121, 89, 71,0 },{ 123, 88, 72,0 },{ 126, 85, 73,0 },{ 128, 82, 73,0 },{ 131, 81, 74,0 },{ 133, 78, 75,0 },{ 135, 76, 77,0 },{ 137, 73, 77,0 },{ 140, 71, 77,0 },{ 142, 69, 79,0 },{ 145, 66, 80,0 },{ 147, 65, 80,0 },{ 149, 62, 80,0 },{ 152, 60, 81,0 },{ 154, 58, 83,0 },{ 157, 55, 83,0 },{ 158, 54, 84,0 },{ 161, 51, 85,0 },{ 163, 49, 86,0 },{ 166, 46, 86,0 },{ 168, 44, 87,0 },{ 171, 42, 88,0 },{ 172, 40, 89,0 },{ 175, 38, 89,0 },{ 178, 35, 90,0 },{ 179, 35, 92,0 },{ 180, 34, 93,0 },{ 181, 33, 95,0 },{ 182, 33, 97,0 },{ 183, 32, 99,0 },{ 184, 32, 100,0 },{ 185, 31, 102,0 },{ 186, 30, 104,0 },{ 187, 30, 106,0 },{ 188, 29, 107,0 },{ 189, 29, 109,0 },{ 190, 28, 111,0 },{ 191, 28, 113,0 },{ 192, 27, 114,0 },{ 193, 26, 116,0 },{ 194, 26, 118,0 },{ 195, 25, 120,0 },{ 196, 25, 121,0 },{ 197, 24, 123,0 },{ 198, 23, 125,0 },{ 199, 23, 127,0 },{ 200, 22, 128,0 },{ 201, 22, 130,0 },{ 202, 21, 132,0 },{ 203, 20, 134,0 },{ 204, 20, 135,0 },{ 205, 19, 137,0 },{ 206, 19, 139,0 },{ 207, 18, 141,0 },{ 208, 17, 142,0 },{ 210, 17, 144,0 },{ 211, 16, 146,0 },{ 209, 17, 148,0 },{ 206, 18, 149,0 },{ 204, 19, 151,0 },{ 202, 20, 152,0 },{ 200, 22, 154,0 },{ 198, 23, 155,0 },{ 196, 24, 156,0 },{ 194, 25, 158,0 },{ 192, 26, 159,0 },{ 190, 27, 161,0 },{ 188, 29, 162,0 },{ 186, 30, 164,0 },{ 184, 31, 165,0 },{ 182, 32, 167,0 },{ 180, 33, 168,0 },{ 178, 34, 170,0 },{ 176, 36, 171,0 },{ 174, 37, 173,0 },{ 172, 38, 174,0 },{ 170, 39, 176,0 },{ 168, 40, 177,0 },{ 166, 41, 179,0 },{ 164, 43, 180,0 },{ 162, 44, 181,0 },{ 160, 45, 183,0 },{ 158, 46, 184,0 },{ 156, 47, 186,0 },{ 154, 48, 187,0 },{ 152, 50, 189,0 },{ 150, 51, 190,0 },{ 148, 52, 192,0 },{ 147, 53, 193,0 },{ 144, 54, 194,0 },{ 142, 55, 196,0 },{ 140, 56, 197,0 },{ 138, 57, 199,0 },{ 136, 59, 200,0 },{ 134, 60, 202,0 },{ 132, 61, 203,0 },{ 130, 62, 205,0 },{ 128, 63, 206,0 },{ 126, 64, 208,0 },{ 124, 66, 209,0 },{ 122, 67, 211,0 },{ 120, 68, 212,0 },{ 118, 69, 214,0 },{ 116, 70, 215,0 },{ 114, 71, 216,0 },{ 112, 73, 218,0 },{ 110, 74, 219,0 },{ 108, 75, 221,0 },{ 106, 76, 222,0 },{ 104, 77, 224,0 },{ 102, 78, 225,0 },{ 100, 80, 227,0 },{ 98, 81, 228,0 },{ 96, 82, 230,0 },{ 94, 83, 231,0 },{ 92, 84, 233,0 },{ 90, 85, 234,0 },{ 88, 87, 236,0 },{ 86, 88, 237,0 },{ 84, 89, 239,0 },{ 82, 90, 240,0 },{ 83, 94, 239,0 },{ 84, 97, 239,0 },{ 84, 101, 238,0 },{ 85, 104, 238,0 },{ 86, 107, 237,0 },{ 86, 111, 237,0 },{ 86, 114, 236,0 },{ 87, 118, 235,0 },{ 88, 121, 235,0 },{ 89, 125, 234,0 },{ 90, 128, 234,0 },{ 90, 132, 233,0 },{ 91, 135, 233,0 },{ 92, 138, 232,0 },{ 93, 142, 232,0 },{ 93, 145, 231,0 },{ 94, 150, 229,0 },{ 95, 153, 229,0 },{ 96, 157, 228,0 },{ 96, 160, 228,0 },{ 97, 163, 227,0 },{ 98, 167, 227,0 },{ 99, 170, 226,0 },{ 100, 174, 225,0 },{ 100, 177, 225,0 },{ 101, 181, 224,0 },{ 102, 185, 224,0 },{ 103, 188, 223,0 },{ 103, 191, 223,0 },{ 104, 195, 222,0 },{ 105, 198, 221,0 },{ 106, 202, 221,0 },{ 110, 200, 218,0 },{ 114, 197, 215,0 },{ 118, 195, 212,0 },{ 122, 193, 209,0 },{ 126, 190, 206,0 },{ 130, 188, 203,0 },{ 134, 186, 200,0 },{ 138, 183, 197,0 },{ 142, 181, 195,0 },{ 146, 179, 192,0 },{ 150, 176, 189,0 },{ 154, 174, 186,0 },{ 158, 172, 183,0 },{ 162, 169, 180,0 },{ 166, 167, 177,0 },{ 171, 165, 175,0 },{ 174, 163, 172,0 },{ 178, 160, 169,0 },{ 182, 158, 166,0 },{ 186, 156, 163,0 },{ 190, 153, 161,0 },{ 194, 151, 158,0 },{ 198, 149, 155,0 },{ 202, 146, 152,0 },{ 206, 144, 149,0 },{ 210, 142, 146,0 },{ 215, 139, 143,0 },{ 219, 137, 140,0 },{ 223, 135, 137,0 },{ 227, 132, 134,0 },{ 231, 130, 131,0 },{ 236, 128, 128,0 } },

	//04-����:
	{ { 16, 128, 128,0 },{ 17, 128, 128,0 },{ 18, 128, 127,0 },{ 18, 129, 127,0 },{ 20, 129, 126,0 },{ 22, 129, 125,0 },{ 23, 129, 125,0 },{ 23, 129, 124,0 },{ 24, 130, 124,0 },{ 25, 130, 123,0 },{ 26, 130, 123,0 },{ 27, 129, 123,0 },{ 28, 130, 122,0 },{ 29, 129, 122,0 },{ 30, 130, 120,0 },{ 31, 131, 121,0 },{ 32, 131, 120,0 },{ 33, 131, 120,0 },{ 34, 130, 119,0 },{ 35, 131, 119,0 },{ 36, 132, 118,0 },{ 37, 132, 119,0 },{ 37, 132, 118,0 },{ 38, 132, 117,0 },{ 39, 132, 116,0 },{ 41, 132, 115,0 },{ 42, 133, 115,0 },{ 43, 133, 114,0 },{ 44, 133, 114,0 },{ 45, 132, 114,0 },{ 45, 132, 114,0 },{ 47, 133, 113,0 },{ 48, 133, 113,0 },{ 49, 134, 111,0 },{ 49, 133, 112,0 },{ 50, 133, 111,0 },{ 51, 134, 110,0 },{ 52, 134, 110,0 },{ 53, 135, 109,0 },{ 55, 134, 109,0 },{ 56, 135, 109,0 },{ 56, 135, 109,0 },{ 57, 135, 108,0 },{ 58, 136, 107,0 },{ 59, 136, 106,0 },{ 59, 135, 106,0 },{ 61, 135, 105,0 },{ 62, 135, 105,0 },{ 64, 135, 105,0 },{ 64, 136, 105,0 },{ 65, 135, 104,0 },{ 66, 136, 103,0 },{ 68, 137, 102,0 },{ 68, 136, 101,0 },{ 69, 137, 102,0 },{ 70, 137, 101,0 },{ 70, 137, 101,0 },{ 71, 138, 100,0 },{ 72, 137, 100,0 },{ 75, 138, 100,0 },{ 75, 138, 100,0 },{ 76, 139, 99,0 },{ 77, 139, 98,0 },{ 78, 139, 97,0 },{ 78, 138, 97,0 },{ 79, 138, 97,0 },{ 81, 139, 96,0 },{ 82, 138, 96,0 },{ 82, 139, 95,0 },{ 83, 139, 94,0 },{ 85, 139, 94,0 },{ 85, 140, 94,0 },{ 86, 140, 92,0 },{ 87, 140, 93,0 },{ 89, 140, 92,0 },{ 89, 140, 92,0 },{ 90, 140, 91,0 },{ 91, 141, 90,0 },{ 92, 141, 91,0 },{ 92, 141, 90,0 },{ 94, 142, 90,0 },{ 96, 141, 88,0 },{ 97, 142, 87,0 },{ 97, 141, 88,0 },{ 98, 141, 87,0 },{ 99, 142, 87,0 },{ 100, 142, 86,0 },{ 102, 142, 86,0 },{ 102, 141, 87,0 },{ 103, 140, 87,0 },{ 105, 138, 87,0 },{ 106, 137, 88,0 },{ 107, 137, 89,0 },{ 108, 135, 89,0 },{ 109, 133, 90,0 },{ 111, 133, 91,0 },{ 110, 131, 91,0 },{ 112, 130, 91,0 },{ 112, 129, 93,0 },{ 114, 127, 92,0 },{ 115, 126, 93,0 },{ 116, 126, 94,0 },{ 117, 125, 94,0 },{ 119, 122, 95,0 },{ 118, 122, 95,0 },{ 120, 120, 96,0 },{ 121, 119, 96,0 },{ 122, 118, 98,0 },{ 124, 117, 98,0 },{ 124, 115, 99,0 },{ 126, 115, 100,0 },{ 126, 113, 99,0 },{ 128, 112, 100,0 },{ 129, 110, 101,0 },{ 129, 110, 102,0 },{ 131, 108, 101,0 },{ 131, 107, 102,0 },{ 133, 106, 102,0 },{ 134, 105, 104,0 },{ 135, 103, 105,0 },{ 136, 102, 105,0 },{ 137, 101, 105,0 },{ 137, 99, 106,0 },{ 139, 99, 107,0 },{ 140, 98, 107,0 },{ 141, 96, 108,0 },{ 143, 95, 108,0 },{ 143, 94, 109,0 },{ 145, 92, 109,0 },{ 144, 91, 111,0 },{ 146, 90, 110,0 },{ 147, 88, 111,0 },{ 148, 88, 112,0 },{ 150, 86, 113,0 },{ 150, 85, 113,0 },{ 152, 84, 113,0 },{ 153, 83, 114,0 },{ 153, 81, 114,0 },{ 154, 81, 115,0 },{ 156, 79, 115,0 },{ 157, 78, 116,0 },{ 158, 77, 118,0 },{ 159, 75, 118,0 },{ 160, 75, 119,0 },{ 162, 72, 119,0 },{ 162, 72, 119,0 },{ 163, 70, 120,0 },{ 163, 70, 121,0 },{ 165, 68, 122,0 },{ 166, 68, 121,0 },{ 167, 65, 122,0 },{ 168, 65, 122,0 },{ 169, 64, 124,0 },{ 171, 62, 124,0 },{ 172, 61, 125,0 },{ 172, 60, 125,0 },{ 173, 58, 126,0 },{ 174, 57, 127,0 },{ 175, 56, 127,0 },{ 177, 54, 128,0 },{ 178, 54, 128,0 },{ 179, 53, 129,0 },{ 181, 51, 129,0 },{ 180, 50, 131,0 },{ 182, 48, 130,0 },{ 182, 48, 131,0 },{ 184, 47, 132,0 },{ 185, 45, 133,0 },{ 186, 44, 132,0 },{ 187, 43, 133,0 },{ 188, 41, 134,0 },{ 188, 41, 134,0 },{ 190, 38, 135,0 },{ 191, 38, 135,0 },{ 192, 37, 136,0 },{ 193, 36, 138,0 },{ 194, 34, 138,0 },{ 196, 33, 138,0 },{ 196, 31, 139,0 },{ 197, 31, 140,0 },{ 198, 30, 139,0 },{ 199, 27, 141,0 },{ 201, 27, 141,0 },{ 201, 26, 141,0 },{ 203, 24, 141,0 },{ 204, 23, 142,0 },{ 205, 23, 143,0 },{ 205, 21, 144,0 },{ 207, 20, 145,0 },{ 209, 18, 145,0 },{ 209, 17, 146,0 },{ 211, 16, 146,0 },{ 209, 17, 148,0 },{ 206, 18, 149,0 },{ 204, 19, 151,0 },{ 202, 20, 152,0 },{ 200, 22, 154,0 },{ 198, 23, 155,0 },{ 196, 24, 156,0 },{ 194, 25, 158,0 },{ 192, 26, 159,0 },{ 190, 27, 161,0 },{ 188, 29, 162,0 },{ 186, 30, 164,0 },{ 184, 31, 165,0 },{ 182, 32, 167,0 },{ 180, 33, 168,0 },{ 178, 34, 170,0 },{ 176, 36, 171,0 },{ 174, 37, 173,0 },{ 172, 38, 174,0 },{ 170, 39, 176,0 },{ 168, 40, 177,0 },{ 166, 41, 179,0 },{ 164, 43, 180,0 },{ 162, 44, 181,0 },{ 160, 45, 183,0 },{ 158, 46, 184,0 },{ 156, 47, 186,0 },{ 154, 48, 187,0 },{ 152, 50, 189,0 },{ 150, 51, 190,0 },{ 148, 52, 192,0 },{ 147, 53, 193,0 },{ 144, 54, 194,0 },{ 142, 55, 196,0 },{ 140, 56, 197,0 },{ 138, 57, 199,0 },{ 136, 59, 200,0 },{ 134, 60, 202,0 },{ 132, 61, 203,0 },{ 130, 62, 205,0 },{ 128, 63, 206,0 },{ 126, 64, 208,0 },{ 124, 66, 209,0 },{ 122, 67, 211,0 },{ 120, 68, 212,0 },{ 118, 69, 214,0 },{ 116, 70, 215,0 },{ 114, 71, 216,0 },{ 111, 74, 217,0 },{ 109, 75, 217,0 },{ 106, 76, 218,0 },{ 103, 77, 218,0 },{ 101, 79, 220,0 },{ 98, 80, 220,0 },{ 96, 82, 221,0 },{ 94, 83, 221,0 },{ 91, 85, 222,0 },{ 89, 86, 223,0 },{ 86, 87, 224,0 },{ 84, 89, 224,0 },{ 81, 91, 225,0 },{ 79, 92, 225,0 },{ 76, 94, 226,0 },{ 74, 95, 226,0 } },

	//05-�ʺ�1:
	{ { 49, 109, 184,0 },{ 51, 111, 186,0 },{ 52, 113, 187,0 },{ 54, 115, 188,0 },{ 55, 118, 189,0 },{ 57, 120, 191,0 },{ 59, 121, 192,0 },{ 60, 124, 194,0 },{ 62, 126, 195,0 },{ 63, 129, 196,0 },{ 65, 130, 198,0 },{ 67, 132, 199,0 },{ 68, 135, 201,0 },{ 71, 137, 201,0 },{ 73, 139, 203,0 },{ 74, 141, 204,0 },{ 76, 143, 206,0 },{ 77, 146, 207,0 },{ 79, 147, 209,0 },{ 81, 150, 210,0 },{ 82, 151, 211,0 },{ 84, 154, 213,0 },{ 85, 156, 214,0 },{ 87, 158, 215,0 },{ 89, 160, 216,0 },{ 90, 162, 218,0 },{ 92, 164, 219,0 },{ 93, 167, 221,0 },{ 95, 168, 222,0 },{ 97, 170, 223,0 },{ 99, 173, 225,0 },{ 101, 175, 226,0 },{ 100, 178, 224,0 },{ 99, 182, 221,0 },{ 99, 185, 219,0 },{ 98, 189, 216,0 },{ 97, 192, 213,0 },{ 97, 196, 210,0 },{ 96, 199, 208,0 },{ 96, 203, 206,0 },{ 94, 206, 203,0 },{ 94, 209, 201,0 },{ 93, 210, 199,0 },{ 92, 211, 196,0 },{ 90, 212, 194,0 },{ 89, 212, 193,0 },{ 88, 213, 190,0 },{ 87, 214, 188,0 },{ 85, 214, 186,0 },{ 84, 215, 184,0 },{ 83, 216, 182,0 },{ 82, 216, 180,0 },{ 81, 217, 178,0 },{ 79, 218, 175,0 },{ 78, 219, 173,0 },{ 77, 219, 171,0 },{ 76, 220, 169,0 },{ 74, 221, 167,0 },{ 73, 221, 165,0 },{ 72, 222, 163,0 },{ 71, 223, 160,0 },{ 70, 224, 159,0 },{ 68, 224, 157,0 },{ 67, 225, 154,0 },{ 66, 226, 152,0 },{ 64, 227, 150,0 },{ 63, 227, 148,0 },{ 62, 228, 146,0 },{ 61, 229, 144,0 },{ 60, 229, 142,0 },{ 58, 230, 139,0 },{ 57, 231, 138,0 },{ 56, 231, 135,0 },{ 55, 232, 133,0 },{ 53, 233, 131,0 },{ 52, 234, 129,0 },{ 51, 234, 127,0 },{ 50, 235, 125,0 },{ 48, 236, 123,0 },{ 47, 236, 121,0 },{ 46, 237, 118,0 },{ 45, 238, 116,0 },{ 44, 239, 114,0 },{ 42, 239, 112,0 },{ 44, 238, 108,0 },{ 47, 237, 106,0 },{ 50, 235, 103,0 },{ 53, 233, 101,0 },{ 56, 231, 99,0 },{ 59, 230, 97,0 },{ 62, 228, 95,0 },{ 65, 226, 93,0 },{ 68, 225, 90,0 },{ 71, 223, 88,0 },{ 74, 221, 86,0 },{ 77, 219, 84,0 },{ 80, 218, 82,0 },{ 83, 216, 79,0 },{ 86, 214, 77,0 },{ 89, 212, 75,0 },{ 92, 211, 73,0 },{ 95, 209, 71,0 },{ 98, 207, 68,0 },{ 101, 205, 66,0 },{ 104, 204, 64,0 },{ 107, 202, 62,0 },{ 110, 200, 60,0 },{ 113, 199, 58,0 },{ 116, 197, 56,0 },{ 119, 195, 53,0 },{ 122, 193, 51,0 },{ 125, 192, 49,0 },{ 128, 190, 47,0 },{ 131, 188, 44,0 },{ 134, 186, 42,0 },{ 137, 185, 40,0 },{ 140, 183, 38,0 },{ 143, 181, 36,0 },{ 146, 179, 33,0 },{ 148, 178, 32,0 },{ 151, 176, 29,0 },{ 154, 175, 27,0 },{ 157, 173, 25,0 },{ 160, 171, 23,0 },{ 163, 169, 21,0 },{ 166, 168, 18,0 },{ 170, 166, 16,0 },{ 169, 163, 16,0 },{ 169, 161, 17,0 },{ 168, 158, 17,0 },{ 168, 155, 17,0 },{ 167, 153, 18,0 },{ 166, 150, 18,0 },{ 166, 148, 19,0 },{ 165, 145, 19,0 },{ 165, 143, 19,0 },{ 164, 140, 20,0 },{ 164, 137, 20,0 },{ 163, 135, 21,0 },{ 162, 132, 21,0 },{ 162, 130, 22,0 },{ 161, 127, 22,0 },{ 161, 124, 22,0 },{ 160, 122, 23,0 },{ 160, 119, 23,0 },{ 159, 116, 24,0 },{ 158, 114, 24,0 },{ 158, 111, 25,0 },{ 157, 109, 25,0 },{ 157, 106, 25,0 },{ 156, 104, 26,0 },{ 155, 101, 26,0 },{ 155, 98, 27,0 },{ 154, 96, 27,0 },{ 154, 93, 28,0 },{ 153, 90, 28,0 },{ 153, 88, 28,0 },{ 152, 85, 29,0 },{ 151, 83, 29,0 },{ 151, 80, 30,0 },{ 150, 77, 30,0 },{ 150, 75, 31,0 },{ 149, 72, 31,0 },{ 149, 70, 31,0 },{ 148, 67, 32,0 },{ 147, 65, 32,0 },{ 147, 62, 33,0 },{ 146, 59, 33,0 },{ 146, 57, 34,0 },{ 145, 54, 34,0 },{ 147, 53, 37,0 },{ 148, 52, 39,0 },{ 150, 51, 42,0 },{ 151, 50, 45,0 },{ 153, 50, 47,0 },{ 154, 49, 50,0 },{ 156, 48, 53,0 },{ 158, 47, 56,0 },{ 159, 46, 58,0 },{ 161, 45, 61,0 },{ 162, 44, 63,0 },{ 164, 43, 66,0 },{ 165, 42, 69,0 },{ 167, 41, 71,0 },{ 168, 41, 74,0 },{ 170, 40, 77,0 },{ 171, 39, 79,0 },{ 173, 38, 82,0 },{ 175, 37, 84,0 },{ 176, 36, 87,0 },{ 178, 35, 90,0 },{ 179, 34, 93,0 },{ 181, 33, 95,0 },{ 183, 32, 98,0 },{ 184, 32, 101,0 },{ 186, 31, 103,0 },{ 187, 30, 106,0 },{ 189, 29, 109,0 },{ 190, 28, 111,0 },{ 192, 27, 114,0 },{ 193, 26, 117,0 },{ 195, 25, 119,0 },{ 196, 24, 122,0 },{ 198, 24, 124,0 },{ 200, 22, 128,0 },{ 201, 22, 130,0 },{ 203, 21, 133,0 },{ 204, 20, 135,0 },{ 206, 19, 138,0 },{ 207, 18, 141,0 },{ 209, 17, 143,0 },{ 211, 16, 146,0 },{ 207, 18, 148,0 },{ 204, 19, 151,0 },{ 202, 21, 152,0 },{ 199, 22, 155,0 },{ 196, 24, 157,0 },{ 193, 26, 159,0 },{ 190, 28, 161,0 },{ 187, 29, 163,0 },{ 184, 31, 165,0 },{ 181, 33, 168,0 },{ 178, 34, 170,0 },{ 175, 36, 172,0 },{ 173, 38, 174,0 },{ 170, 39, 176,0 },{ 167, 41, 178,0 },{ 164, 43, 180,0 },{ 161, 45, 183,0 },{ 158, 46, 184,0 },{ 155, 48, 187,0 },{ 152, 50, 189,0 },{ 149, 51, 191,0 },{ 146, 53, 193,0 },{ 143, 54, 195,0 },{ 140, 56, 197,0 },{ 137, 58, 200,0 },{ 134, 60, 202,0 },{ 132, 61, 204,0 },{ 129, 63, 206,0 },{ 126, 65, 208,0 },{ 123, 66, 210,0 },{ 120, 68, 212,0 },{ 117, 70, 214,0 },{ 114, 71, 216,0 },{ 111, 73, 219,0 },{ 108, 75, 221,0 },{ 105, 77, 223,0 },{ 103, 78, 225,0 },{ 100, 80, 227,0 },{ 97, 82, 229,0 },{ 94, 83, 232,0 },{ 91, 85, 234,0 },{ 88, 87, 236,0 },{ 85, 88, 238,0 },{ 82, 90, 240,0 } },

	//06-����:
	{ { 16, 128, 128,0 },{ 17, 128, 129,0 },{ 17, 127, 130,0 },{ 18, 127, 132,0 },{ 19, 126, 133,0 },{ 19, 126, 134,0 },{ 20, 126, 135,0 },{ 21, 125, 136,0 },{ 21, 125, 137,0 },{ 22, 124, 139,0 },{ 23, 124, 140,0 },{ 24, 124, 141,0 },{ 24, 123, 142,0 },{ 25, 123, 143,0 },{ 26, 122, 145,0 },{ 26, 122, 146,0 },{ 27, 122, 147,0 },{ 28, 121, 148,0 },{ 28, 121, 149,0 },{ 29, 120, 150,0 },{ 30, 120, 152,0 },{ 30, 120, 153,0 },{ 31, 119, 154,0 },{ 32, 119, 155,0 },{ 32, 119, 156,0 },{ 33, 118, 157,0 },{ 34, 118, 159,0 },{ 35, 117, 160,0 },{ 35, 117, 161,0 },{ 36, 116, 162,0 },{ 37, 116, 164,0 },{ 37, 116, 164,0 },{ 38, 115, 166,0 },{ 39, 115, 167,0 },{ 39, 115, 168,0 },{ 40, 114, 169,0 },{ 41, 114, 171,0 },{ 41, 113, 171,0 },{ 42, 113, 173,0 },{ 43, 112, 174,0 },{ 43, 112, 175,0 },{ 44, 112, 176,0 },{ 45, 111, 178,0 },{ 46, 111, 178,0 },{ 46, 111, 180,0 },{ 47, 110, 181,0 },{ 48, 110, 182,0 },{ 48, 109, 183,0 },{ 49, 109, 185,0 },{ 50, 108, 186,0 },{ 50, 108, 187,0 },{ 51, 108, 188,0 },{ 52, 107, 189,0 },{ 52, 107, 190,0 },{ 53, 107, 192,0 },{ 54, 106, 193,0 },{ 55, 106, 194,0 },{ 55, 105, 195,0 },{ 56, 105, 196,0 },{ 57, 105, 197,0 },{ 57, 104, 199,0 },{ 58, 104, 200,0 },{ 59, 103, 201,0 },{ 59, 103, 202,0 },{ 60, 103, 204,0 },{ 61, 102, 204,0 },{ 61, 102, 206,0 },{ 62, 101, 207,0 },{ 63, 101, 208,0 },{ 64, 101, 209,0 },{ 64, 100, 211,0 },{ 65, 100, 212,0 },{ 66, 99, 213,0 },{ 66, 99, 214,0 },{ 67, 99, 215,0 },{ 68, 98, 216,0 },{ 68, 98, 218,0 },{ 69, 97, 219,0 },{ 70, 97, 220,0 },{ 70, 97, 221,0 },{ 71, 96, 222,0 },{ 72, 96, 223,0 },{ 73, 95, 225,0 },{ 73, 95, 226,0 },{ 74, 95, 227,0 },{ 75, 94, 228,0 },{ 75, 94, 229,0 },{ 76, 93, 231,0 },{ 77, 93, 232,0 },{ 77, 93, 233,0 },{ 78, 92, 234,0 },{ 79, 92, 235,0 },{ 79, 91, 236,0 },{ 80, 91, 238,0 },{ 81, 91, 239,0 },{ 82, 90, 240,0 },{ 84, 89, 239,0 },{ 85, 89, 238,0 },{ 86, 88, 237,0 },{ 88, 87, 236,0 },{ 89, 86, 235,0 },{ 90, 85, 234,0 },{ 92, 84, 233,0 },{ 93, 84, 232,0 },{ 94, 83, 231,0 },{ 96, 82, 230,0 },{ 97, 82, 229,0 },{ 98, 81, 228,0 },{ 100, 80, 227,0 },{ 101, 79, 226,0 },{ 102, 78, 225,0 },{ 104, 77, 224,0 },{ 105, 77, 223,0 },{ 106, 76, 222,0 },{ 107, 75, 222,0 },{ 109, 75, 220,0 },{ 110, 74, 219,0 },{ 111, 73, 219,0 },{ 113, 72, 218,0 },{ 114, 71, 216,0 },{ 115, 71, 216,0 },{ 117, 70, 215,0 },{ 118, 69, 214,0 },{ 119, 68, 213,0 },{ 121, 68, 212,0 },{ 122, 67, 211,0 },{ 123, 66, 210,0 },{ 125, 65, 209,0 },{ 126, 64, 208,0 },{ 127, 64, 207,0 },{ 129, 63, 206,0 },{ 130, 62, 205,0 },{ 131, 61, 204,0 },{ 133, 61, 203,0 },{ 134, 60, 202,0 },{ 135, 59, 201,0 },{ 137, 58, 200,0 },{ 138, 57, 199,0 },{ 139, 57, 198,0 },{ 141, 56, 197,0 },{ 142, 55, 196,0 },{ 143, 54, 195,0 },{ 145, 54, 194,0 },{ 147, 53, 193,0 },{ 148, 52, 192,0 },{ 149, 51, 191,0 },{ 150, 51, 190,0 },{ 152, 50, 189,0 },{ 153, 49, 188,0 },{ 154, 48, 187,0 },{ 156, 48, 186,0 },{ 157, 47, 185,0 },{ 158, 46, 184,0 },{ 160, 45, 183,0 },{ 161, 44, 182,0 },{ 162, 44, 181,0 },{ 164, 43, 180,0 },{ 165, 42, 179,0 },{ 166, 41, 179,0 },{ 168, 41, 177,0 },{ 169, 40, 176,0 },{ 170, 39, 176,0 },{ 172, 38, 174,0 },{ 173, 37, 173,0 },{ 174, 37, 173,0 },{ 176, 36, 172,0 },{ 177, 35, 170,0 },{ 178, 34, 170,0 },{ 180, 34, 169,0 },{ 181, 33, 168,0 },{ 182, 32, 167,0 },{ 184, 31, 166,0 },{ 185, 30, 165,0 },{ 186, 30, 164,0 },{ 188, 29, 163,0 },{ 189, 28, 162,0 },{ 190, 27, 161,0 },{ 192, 27, 160,0 },{ 193, 26, 159,0 },{ 194, 25, 158,0 },{ 196, 24, 157,0 },{ 197, 24, 156,0 },{ 198, 23, 155,0 },{ 200, 22, 154,0 },{ 201, 21, 153,0 },{ 202, 20, 152,0 },{ 204, 20, 151,0 },{ 205, 19, 150,0 },{ 206, 18, 149,0 },{ 208, 17, 148,0 },{ 209, 17, 147,0 },{ 211, 16, 146,0 },{ 211, 18, 146,0 },{ 212, 20, 145,0 },{ 212, 21, 145,0 },{ 213, 23, 145,0 },{ 213, 25, 145,0 },{ 213, 27, 144,0 },{ 214, 28, 144,0 },{ 214, 30, 144,0 },{ 215, 32, 143,0 },{ 215, 34, 143,0 },{ 215, 35, 143,0 },{ 216, 37, 143,0 },{ 216, 39, 142,0 },{ 216, 41, 142,0 },{ 217, 42, 142,0 },{ 217, 44, 141,0 },{ 218, 46, 141,0 },{ 218, 48, 141,0 },{ 218, 49, 141,0 },{ 219, 51, 140,0 },{ 219, 53, 140,0 },{ 220, 55, 140,0 },{ 220, 56, 139,0 },{ 220, 58, 139,0 },{ 221, 60, 139,0 },{ 221, 62, 139,0 },{ 222, 63, 138,0 },{ 222, 65, 138,0 },{ 222, 67, 138,0 },{ 223, 69, 137,0 },{ 223, 70, 137,0 },{ 224, 72, 137,0 },{ 224, 74, 137,0 },{ 224, 75, 136,0 },{ 225, 77, 136,0 },{ 225, 79, 136,0 },{ 225, 81, 135,0 },{ 226, 82, 135,0 },{ 226, 84, 135,0 },{ 227, 86, 135,0 },{ 227, 88, 134,0 },{ 227, 89, 134,0 },{ 228, 91, 134,0 },{ 228, 93, 133,0 },{ 229, 95, 133,0 },{ 229, 96, 133,0 },{ 229, 98, 133,0 },{ 230, 100, 132,0 },{ 230, 102, 132,0 },{ 231, 103, 132,0 },{ 231, 105, 131,0 },{ 231, 107, 131,0 },{ 232, 109, 131,0 },{ 232, 110, 131,0 },{ 232, 112, 130,0 },{ 233, 114, 130,0 },{ 233, 116, 130,0 },{ 234, 117, 129,0 },{ 234, 119, 129,0 },{ 234, 121, 129,0 },{ 235, 123, 129,0 },{ 235, 124, 128,0 },{ 236, 126, 128,0 },{ 236, 128, 128,0 } },

	//07-���?1:
	{ { 16, 128, 128,0 },{ 17, 128, 128,0 },{ 18, 128, 128,0 },{ 19, 128, 128,0 },{ 19, 128, 129,0 },{ 22, 128, 129,0 },{ 23, 128, 127,0 },{ 23, 129, 128,0 },{ 24, 128, 128,0 },{ 25, 128, 127,0 },{ 26, 128, 128,0 },{ 26, 128, 128,0 },{ 27, 128, 128,0 },{ 28, 128, 128,0 },{ 30, 128, 128,0 },{ 31, 127, 128,0 },{ 32, 128, 128,0 },{ 33, 127, 128,0 },{ 33, 128, 129,0 },{ 34, 128, 127,0 },{ 35, 129, 128,0 },{ 36, 128, 128,0 },{ 36, 128, 128,0 },{ 39, 127, 127,0 },{ 40, 128, 128,0 },{ 40, 128, 128,0 },{ 41, 129, 128,0 },{ 42, 128, 128,0 },{ 43, 128, 129,0 },{ 43, 128, 128,0 },{ 44, 127, 128,0 },{ 46, 128, 127,0 },{ 47, 129, 128,0 },{ 49, 128, 127,0 },{ 49, 128, 128,0 },{ 50, 128, 128,0 },{ 50, 128, 128,0 },{ 52, 128, 128,0 },{ 52, 128, 128,0 },{ 53, 128, 128,0 },{ 55, 128, 128,0 },{ 56, 128, 128,0 },{ 57, 128, 129,0 },{ 57, 128, 128,0 },{ 59, 129, 128,0 },{ 59, 128, 128,0 },{ 60, 127, 127,0 },{ 60, 128, 128,0 },{ 62, 128, 127,0 },{ 63, 128, 128,0 },{ 63, 129, 128,0 },{ 66, 128, 128,0 },{ 66, 127, 128,0 },{ 67, 128, 128,0 },{ 67, 128, 128,0 },{ 69, 128, 129,0 },{ 69, 128, 128,0 },{ 70, 129, 128,0 },{ 72, 128, 128,0 },{ 72, 128, 128,0 },{ 74, 128, 127,0 },{ 74, 128, 128,0 },{ 76, 128, 128,0 },{ 76, 129, 128,0 },{ 77, 127, 128,0 },{ 78, 128, 129,0 },{ 79, 128, 128,0 },{ 80, 128, 128,0 },{ 81, 128, 128,0 },{ 83, 129, 128,0 },{ 83, 127, 127,0 },{ 84, 128, 128,0 },{ 85, 128, 128,0 },{ 86, 128, 128,0 },{ 86, 128, 128,0 },{ 88, 129, 128,0 },{ 89, 127, 128,0 },{ 89, 128, 128,0 },{ 91, 128, 128,0 },{ 92, 128, 129,0 },{ 93, 128, 128,0 },{ 93, 129, 129,0 },{ 94, 129, 128,0 },{ 95, 127, 127,0 },{ 96, 128, 127,0 },{ 97, 128, 128,0 },{ 98, 128, 128,0 },{ 100, 129, 128,0 },{ 100, 127, 128,0 },{ 101, 127, 128,0 },{ 102, 128, 128,0 },{ 103, 128, 128,0 },{ 103, 128, 128,0 },{ 105, 129, 129,0 },{ 106, 127, 127,0 },{ 106, 128, 128,0 },{ 107, 128, 128,0 },{ 109, 128, 127,0 },{ 110, 128, 128,0 },{ 110, 128, 128,0 },{ 112, 129, 128,0 },{ 112, 127, 128,0 },{ 113, 128, 128,0 },{ 115, 128, 128,0 },{ 115, 128, 128,0 },{ 116, 128, 128,0 },{ 117, 129, 129,0 },{ 119, 127, 127,0 },{ 119, 128, 128,0 },{ 120, 128, 127,0 },{ 120, 128, 128,0 },{ 122, 128, 127,0 },{ 123, 128, 128,0 },{ 124, 127, 128,0 },{ 125, 128, 128,0 },{ 127, 128, 128,0 },{ 127, 128, 129,0 },{ 128, 128, 128,0 },{ 129, 129, 129,0 },{ 130, 127, 127,0 },{ 131, 128, 128,0 },{ 132, 128, 127,0 },{ 133, 128, 128,0 },{ 133, 128, 128,0 },{ 135, 129, 128,0 },{ 136, 128, 128,0 },{ 137, 127, 127,0 },{ 137, 128, 128,0 },{ 139, 128, 128,0 },{ 140, 128, 128,0 },{ 140, 129, 129,0 },{ 142, 128, 127,0 },{ 142, 128, 128,0 },{ 144, 128, 128,0 },{ 144, 128, 127,0 },{ 146, 128, 128,0 },{ 146, 128, 127,0 },{ 147, 127, 128,0 },{ 149, 128, 128,0 },{ 149, 128, 128,0 },{ 150, 128, 128,0 },{ 150, 128, 128,0 },{ 152, 128, 128,0 },{ 153, 128, 128,0 },{ 154, 127, 127,0 },{ 154, 128, 128,0 },{ 156, 129, 128,0 },{ 157, 128, 128,0 },{ 157, 128, 127,0 },{ 159, 128, 128,0 },{ 159, 127, 128,0 },{ 160, 128, 128,0 },{ 161, 128, 128,0 },{ 163, 129, 128,0 },{ 163, 128, 128,0 },{ 164, 128, 128,0 },{ 166, 127, 127,0 },{ 166, 128, 128,0 },{ 167, 128, 127,0 },{ 167, 128, 128,0 },{ 169, 128, 127,0 },{ 170, 129, 128,0 },{ 171, 128, 128,0 },{ 173, 128, 128,0 },{ 173, 128, 128,0 },{ 174, 128, 128,0 },{ 175, 128, 128,0 },{ 176, 128, 129,0 },{ 176, 128, 128,0 },{ 177, 128, 128,0 },{ 179, 128, 127,0 },{ 180, 128, 127,0 },{ 181, 128, 127,0 },{ 182, 128, 128,0 },{ 183, 128, 128,0 },{ 183, 128, 128,0 },{ 184, 128, 128,0 },{ 185, 128, 128,0 },{ 186, 128, 128,0 },{ 187, 128, 128,0 },{ 188, 128, 128,0 },{ 190, 128, 128,0 },{ 190, 128, 127,0 },{ 191, 129, 128,0 },{ 192, 128, 128,0 },{ 193, 128, 127,0 },{ 193, 128, 128,0 },{ 194, 127, 127,0 },{ 195, 128, 128,0 },{ 197, 128, 128,0 },{ 198, 128, 128,0 },{ 199, 128, 129,0 },{ 200, 128, 128,0 },{ 200, 127, 128,0 },{ 202, 128, 128,0 },{ 202, 128, 127,0 },{ 203, 129, 128,0 },{ 203, 128, 127,0 },{ 206, 128, 128,0 },{ 207, 127, 127,0 },{ 207, 128, 128,0 },{ 209, 128, 128,0 },{ 209, 129, 128,0 },{ 210, 128, 128,0 },{ 210, 128, 128,0 },{ 212, 128, 128,0 },{ 212, 128, 129,0 },{ 214, 128, 127,0 },{ 216, 128, 128,0 },{ 216, 128, 127,0 },{ 217, 128, 128,0 },{ 217, 128, 128,0 },{ 219, 128, 128,0 },{ 219, 128, 128,0 },{ 220, 128, 127,0 },{ 220, 128, 128,0 },{ 223, 128, 128,0 },{ 224, 128, 128,0 },{ 224, 128, 129,0 },{ 226, 128, 127,0 },{ 226, 129, 128,0 },{ 227, 128, 127,0 },{ 227, 127, 127,0 },{ 229, 128, 128,0 },{ 229, 128, 127,0 },{ 233, 128, 128,0 },{ 233, 129, 128,0 },{ 234, 128, 128,0 },{ 234, 128, 129,0 },{ 236, 128, 128,0 },{ 231, 127, 130,0 },{ 228, 126, 134,0 },{ 224, 125, 136,0 },{ 221, 124, 138,0 },{ 216, 123, 142,0 },{ 212, 122, 144,0 },{ 209, 122, 147,0 },{ 205, 121, 150,0 },{ 201, 119, 153,0 },{ 198, 118, 155,0 },{ 193, 117, 159,0 },{ 190, 117, 161,0 },{ 186, 116, 165,0 },{ 182, 115, 167,0 },{ 179, 113, 169,0 },{ 174, 112, 173,0 },{ 170, 112, 175,0 },{ 167, 111, 178,0 },{ 163, 110, 181,0 },{ 160, 109, 184,0 },{ 144, 107, 191,0 },{ 130, 104, 199,0 },{ 116, 101, 204,0 },{ 102, 99, 212,0 },{ 88, 97, 219,0 },{ 74, 95, 226,0 } },

	//08-���?3
	{ { 193,117,159,0, },{ 193,117,159,0, },{ 193,117,159,0, },{ 193,117,159,0, },{ 193,117,159,0, },{ 192,117,159,0, },{ 192,117,160,0, },{ 192,117,160,0, },{ 191,117,160,0, },{ 191,117,161,0, },{ 190,117,161,0, },{ 190,117,161,0, },{ 189,117,162,0, },{ 188,117,163,0, },{ 188,117,163,0, },{ 187,116,164,0, },{ 187,116,164,0, },{ 186,116,165,0, },{ 186,116,165,0, },{ 185,116,166,0, },{ 184,116,166,0, },{ 184,116,166,0, },{ 183,115,166,0, },{ 183,115,167,0, },{ 182,115,167,0, },{ 182,115,167,0, },{ 181,115,167,0, },{ 181,114,168,0, },{ 181,114,168,0, },{ 180,114,168,0, },{ 180,113,168,0, },{ 179,113,169,0, },{ 179,113,169,0, },{ 178,113,170,0, },{ 177,113,170,0, },{ 177,112,171,0, },{ 176,112,172,0, },{ 175,112,172,0, },{ 174,112,173,0, },{ 174,112,173,0, },{ 173,112,174,0, },{ 173,112,174,0, },{ 172,112,174,0, },{ 171,112,174,0, },{ 171,112,174,0, },{ 170,112,175,0, },{ 170,112,175,0, },{ 169,112,175,0, },{ 169,112,176,0, },{ 169,112,176,0, },{ 168,111,177,0, },{ 168,111,177,0, },{ 167,111,178,0, },{ 167,111,178,0, },{ 166,111,178,0, },{ 166,111,179,0, },{ 165,111,179,0, },{ 165,110,180,0, },{ 164,110,180,0, },{ 163,110,181,0, },{ 163,110,181,0, },{ 163,110,181,0, },{ 162,110,182,0, },{ 162,110,182,0, },{ 161,109,183,0, },{ 161,109,183,0, },{ 161,109,184,0, },{ 160,109,184,0, },{ 159,109,184,0, },{ 159,109,185,0, },{ 158,108,185,0, },{ 157,108,185,0, },{ 156,108,185,0, },{ 156,108,186,0, },{ 155,108,186,0, },{ 155,108,186,0, },{ 154,108,187,0, },{ 154,108,187,0, },{ 153,109,187,0, },{ 153,109,188,0, },{ 153,109,188,0, },{ 152,109,188,0, },{ 152,109,188,0, },{ 151,109,188,0, },{ 151,109,188,0, },{ 150,109,188,0, },{ 150,108,188,0, },{ 150,108,188,0, },{ 149,108,188,0, },{ 149,108,188,0, },{ 148,108,188,0, },{ 148,108,189,0, },{ 147,107,189,0, },{ 146,107,189,0, },{ 146,107,190,0, },{ 145,107,190,0, },{ 145,107,190,0, },{ 144,107,190,0, },{ 144,107,191,0, },{ 143,107,191,0, },{ 143,106,191,0, },{ 143,106,192,0, },{ 142,106,192,0, },{ 142,106,192,0, },{ 141,106,192,0, },{ 141,106,193,0, },{ 141,105,193,0, },{ 140,105,193,0, },{ 140,105,194,0, },{ 139,105,194,0, },{ 139,105,194,0, },{ 138,105,194,0, },{ 138,105,194,0, },{ 137,105,194,0, },{ 136,105,194,0, },{ 136,105,194,0, },{ 135,105,194,0, },{ 135,105,194,0, },{ 135,105,194,0, },{ 134,105,195,0, },{ 134,105,195,0, },{ 134,105,196,0, },{ 134,105,196,0, },{ 133,105,197,0, },{ 133,105,197,0, },{ 133,105,197,0, },{ 132,105,197,0, },{ 131,105,198,0, },{ 131,105,198,0, },{ 130,105,198,0, },{ 130,105,198,0, },{ 129,105,198,0, },{ 129,105,198,0, },{ 128,105,198,0, },{ 128,105,199,0, },{ 127,105,199,0, },{ 127,104,199,0, },{ 127,104,200,0, },{ 126,104,200,0, },{ 126,104,200,0, },{ 125,104,201,0, },{ 124,103,201,0, },{ 124,103,201,0, },{ 123,103,201,0, },{ 123,102,202,0, },{ 122,102,202,0, },{ 122,102,202,0, },{ 121,102,203,0, },{ 121,102,203,0, },{ 121,102,203,0, },{ 121,102,203,0, },{ 120,102,204,0, },{ 120,102,204,0, },{ 120,102,204,0, },{ 119,102,204,0, },{ 119,102,204,0, },{ 118,101,204,0, },{ 117,101,204,0, },{ 117,101,204,0, },{ 116,101,204,0, },{ 116,101,204,0, },{ 115,101,204,0, },{ 115,101,205,0, },{ 115,101,205,0, },{ 114,102,205,0, },{ 114,102,206,0, },{ 113,102,206,0, },{ 113,102,206,0, },{ 112,102,206,0, },{ 112,102,207,0, },{ 111,102,207,0, },{ 110,101,207,0, },{ 110,101,208,0, },{ 109,101,208,0, },{ 109,101,208,0, },{ 109,101,208,0, },{ 108,101,209,0, },{ 108,101,209,0, },{ 108,101,209,0, },{ 108,101,209,0, },{ 107,101,210,0, },{ 107,101,210,0, },{ 106,101,210,0, },{ 106,100,211,0, },{ 105,100,211,0, },{ 104,100,211,0, },{ 103,99,211,0, },{ 103,99,212,0, },{ 102,99,212,0, },{ 102,99,212,0, },{ 101,99,213,0, },{ 101,99,213,0, },{ 101,99,213,0, },{ 101,99,213,0, },{ 100,99,214,0, },{ 100,99,214,0, },{ 100,99,214,0, },{ 99,99,214,0, },{ 98,99,214,0, },{ 98,99,215,0, },{ 97,99,215,0, },{ 97,99,215,0, },{ 96,99,215,0, },{ 96,99,215,0, },{ 95,99,215,0, },{ 95,99,215,0, },{ 94,98,215,0, },{ 94,98,216,0, },{ 94,98,216,0, },{ 93,98,216,0, },{ 93,98,216,0, },{ 92,98,216,0, },{ 92,98,217,0, },{ 91,98,217,0, },{ 91,98,217,0, },{ 91,98,218,0, },{ 90,98,218,0, },{ 90,98,218,0, },{ 89,98,219,0, },{ 89,98,219,0, },{ 88,97,220,0, },{ 88,97,220,0, },{ 88,97,221,0, },{ 87,97,221,0, },{ 87,97,221,0, },{ 86,97,221,0, },{ 86,97,221,0, },{ 86,97,221,0, },{ 85,97,221,0, },{ 85,97,221,0, },{ 84,97,221,0, },{ 84,97,221,0, },{ 83,97,221,0, },{ 83,97,221,0, },{ 82,97,221,0, },{ 82,96,221,0, },{ 81,96,222,0, },{ 80,96,222,0, },{ 80,96,222,0, },{ 79,96,222,0, },{ 79,96,223,0, },{ 79,96,223,0, },{ 78,96,224,0, },{ 78,96,224,0, },{ 77,96,225,0, },{ 77,96,225,0, },{ 76,96,225,0, },{ 76,96,225,0, },{ 75,96,226,0, },{ 75,95,226,0, },{ 75,95,226,0, },{ 74,95,226,0, },{ 74,95,226,0, },{ 74,95,226,0, },{ 74,95,226,0, },{ 74,95,226,0 } },

	//09-����α��
	{ { 231, 104, 132,0 },{ 230, 102, 132,0 },{ 230, 102, 132,0 },{ 230, 100, 132,0 },{ 230, 99, 132,0 },{ 229, 98, 133,0 },{ 229, 97, 133,0 },{ 229, 96, 133,0 },{ 229, 95, 133,0 },{ 228, 94, 133,0 },{ 228, 93, 133,0 },{ 228, 92, 134,0 },{ 228, 91, 134,0 },{ 227, 89, 134,0 },{ 227, 88, 134,0 },{ 227, 87, 134,0 },{ 227, 86, 135,0 },{ 226, 85, 135,0 },{ 226, 84, 135,0 },{ 226, 83, 135,0 },{ 226, 81, 135,0 },{ 225, 81, 135,0 },{ 225, 79, 136,0 },{ 225, 78, 136,0 },{ 225, 77, 136,0 },{ 224, 76, 136,0 },{ 224, 75, 136,0 },{ 224, 74, 136,0 },{ 224, 73, 137,0 },{ 223, 72, 137,0 },{ 223, 70, 137,0 },{ 223, 70, 137,0 },{ 223, 68, 137,0 },{ 222, 67, 138,0 },{ 222, 66, 138,0 },{ 222, 65, 138,0 },{ 222, 64, 138,0 },{ 221, 63, 138,0 },{ 221, 62, 139,0 },{ 221, 60, 139,0 },{ 221, 59, 139,0 },{ 220, 58, 139,0 },{ 220, 57, 139,0 },{ 220, 56, 139,0 },{ 220, 55, 140,0 },{ 219, 54, 140,0 },{ 219, 53, 140,0 },{ 219, 52, 140,0 },{ 219, 50, 140,0 },{ 218, 49, 141,0 },{ 218, 48, 141,0 },{ 218, 47, 141,0 },{ 218, 46, 141,0 },{ 217, 45, 141,0 },{ 217, 44, 141,0 },{ 217, 43, 142,0 },{ 217, 41, 142,0 },{ 216, 41, 142,0 },{ 216, 39, 142,0 },{ 216, 38, 142,0 },{ 216, 37, 143,0 },{ 216, 36, 143,0 },{ 215, 35, 143,0 },{ 215, 34, 143,0 },{ 215, 33, 143,0 },{ 214, 31, 143,0 },{ 214, 30, 144,0 },{ 214, 29, 144,0 },{ 214, 28, 144,0 },{ 213, 27, 144,0 },{ 213, 26, 144,0 },{ 213, 25, 145,0 },{ 213, 24, 145,0 },{ 212, 23, 145,0 },{ 212, 22, 145,0 },{ 212, 20, 145,0 },{ 212, 20, 145,0 },{ 211, 18, 146,0 },{ 211, 17, 146,0 },{ 211, 16, 146,0 },{ 210, 16, 147,0 },{ 209, 17, 147,0 },{ 208, 17, 148,0 },{ 206, 18, 148,0 },{ 206, 18, 149,0 },{ 205, 18, 149,0 },{ 204, 19, 150,0 },{ 203, 19, 151,0 },{ 203, 21, 150,0 },{ 202, 21, 150,0 },{ 201, 21, 151,0 },{ 201, 22, 151,0 },{ 200, 22, 152,0 },{ 199, 23, 153,0 },{ 198, 23, 153,0 },{ 198, 23, 154,0 },{ 197, 24, 154,0 },{ 196, 24, 155,0 },{ 195, 25, 155,0 },{ 195, 25, 156,0 },{ 194, 26, 155,0 },{ 193, 26, 156,0 },{ 193, 26, 156,0 },{ 192, 27, 157,0 },{ 191, 27, 157,0 },{ 190, 28, 158,0 },{ 189, 28, 159,0 },{ 188, 29, 159,0 },{ 187, 29, 160,0 },{ 187, 29, 160,0 },{ 186, 30, 161,0 },{ 185, 30, 161,0 },{ 184, 31, 161,0 },{ 184, 31, 161,0 },{ 183, 32, 162,0 },{ 182, 32, 162,0 },{ 181, 33, 163,0 },{ 181, 33, 163,0 },{ 180, 33, 164,0 },{ 179, 34, 165,0 },{ 179, 34, 165,0 },{ 178, 35, 166,0 },{ 177, 35, 166,0 },{ 176, 35, 167,0 },{ 175, 36, 166,0 },{ 174, 36, 167,0 },{ 173, 37, 167,0 },{ 172, 37, 168,0 },{ 172, 37, 168,0 },{ 171, 39, 169,0 },{ 170, 39, 169,0 },{ 170, 40, 170,0 },{ 169, 40, 170,0 },{ 168, 40, 171,0 },{ 167, 41, 172,0 },{ 167, 41, 172,0 },{ 166, 42, 173,0 },{ 165, 42, 173,0 },{ 165, 43, 173,0 },{ 164, 43, 174,0 },{ 163, 43, 175,0 },{ 162, 44, 174,0 },{ 162, 44, 175,0 },{ 161, 45, 175,0 },{ 160, 45, 176,0 },{ 159, 46, 176,0 },{ 159, 46, 177,0 },{ 157, 47, 178,0 },{ 156, 47, 178,0 },{ 156, 47, 178,0 },{ 155, 48, 179,0 },{ 154, 48, 179,0 },{ 153, 49, 180,0 },{ 153, 49, 180,0 },{ 152, 50, 180,0 },{ 151, 50, 181,0 },{ 150, 50, 181,0 },{ 150, 51, 182,0 },{ 149, 51, 182,0 },{ 148, 52, 183,0 },{ 148, 52, 183,0 },{ 147, 52, 184,0 },{ 146, 53, 184,0 },{ 145, 53, 185,0 },{ 145, 54, 185,0 },{ 144, 54, 185,0 },{ 143, 54, 186,0 },{ 142, 55, 186,0 },{ 142, 55, 187,0 },{ 141, 56, 187,0 },{ 139, 57, 188,0 },{ 138, 57, 188,0 },{ 137, 58, 189,0 },{ 137, 58, 189,0 },{ 136, 59, 190,0 },{ 135, 59, 190,0 },{ 134, 60, 190,0 },{ 134, 60, 190,0 },{ 133, 60, 191,0 },{ 132, 61, 192,0 },{ 132, 61, 192,0 },{ 131, 62, 193,0 },{ 130, 62, 193,0 },{ 129, 63, 194,0 },{ 129, 63, 194,0 },{ 128, 64, 195,0 },{ 127, 64, 195,0 },{ 127, 64, 196,0 },{ 126, 65, 196,0 },{ 125, 65, 197,0 },{ 124, 66, 197,0 },{ 124, 66, 198,0 },{ 123, 67, 199,0 },{ 122, 67, 199,0 },{ 120, 67, 199,0 },{ 120, 68, 199,0 },{ 119, 68, 200,0 },{ 118, 69, 200,0 },{ 118, 69, 200,0 },{ 117, 69, 201,0 },{ 116, 70, 202,0 },{ 115, 70, 202,0 },{ 115, 71, 203,0 },{ 114, 71, 203,0 },{ 113, 71, 204,0 },{ 112, 72, 205,0 },{ 112, 73, 204,0 },{ 111, 74, 204,0 },{ 110, 74, 205,0 },{ 110, 75, 205,0 },{ 109, 75, 206,0 },{ 108, 75, 206,0 },{ 107, 76, 207,0 },{ 107, 76, 208,0 },{ 106, 77, 208,0 },{ 105, 77, 209,0 },{ 105, 77, 209,0 },{ 103, 78, 209,0 },{ 102, 78, 209,0 },{ 101, 79, 210,0 },{ 101, 79, 210,0 },{ 100, 80, 211,0 },{ 99, 80, 211,0 },{ 98, 81, 212,0 },{ 98, 81, 212,0 },{ 97, 81, 213,0 },{ 96, 82, 214,0 },{ 96, 82, 214,0 },{ 95, 83, 215,0 },{ 94, 83, 215,0 },{ 93, 84, 216,0 },{ 93, 84, 216,0 },{ 92, 84, 217,0 },{ 91, 85, 217,0 },{ 90, 85, 218,0 },{ 90, 86, 217,0 },{ 89, 86, 218,0 },{ 88, 86, 218,0 },{ 88, 87, 219,0 },{ 87, 87, 220,0 },{ 86, 88, 220,0 },{ 84, 88, 221,0 },{ 84, 88, 221,0 },{ 83, 89, 222,0 },{ 82, 89, 222,0 },{ 81, 90, 223,0 },{ 81, 90, 223,0 },{ 80, 92, 223,0 },{ 79, 92, 223,0 },{ 79, 92, 224,0 },{ 78, 93, 224,0 },{ 77, 93, 225,0 },{ 76, 94, 226,0 },{ 76, 94, 226,0 },{ 75, 95, 227,0 },{ 74, 95, 227,0 } },
};


CIrFireDrc::CIrFireDrc()
{
	gWidth = 640;
	gHeight = 480;
	gLen = gWidth * gHeight;
	gWinW = 3;
	gSrcPadW = gWidth + ((gWinW >> 1) << 1);
	gSrcPadH = gWidth + ((gWinW >> 1) << 1);

	int nLenNew = gSrcPadW * gSrcPadH;
	gSrcPad = (short*)porting_calloc_mem(nLenNew, sizeof(short), ITA_IMAGE_MODULE);
	memset(gSrcPad, 0, nLenNew * sizeof(short));
	gDstDrc = (unsigned char*)porting_calloc_mem(gLen, sizeof(unsigned char), ITA_IMAGE_MODULE);
	memset(gDstDrc, 0, gLen * sizeof(unsigned char));
	gSrcL = (short*)porting_calloc_mem(gLen, sizeof(short), ITA_IMAGE_MODULE);
	memset(gSrcL, 0, gLen * sizeof(short));


	//��������?��ֵ
	sDrcPara.mixContrastExp = 256;
	sDrcPara.mixBrightExp = 108;
	sDrcPara.restrainRangeThre = 6;
	sDrcPara.mixRange = 256;
	sDrcPara.midValue = 128;
	sDrcPara.platThresh = 201;
	sDrcPara.upDiscardRatio = 2;
	sDrcPara.downDiscardRatio = 2;
	//��ǿ����
	sDrcPara.enThr = 21;
	sDrcPara.enCoef = 1;
	sDrcPara.filterStd = 11;
	GetGuassPosWeightTable(gIDEPosWeightTable, 3, 3, sDrcPara.filterStd);
	gLinearBrightScale = 36;
	gSceneMeanY16 = 128.0f;
	gBrightChangeSpeed = 0.6;
	gExpectBrightness = sDrcPara.mixBrightExp;
	//α�ʱ��?
	//sDrcPara.pseudoNo = ITA_FIRE_WHITEHOT;
	//���ͼ���ʽ
	//sDrcPara.imgType = ITA_BGR888;

	Enimage = NULL;//---------fuhang
	temp_short = NULL;

	//memset(&m_memoryOp, 0, sizeof(ITADmaMemoryOp));
}

CIrFireDrc::CIrFireDrc(int nWidth, int nHeight, ITA_PIXEL_FORMAT imgFormat)
{
	gWidth = nWidth;
	gHeight = nHeight;
	gLen = gWidth * gHeight;
	gWinW = 3;
	gSrcPadW = gWidth + ((gWinW >> 1) << 1);
	gSrcPadH = gWidth + ((gWinW >> 1) << 1);

	int nLenNew = gSrcPadW * gSrcPadH;
	gSrcPad = (short*)porting_calloc_mem(nLenNew, sizeof(short), ITA_IMAGE_MODULE);
	memset(gSrcPad, 0, nLenNew * sizeof(short));
	gDstDrc = (unsigned char*)porting_calloc_mem(gLen, sizeof(unsigned char), ITA_IMAGE_MODULE);
	memset(gDstDrc, 0, gLen * sizeof(unsigned char));
	gSrcL = (short*)porting_calloc_mem(gLen, sizeof(short), ITA_IMAGE_MODULE);
	memset(gSrcL, 0, gLen * sizeof(short));

	//��������?��ֵ
	sDrcPara.mixContrastExp = 256;
	sDrcPara.mixBrightExp = 108;
	sDrcPara.restrainRangeThre = 6;
	sDrcPara.mixRange = 256;
	sDrcPara.midValue = 128;
	sDrcPara.platThresh = 201;
	sDrcPara.upDiscardRatio = 2;
	sDrcPara.downDiscardRatio = 2;
	//��ǿ����
	sDrcPara.enThr = 21;
	sDrcPara.enCoef = 32;
	sDrcPara.filterStd = 11;
	GetGuassPosWeightTable(gIDEPosWeightTable, 3, 3, sDrcPara.filterStd);
	GetGuass1DweightTable(gIDePos1DweightTable, 3, sDrcPara.filterStd);
	gLinearBrightScale = 36;
	gSceneMeanY16 = 128.0f;
	gBrightChangeSpeed = 0.6;
	gExpectBrightness = sDrcPara.mixBrightExp;
	//α�ʱ��?
	//sDrcPara.pseudoNo = ITA_FIRE_WHITEHOT;
	//���ͼ���ʽ
	//sDrcPara.imgType = imgFormat;
	paletteType = ITA_FIRE_WHITEHOT;
	format = imgFormat;

	Enimage = NULL;//---------fuhang
	temp_short = NULL;

	//memset(&m_memoryOp, 0, sizeof(ITADmaMemoryOp));
}

CIrFireDrc ::~CIrFireDrc()
{
	porting_free_mem(gSrcPad);
	gSrcPad = NULL;
	porting_free_mem(gDstDrc);
	gDstDrc = NULL;
	porting_free_mem(gSrcL);
	gSrcL = NULL;
	porting_free_mem(Enimage); //---------fuhang
	Enimage = NULL;//---------fuhang
	porting_free_mem(temp_short);
	temp_short = NULL;
}


void CIrFireDrc::PadMatrix(short* pus_pad_mat, short* pus_mat, int n_width, int n_height, int n_win_size_width, int n_win_size_height)
{
	int i, j;
	int n_pad_num_hor = n_win_size_width / 2;
	int n_pad_num_ver = n_win_size_height / 2;
	int n_width_new = n_width + 2 * n_pad_num_hor;
	int n_height_new = n_height + 2 * n_pad_num_ver;
	short* pus_mat_tmp = NULL;
	short* pus_pad_mat_tmp = NULL;

	// ����չͼ����и�ֵ��padarray
	//��ʼ����ֵ
	pus_mat_tmp = pus_mat;
	pus_pad_mat_tmp = pus_pad_mat + n_pad_num_ver * n_width_new + n_pad_num_hor;
	for (i = 0; i < n_height; i++)
	{
		// ������������
		memcpy(pus_pad_mat_tmp, pus_mat_tmp, n_width * sizeof(short));

		// ����ÿ���������ߵ�����
		for (j = 1; j <= n_pad_num_hor; j++)
		{
			*(pus_pad_mat_tmp - j) = *pus_pad_mat_tmp;
			*(pus_pad_mat_tmp + n_width - 1 + j) = *(pus_pad_mat_tmp + n_width - 1);
		}

		pus_mat_tmp += n_width;
		pus_pad_mat_tmp += n_width_new;
	}

	// ǰ���к�����и��?
	pus_mat_tmp = pus_pad_mat + n_width_new * n_pad_num_ver;
	pus_pad_mat_tmp = pus_pad_mat + n_width_new * (n_height_new - n_pad_num_ver - 1);
	for (i = 0; i < n_pad_num_ver; i++)
	{
		memcpy(pus_pad_mat + n_width_new * i, pus_mat_tmp, n_width_new * sizeof(short));
		memcpy(pus_pad_mat + n_width_new * (n_height_new - 1 - i), pus_pad_mat_tmp, n_width_new * sizeof(short));
	}
}

void CIrFireDrc::GaussianFilter16bit(short* pus_dst, short* pus_src, int n_width, int n_height, int n_win_wid, int* pos_weight_table)
{
	int i, j;
	int n_width_new = gSrcPadW;
	int n_height_new = gSrcPadH;
	short* pus_src_pad = gSrcPad;
	long n_val_sum = 0;

	memset(pus_src_pad, 0, n_width_new * n_height_new * sizeof(short));
	// �����չ���?
	PadMatrix(pus_src_pad, pus_src, n_width, n_height, n_win_wid, n_win_wid);

	// ���������ڻҶȼ�Ȩ��
	short* CurRowPtr, * LastRowPtr, * NextRowPtr;
	short* DstPixelPtr;
#if 1
	for (i = 0; i < n_height; i++)
	{
		LastRowPtr = pus_src_pad + i * n_width_new + 1;
		CurRowPtr = LastRowPtr + n_width_new;
		NextRowPtr = CurRowPtr + n_width_new;
		DstPixelPtr = pus_dst + i * n_width;
		for (j = 0; j < n_width; j++)
		{
			n_val_sum = (*(LastRowPtr - 1) * pos_weight_table[0] + *(LastRowPtr)*pos_weight_table[1]
				+ *(LastRowPtr + 1) * pos_weight_table[2] + *(CurRowPtr - 1) * pos_weight_table[3]
				+ *(CurRowPtr)*pos_weight_table[4] + *(CurRowPtr + 1) * pos_weight_table[5]
				+ *(NextRowPtr - 1) * pos_weight_table[6] + *(NextRowPtr)*pos_weight_table[7]
				+ *(NextRowPtr + 1) * pos_weight_table[8]);
			*DstPixelPtr = (short)(n_val_sum >> 12);
			LastRowPtr++;
			CurRowPtr++;
			NextRowPtr++;
			DstPixelPtr++;
		}
	}
#else
	int m, k;
	for (i = 0; i < n_height; i++)//----256*192 1.37ms
	{
		for (j = 0; j < n_width; j += 8)
		{
			int32x4_t value_sum[2] = { vdupq_n_s32(0) };//----v----
			for (m = 0; m < 3; m++)	//----win_h= 3
			{
				int16x8_t extracts[2];
				extracts[0] = vld1q_s16(pus_src_pad + (i + m) * n_width_new + j);//----v----
				extracts[1] = vld1q_s16(pus_src_pad + (i + m) * n_width_new + j + 8);//----v----
				for (k = 0; k < 3; k++)
				{
					int16x8_t imageItem;//----v----
					if (k == 0)
					{
						imageItem = extracts[0];
					}
					else if (k == 1) {
						imageItem = vextq_s16(extracts[0], extracts[1], 1);
					}
					else if (k == 2) {
						imageItem = vextq_s16(extracts[0], extracts[1], 2);
					}
					int16x4_t image_LowItem = vget_low_s16(imageItem);//----v----
					int16x4_t image_HeighItem = vget_high_s16(imageItem);
					value_sum[0] = vmlal_n_s16(value_sum[0], image_LowItem, pos_weight_table[m * 3 + k]);
					value_sum[1] = vmlal_n_s16(value_sum[1], image_HeighItem, pos_weight_table[m * 3 + k]);
				}
			}
			int16x4_t Dst0_v = vqrshrn_n_s32(value_sum[0], 12);
			int16x4_t Dst1_v = vqrshrn_n_s32(value_sum[1], 12);
			vst1_s16(pus_dst + i * n_width + j, Dst0_v);
			vst1_s16(pus_dst + i * n_width + j + 4, Dst1_v);
		}
	}
#endif
	LastRowPtr = NULL;
	CurRowPtr = NULL;
	NextRowPtr = NULL;
	DstPixelPtr = NULL;
	DstPixelPtr = NULL;

	pus_src_pad = NULL;
}


void CIrFireDrc::GetGuassPosWeightTable(int* a_pos_weight_table, int n_win_wid, int n_win_hei, int std)
{
	int i, j;
	int n_half_width = (n_win_wid - 1) / 2;
	int n_half_height = (n_win_hei - 1) / 2;
	int n_dist_x;
	int n_dist_y;
	float f_arg = 0;
	float f_sum = 0;
	float f_tmp;

	for (i = 0; i < n_win_hei; i++)
	{
		for (j = 0; j < n_win_wid; j++)
		{
			n_dist_x = i - n_half_width;
			n_dist_y = j - n_half_height;
			f_arg = -(n_dist_x * n_dist_x + n_dist_y * n_dist_y) / (2.f * std * std / 100 + 0.01f);
			f_tmp = (float)exp(f_arg);
			f_sum += f_tmp;
			a_pos_weight_table[i * n_win_wid + j] = (int)(f_tmp * 4096 + 0.5f);//����Ϊ1/4096
		}
	}

	//��һ��λ�ø�˹�ռ��˲���
	for (i = 0; i < n_win_wid * n_win_hei; i++)
	{
		a_pos_weight_table[i] = (int)(a_pos_weight_table[i] / f_sum);
	}
}

void CIrFireDrc::FastGaussianFilter16bit(short* pus_dst, short* pus_src, int n_width, int n_height, int n_win_size, int* weight) {
	int i, j;

	int n_width_new = gSrcPadW;
	int n_height_new = gSrcPadH;
	short* pus_src_pad = gSrcPad;
	long n_val_sum = 0;

	memset(pus_src_pad, 0, n_width_new * n_height_new * sizeof(short));
	// �����չ���?
	PadMatrix(pus_src_pad, pus_src, n_width, n_height, n_win_size, n_win_size);

	if (!temp_short)
	{
		temp_short = (short*)porting_calloc_mem(n_width_new * n_height_new, sizeof(short), ITA_OTHER_MODULE);
	}
	//short*temp_short = (short*)malloc(n_width_new*n_height_new*sizeof(short));
	memcpy(temp_short, pus_src_pad, n_width_new * n_height_new * sizeof(short));

	// ���������ڻҶȼ�Ȩ��
	short* CurRowPtr, * LastRowPtr, * NextRowPtr;
	short* DstPixelPtr;
	//x����
	for (i = 0; i < n_height; i++) {
		CurRowPtr = pus_src_pad + (i + 1) * n_width_new + 1;
		DstPixelPtr = temp_short + (i + 1) * n_width_new + 1;
		for (j = 0; j < n_width; j++) {
			n_val_sum = *(CurRowPtr - 1) * weight[0] + *(CurRowPtr)*weight[1] + *(CurRowPtr + 1) * weight[2];
			*DstPixelPtr = (short)(n_val_sum >> 12);
			CurRowPtr++;
			DstPixelPtr++;
		}
	}

	// y����
	for (i = 0; i < n_height; i++) {
		LastRowPtr = temp_short + i * n_width_new + 1;
		CurRowPtr = LastRowPtr + n_width_new;
		NextRowPtr = CurRowPtr + n_width_new;
		DstPixelPtr = pus_dst + i * n_width;
		for (j = 0; j < n_width; j++) {
			n_val_sum = *(LastRowPtr)*weight[0] + *(CurRowPtr)*weight[1] + *(NextRowPtr)*weight[2];
			*DstPixelPtr = (short)(n_val_sum >> 12);
			LastRowPtr++;
			CurRowPtr++;
			NextRowPtr++;
			DstPixelPtr++;
		}
	}
	LastRowPtr = NULL;
	CurRowPtr = NULL;
	NextRowPtr = NULL;
	DstPixelPtr = NULL;
	DstPixelPtr = NULL;

	pus_src_pad = NULL;
	//free(temp_short); 
	//temp_short = NULL;
}


void CIrFireDrc::GetHist(unsigned short* pHist, int* pnMaxOri, int* pnMinOri, int* pnMaxDisc, int* pnMinDisc, int* pGrayMean, short* pusSrcImg, int n_width,
	int n_height, int nHistSize, int nUpDiscardRatio, int nDownDiscardRatio, int nDownY16)
{
	int i;
	int nPixVal;
	int nHistmax = 0;
	int nHistmin = nHistSize;
	int n_len = n_width * n_height;
	int nSigma_1 = (int)(nDownDiscardRatio * n_len / 1000);//���׵����?
	int nSigma_2 = (int)(nUpDiscardRatio * n_len / 1000); //���׵����?
	int nCnt = 0;
	int nOrimin = nHistSize;
	int nOrimax = 0;
	int bFindVal[4] = { 0 };
	long long nGraySum = 0;
	unsigned int nNum = 0;

#if 1
	for (i = 0; i < n_len; i++)
	{
		if (pusSrcImg[i] > nDownY16)
		{
			continue;
		}

		nPixVal = (int)(pusSrcImg[i] + gOffset);

		pHist[nPixVal]++;
		nGraySum += nPixVal;
		nNum++;
		if (nPixVal < nOrimin)
		{
			nOrimin = nPixVal;
		}
		else if (nPixVal > nOrimax)
		{
			nOrimax = nPixVal;
		}
	}
#else
	short* SrcImgTemp = (short*)malloc(n_len * sizeof(short));

	for (i = 0; i < n_len; i++)
	{
		if (pusSrcImg[i] < nDownY16)
		{
			SrcImgTemp[nNum] = pusSrcImg[i];
			nNum++;
		}
	}

	/*for (i = 0; i < nNum; i++)
	{
		nPixVal = (int)(SrcImgTemp[i] + gOffset);

		pHist[nPixVal]++;
		nGraySum += nPixVal;

		if (nPixVal < nOrimin)
		{
			nOrimin = nPixVal;
		}
		else if (nPixVal > nOrimax)
		{
			nOrimax = nPixVal;
		}
	}*/
	unsigned short tempOrimin[8] = { 0 };
	unsigned short tempOrimax[8] = { 0 };
	uint16_t tempPixVal[8] = { 0 };
	uint16x8_t v_Orimin = vdupq_n_u16(nHistSize - 1);//----v----
	uint16x8_t v_Orimax = vdupq_n_u16(0);//----v----
	int16x8_t v_nOffset = vdupq_n_s16(gOffset);//----v----
	uint32_t GraySumTemp = 0;

	for (i = 0; i < nNum; i += 8)
	{
		int16x8_t v_SrcImg = vld1q_s16(SrcImgTemp + i);//----v----
		uint16x8_t v_tempPixVal = vreinterpretq_u16_s16(vaddq_s16(v_SrcImg, v_nOffset));

		vst1q_u16(tempPixVal, v_tempPixVal);
		//		vst1q_u16 (outY16 + i, v_tempPixVal);

		pHist[tempPixVal[0]]++;
		pHist[tempPixVal[1]]++;
		pHist[tempPixVal[2]]++;
		pHist[tempPixVal[3]]++;
		pHist[tempPixVal[4]]++;
		pHist[tempPixVal[5]]++;
		pHist[tempPixVal[6]]++;
		pHist[tempPixVal[7]]++;

		GraySumTemp = tempPixVal[0] + tempPixVal[1] + tempPixVal[2] + tempPixVal[3] + tempPixVal[4] + tempPixVal[5] + tempPixVal[6] + tempPixVal[7];
		nGraySum += GraySumTemp;

		v_Orimin = vminq_u16(v_tempPixVal, v_Orimin);
		v_Orimax = vmaxq_u16(v_tempPixVal, v_Orimax);
	}

	tempOrimin[0] = vgetq_lane_u16(v_Orimin, 0);
	tempOrimin[1] = vgetq_lane_u16(v_Orimin, 1);
	tempOrimin[2] = vgetq_lane_u16(v_Orimin, 2);
	tempOrimin[3] = vgetq_lane_u16(v_Orimin, 3);
	tempOrimin[4] = vgetq_lane_u16(v_Orimin, 4);
	tempOrimin[5] = vgetq_lane_u16(v_Orimin, 5);
	tempOrimin[6] = vgetq_lane_u16(v_Orimin, 6);
	tempOrimin[7] = vgetq_lane_u16(v_Orimin, 7);

	tempOrimax[0] = vgetq_lane_u16(v_Orimax, 0);
	tempOrimax[1] = vgetq_lane_u16(v_Orimax, 1);
	tempOrimax[2] = vgetq_lane_u16(v_Orimax, 2);
	tempOrimax[3] = vgetq_lane_u16(v_Orimax, 3);
	tempOrimax[4] = vgetq_lane_u16(v_Orimax, 4);
	tempOrimax[5] = vgetq_lane_u16(v_Orimax, 5);
	tempOrimax[6] = vgetq_lane_u16(v_Orimax, 6);
	tempOrimax[7] = vgetq_lane_u16(v_Orimax, 7);

	int left_count = nNum - i * 8;

	nOrimin = tempOrimin[0];
	nOrimax = tempOrimax[0];
	for (i = 0; i < 8; i++)
	{
		if (tempOrimin[i] < nOrimin)
		{
			nOrimin = tempOrimin[i];
		}
		if (tempOrimax[i] > nOrimax)
		{
			nOrimax = tempOrimax[i];
		}
	}

	for (i = left_count; i < nNum; i++)
	{
		nPixVal = (int)(SrcImgTemp[i] + gOffset);

		pHist[nPixVal]++;
		nGraySum += nPixVal;

		if (nPixVal < nOrimin)
		{
			nOrimin = nPixVal;
		}
		else if (nPixVal > nOrimax)
		{
			nOrimax = nPixVal;
		}
	}
	free(SrcImgTemp);
#endif

	* pnMaxOri = (int)(nOrimax - gOffset);
	*pnMinOri = (int)(nOrimin - gOffset);
	if (nNum > 0)
	{
		*pGrayMean = (int)(nGraySum / nNum - gOffset); // �ҶȾ�ֵ
	}
	else
	{
		*pGrayMean = 0;
	}

	for (i = nOrimin; i <= nOrimax; i++)
	{
		nCnt += pHist[i];

		if (nCnt >= nSigma_1 && pHist[i] > 0 && bFindVal[0] == 0)
		{
			nHistmin = i;
			bFindVal[0] = 1;
			break;
		}
	}

	nCnt = 0;
	for (i = nOrimax; i >= nOrimin; i--)
	{
		nCnt += pHist[i];

		if (nCnt >= nSigma_2 && pHist[i] > 0 && bFindVal[1] == 0)
		{
			nHistmax = i;
			bFindVal[1] = 1;
			break;
		}
	}

	*pnMaxDisc = nHistmax - gOffset;
	*pnMinDisc = nHistmin - gOffset;
}


void CIrFireDrc::GetHistLow(unsigned short* pHist, int* pnMaxOri, int* pnMinOri, int* pnMaxDisc, int* pnMinDisc, int* pGrayMean, short* pusSrcImg, int n_width,
	int n_height, int nHistSize, int nUpDiscardRatio, int nDownDiscardRatio)
{
	int i;
	int nPixVal;
	int nHistmax = 0;
	int nHistmin = nHistSize;
	int n_len = n_width * n_height;
	int nSigma_1 = (int)(nDownDiscardRatio * n_len / 1000);//���׵����?
	int nSigma_2 = (int)(nUpDiscardRatio * n_len / 1000); //���׵����?
	int nCnt = 0;
	int nOrimin = nHistSize;
	int nOrimax = 0;
	int bFindVal[4] = { 0 };
	long long nGraySum = 0;
	unsigned int nNum = 0;

	for (i = 0; i < n_len; i++)
	{
		nPixVal = (int)(pusSrcImg[i] + gOffset);

		pHist[nPixVal]++;
		nGraySum += nPixVal;
		nNum++;
		if (nPixVal < nOrimin)
		{
			nOrimin = nPixVal;
		}
		else if (nPixVal > nOrimax)
		{
			nOrimax = nPixVal;
		}
	}
	*pnMaxOri = (int)(nOrimax - gOffset);
	*pnMinOri = (int)(nOrimin - gOffset);
	if (nNum > 0)
	{
		*pGrayMean = (int)(nGraySum / nNum - gOffset); // �ҶȾ�ֵ
	}
	else
	{
		*pGrayMean = 0;
	}

	for (i = nOrimin; i <= nOrimax; i++)
	{
		nCnt += pHist[i];

		if (nCnt >= nSigma_1 && pHist[i] > 0 && bFindVal[0] == 0)
		{
			nHistmin = i;
			bFindVal[0] = 1;
			break;
		}
	}

	nCnt = 0;
	for (i = nOrimax; i >= nOrimin; i--)
	{
		nCnt += pHist[i];

		if (nCnt >= nSigma_2 && pHist[i] > 0 && bFindVal[1] == 0)
		{
			nHistmax = i;
			bFindVal[1] = 1;
			break;
		}
	}

	*pnMaxDisc = nHistmax - gOffset;
	*pnMinDisc = nHistmin - gOffset;
}


void CIrFireDrc::DRCMix(unsigned char* puc_dst, short* pus_src, int n_width, int n_height, int nMixContrastExp, int nMixBrightExp, int nRestrainRangeThre,
	int n_mixrange, int nMidValue, int nPlatThresh, int nUpDiscardRatio, int nDownDiscardRatio, int nDownY16)
{
	int i = 0;
	int n_len = n_width * n_height;
	int nGrayRange = 0;  //�׵���?��Χ    
	int nBright = 0;
	int nContrast = 0;
	int nCompensate = 0;//64;  //��̬������̬��Χ����ֵ����ֹ��̬��Χ��Сʱ������ͼ��Աȶȹ��������
	int nGrayMean = 0;
	int nOriMax = 0;
	int nOriMin = 0;
	int nDiscMax = 0;
	int nDiscMin = 0;
	int nIndex;
	int nY8start;
	int nY8Range;
	int nZoom = 1024;
	int nHistCumMax;
	unsigned short aHist[GRAYLEVEL_16BIT] = { 0 };
	unsigned int pHistCum[GRAYLEVEL_16BIT] = { 0 };
	unsigned char pMapTable[GRAYLEVEL_16BIT] = { 0 };

	// ͳ��ֱ��ͼ
	GetHist(aHist, &nOriMax, &nOriMin, &nDiscMax, &nDiscMin, &nGrayMean, pus_src, n_width, n_height, GRAYLEVEL_16BIT, nUpDiscardRatio, nDownDiscardRatio, nDownY16);
	nGrayRange = nDiscMax - nDiscMin + 1;
	if (gCurFrameNum < FRAME_SMOOTH_NUM)
	{
		gRangeSmooth[gCurFrameNum] = nGrayRange;
		nGrayRange = 0;
		for (i = 0; i < (gCurFrameNum + 1); i++)
		{
			nGrayRange += gRangeSmooth[i];
		}
		nGrayRange /= (gCurFrameNum + 1);
	}
	else
	{
		memcpy(gRangeSmooth, gRangeSmooth + 1, (FRAME_SMOOTH_NUM - 1) * sizeof(int));
		gRangeSmooth[FRAME_SMOOTH_NUM - 1] = nGrayRange;
		nGrayRange = 0;
		for (i = 0; i < FRAME_SMOOTH_NUM; i++)
		{
			nGrayRange += gRangeSmooth[i];
		}
		nGrayRange /= FRAME_SMOOTH_NUM;
	}
	gCurFrameNum++;

	//// ����Ӧ���㲹����
	if (nGrayRange < nRestrainRangeThre)
	{
		nCompensate = nRestrainRangeThre - nGrayRange;
	}
	else
	{
		nCompensate = 0;
	}
	nContrast = nZoom * nMixContrastExp / (nGrayRange + nCompensate * 4);

	// ���Աȶ�����
	if (nContrast > nZoom * gMaxContrast)
	{
		nContrast = nZoom * gMaxContrast;
	}
	nBright = nMixBrightExp - (nGrayMean * nContrast) / nZoom;

	// ƽ̨��ֵ�������ۼ�
	unsigned int temp = 0;
	for (i = nOriMin; i <= nOriMax; i++)
	{
		nIndex = i + gOffset;
		if (aHist[nIndex] > nPlatThresh)   //ĳһ�Ҷȼ�ֱ��ͼ��������ƽ̨��ֵ
		{
			aHist[nIndex] = (unsigned short)nPlatThresh;
		}
		temp += aHist[nIndex];     //ֱ��ͼǰ����ۼӺ�?
		pHistCum[nIndex] = temp;
	}
	nHistCumMax = (int)(pHistCum[nDiscMax + gOffset]);

	//��ֹ����Ϊ0
	if (nHistCumMax == 0)
	{
		memset(puc_dst, 0, n_len * sizeof(unsigned char));
		return;
	}
	//���� ��Y16��̬��Χ��Сʱ��Сֱ��ͼ����ĳ̶ȣ����ƹ���?
	//if (nGrayRange < n_mixrange)
	//{
	//	n_mixrange = nGrayRange;
	//}

	// ����ӦȨֵ
	int nAlpha = 0;
	int nThrHigh = 300;
	int nThrLow = 100;
	int nThrLowL = int(nThrLow * 0.2);
	if (nGrayRange >= nThrHigh)
	{
		nAlpha = 204;
	}
	else if (nGrayRange < nThrHigh && nGrayRange > nThrLow)
	{
		nAlpha = 616 * (nThrHigh - nGrayRange) / (nThrHigh - nThrLow) + 204;
	}
	else if (nGrayRange > nThrLowL && nGrayRange <= nThrLow)
	{
		nAlpha = 204 * (nThrLow - nGrayRange) / (nThrLow - nThrLowL) + 820;
	}
	else if (nGrayRange <= nThrLowL)
	{
		nAlpha = 1024;
	}
	int nBeta = 1024 - nAlpha;

	nY8Range = n_mixrange;
	nY8start = nMidValue - nY8Range / 2;
	short nHistMapValue;
	short nLinearMapValue;
	for (i = nOriMin; i <= nOriMax; i++)
	{
		nIndex = i + gOffset;
		nHistMapValue = short(((pHistCum[nIndex] * nY8Range / nHistCumMax)) + nY8start);
		nLinearMapValue = short(((nContrast * i) >> 10) + nBright);
		pMapTable[nIndex] = (unsigned char)(ClipU8((nAlpha * nLinearMapValue + nBeta * nHistMapValue) >> 10));
	}

	for (i = 0; i < n_len; i++)
	{
		puc_dst[i] = pMapTable[pus_src[i] + gOffset];
	}
}


void CIrFireDrc::DRCMixLow(unsigned char* puc_dst, short* pus_src, int n_width, int n_height, int nMixContrastExp, int nMixBrightExp, int nRestrainRangeThre,
	int n_mixrange, int nMidValue, int nPlatThresh, int nUpDiscardRatio, int nDownDiscardRatio)
{
	int i = 0;
	int n_len = n_width * n_height;
	int nGrayRange = 0;  //�׵���?��Χ    
	int nBright = 0;
	int nContrast = 0;
	int nCompensate = 0;//64;  //��̬������̬��Χ����ֵ����ֹ��̬��Χ��Сʱ������ͼ��Աȶȹ��������
	int nGrayMean = 0;
	int nOriMax = 0;
	int nOriMin = 0;
	int nDiscMax = 0;
	int nDiscMin = 0;
	int nIndex;
	int nY8start;
	int nY8Range;
	int nZoom = 1024;
	int nHistCumMax;
	unsigned short aHist[GRAYLEVEL_16BIT] = { 0 };
	unsigned int pHistCum[GRAYLEVEL_16BIT] = { 0 };
	unsigned char pMapTable[GRAYLEVEL_16BIT] = { 0 };

	// ͳ��ֱ��ͼ
	GetHistLow(aHist, &nOriMax, &nOriMin, &nDiscMax, &nDiscMin, &nGrayMean, pus_src, n_width, n_height, GRAYLEVEL_16BIT, nUpDiscardRatio, nDownDiscardRatio);
	nGrayRange = nDiscMax - nDiscMin + 1;

	if (gCurFrameNum < FRAME_SMOOTH_NUM)
	{
		gRangeSmooth[gCurFrameNum] = nGrayRange;
		nGrayRange = 0;
		for (i = 0; i < (gCurFrameNum + 1); i++)
		{
			nGrayRange += gRangeSmooth[i];
		}
		nGrayRange /= (gCurFrameNum + 1);
	}
	else
	{
		memcpy(gRangeSmooth, gRangeSmooth + 1, (FRAME_SMOOTH_NUM - 1) * sizeof(int));
		gRangeSmooth[FRAME_SMOOTH_NUM - 1] = nGrayRange;
		nGrayRange = 0;
		for (i = 0; i < FRAME_SMOOTH_NUM; i++)
		{
			nGrayRange += gRangeSmooth[i];
		}
		nGrayRange /= FRAME_SMOOTH_NUM;
	}
	gCurFrameNum++;

	//// ����Ӧ���㲹����
	if (nGrayRange < nRestrainRangeThre)
	{
		nCompensate = nRestrainRangeThre - nGrayRange;
	}
	else
	{
		nCompensate = 0;
	}
	nContrast = nZoom * nMixContrastExp / (nGrayRange + nCompensate * 4);

	// ���Աȶ�����
	if (nContrast > nZoom * gMaxContrast)
	{
		nContrast = nZoom * gMaxContrast;
	}
	nBright = nMixBrightExp - (nGrayMean * nContrast) / nZoom;

	// ƽ̨��ֵ�������ۼ�
	unsigned int temp = 0;
	for (i = nOriMin; i <= nOriMax; i++)
	{
		nIndex = i + gOffset;
		if (aHist[nIndex] > nPlatThresh)   //ĳһ�Ҷȼ�ֱ��ͼ��������ƽ̨��ֵ
		{
			aHist[nIndex] = (unsigned short)nPlatThresh;
		}
		temp += aHist[nIndex];     //ֱ��ͼǰ����ۼӺ�?
		pHistCum[nIndex] = temp;
	}
	nHistCumMax = (int)(pHistCum[nDiscMax + gOffset]);

	//��ֹ����Ϊ0
	if (nHistCumMax == 0)
	{
		memset(puc_dst, 0, n_len * sizeof(unsigned char));
		return;
	}
	//���� ��Y16��̬��Χ��Сʱ��Сֱ��ͼ����ĳ̶ȣ����ƹ���?
	//if (nGrayRange < n_mixrange)
	//{
	//	n_mixrange = nGrayRange;
	//}

	// ����ӦȨֵ
	int nAlpha = 0;
	int nThrHigh = 300;
	int nThrLow = 100;
	int nThrLowL = int(nThrLow * 0.2);
	if (nGrayRange >= nThrHigh)
	{
		nAlpha = 204;
	}
	else if (nGrayRange < nThrHigh && nGrayRange > nThrLow)
	{
		nAlpha = 616 * (nThrHigh - nGrayRange) / (nThrHigh - nThrLow) + 204;
	}
	else if (nGrayRange > nThrLowL && nGrayRange <= nThrLow)
	{
		nAlpha = 204 * (nThrLow - nGrayRange) / (nThrLow - nThrLowL) + 820;
	}
	else if (nGrayRange <= nThrLowL)
	{
		nAlpha = 1024;
	}
	int nBeta = 1024 - nAlpha;

	nY8Range = n_mixrange;
	nY8start = nMidValue - nY8Range / 2;
	short nHistMapValue;
	short nLinearMapValue;
	for (i = nOriMin; i <= nOriMax; i++)
	{
		nIndex = i + gOffset;
		nHistMapValue = short(((pHistCum[nIndex] * nY8Range / nHistCumMax)) + nY8start);
		nLinearMapValue = short(((nContrast * i) >> 10) + nBright);
		pMapTable[nIndex] = (unsigned char)(ClipU8((nAlpha * nLinearMapValue + nBeta * nHistMapValue) >> 10));
	}

	for (i = 0; i < n_len; i++)
	{
		puc_dst[i] = pMapTable[pus_src[i] + gOffset];
	}
}


void CIrFireDrc::DRCFire(short* pus_src, unsigned char* puc_dst, int n_width, int n_height, int nUpY16, int nDownY16)
{
	int i, j;
	int nTemp, nDetail;
	int nZoom = 9;  //���㻯
	int nY8Min = 0;
	int nY8Max = 255;
	int nLen = n_width * n_height;
	int* pos_weight_table = gIDEPosWeightTable;
	short* nSrcL = gSrcL;
	unsigned char* nDstDrc = gDstDrc;

	int nMixContrastExp = sDrcPara.mixContrastExp;
	int nMixBrightExp = sDrcPara.mixBrightExp;
	int nRestrainRangeThre = sDrcPara.restrainRangeThre;
	int nMixRange = sDrcPara.mixRange;
	int nMidValue = sDrcPara.midValue;
	int nPlatThresh = sDrcPara.platThresh;
	int nUpDiscardRatio = sDrcPara.upDiscardRatio;
	int nDownDiscardRatio = sDrcPara.downDiscardRatio;
	int nEnThr = sDrcPara.enThr;
	int nEnCoef = sDrcPara.enCoef;

	int nImgType = format;
	if ((nImgType >= COLORIMGTYPENUM) || (nImgType < 0))
	{
		nImgType = 0;
	}

	int nPseudoNo = PSEUDONUM - 1;

	GaussianFilter16bit(nSrcL, pus_src, n_width, n_height, 3, pos_weight_table);

	//1.���Զ�����
	DRCMix(nDstDrc, pus_src, n_width, n_height, nMixContrastExp, nMixBrightExp, nRestrainRangeThre, nMixRange, nMidValue, nPlatThresh, nUpDiscardRatio, nDownDiscardRatio, nDownY16);

	//2.���ֶ����Ⲣ����α��
	if ((nUpY16 - nDownY16) <= 0) {
		return;
	}
	int nK = ((nY8Max - nY8Min) << nZoom) / (nUpY16 - nDownY16);

	if (nImgType == ITA_BGR888)
	{
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
				puc_dst[3 * i] = (unsigned char)nTemp;
				puc_dst[3 * i + 1] = (unsigned char)nTemp;
				puc_dst[3 * i + 2] = (unsigned char)nTemp;
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

				puc_dst[3 * i] = PseudoTableRGB[nPseudoNo][nTemp][2];
				puc_dst[3 * i + 1] = PseudoTableRGB[nPseudoNo][nTemp][1];
				puc_dst[3 * i + 2] = PseudoTableRGB[nPseudoNo][nTemp][0];
			}
		}
	}
	else if (nImgType == ITA_RGBA8888)
	{
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
				puc_dst[i * 4] = (unsigned char)nTemp;
				puc_dst[i * 4 + 1] = (unsigned char)nTemp;
				puc_dst[i * 4 + 2] = (unsigned char)nTemp;
				puc_dst[i * 4 + 3] = 255;
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);


				puc_dst[i * 4] = PseudoTableRGB[nPseudoNo][nTemp][0];
				puc_dst[i * 4 + 1] = PseudoTableRGB[nPseudoNo][nTemp][1];
				puc_dst[i * 4 + 2] = PseudoTableRGB[nPseudoNo][nTemp][2];
				puc_dst[i * 4 + 3] = 255;
			}
		}
	}
	else if (nImgType == ITA_RGB888)
	{
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
				puc_dst[3 * i] = (unsigned char)nTemp;
				puc_dst[3 * i + 1] = (unsigned char)nTemp;
				puc_dst[3 * i + 2] = (unsigned char)nTemp;
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);
				puc_dst[3 * i] = PseudoTableRGB[nPseudoNo][nTemp][0];
				puc_dst[3 * i + 1] = PseudoTableRGB[nPseudoNo][nTemp][1];
				puc_dst[3 * i + 2] = PseudoTableRGB[nPseudoNo][nTemp][2];
			}
		}
	}
	else if (nImgType == ITA_RGB565)
	{
		unsigned char r, g, b;
		short* dst = (short*)puc_dst;

		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
				r = (unsigned char)nTemp;
				g = (unsigned char)nTemp;
				b = (unsigned char)nTemp;
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);
				r = PseudoTableRGB[nPseudoNo][nTemp][0];
				g = PseudoTableRGB[nPseudoNo][nTemp][1];
				b = PseudoTableRGB[nPseudoNo][nTemp][2];
			}
			//puc_dst����rgb��˳��
			*(dst + i) = ((r >> 3) << 11) | ((g >> 2) << 5) | (b >> 3);
		}

	}
	else if (ITA_YUV422_YUYV == nImgType)
	{
		//YUV422_YUYV 
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

				puc_dst[i * 2 + 0] = PseudoTableYUV[0][nTemp][0];
				if (i % 2 == 0)
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[0][nTemp][1];
				}
				else
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[0][nTemp][2];
				}
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

				puc_dst[i * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][0];
				if (i % 2 == 0)
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][1];
				}
				else
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}
	else if (ITA_YUV422_UYVY == nImgType)
	{	// YUV422_UYVY 
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

				puc_dst[i * 2 + 0] = PseudoTableYUV[0][nTemp][0];
				if (i % 2 == 0)
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[0][nTemp][2];
				}
				else
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[0][nTemp][1];
				}
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

				puc_dst[i * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][0];
				if (i % 2 == 0)
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
				else
				{
					puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][1];
				}
			}
		}
	}
	else if (ITA_YUV422_Plane == nImgType)
	{	// YUV422_Plane, �ȴ�Yͨ�����е�ֵ���ٴ�Uͨ�����ٴ�Vͨ�� 
		unsigned char* Y = puc_dst;
		unsigned char* U = puc_dst + nLen;
		unsigned char* V = puc_dst + nLen * 3 / 2;

		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

				Y[i] = PseudoTableYUV[0][nTemp][0];
				if (i % 2 == 0)
				{
					U[i / 2] = PseudoTableYUV[0][nTemp][1];
					V[i / 2] = PseudoTableYUV[0][nTemp][2];
				}
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

				Y[i] = PseudoTableYUV[nPseudoNo][nTemp][0];
				if (i % 2 == 0)
				{
					U[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][1];
					V[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}
	else if (ITA_YVU422_Plane == nImgType)
	{	// YVU422_Plane, �ȴ�Yͨ�����е�ֵ���ٴ�Vͨ�����ٴ�Uͨ�� 
		unsigned char* Y = puc_dst;
		unsigned char* V = puc_dst + nLen;
		unsigned char* U = puc_dst + nLen * 3 / 2;
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

			if (pus_src[i] < nDownY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

				Y[i] = PseudoTableYUV[0][nTemp][0];
				if (i % 2 == 0)
				{
					U[i / 2] = PseudoTableYUV[0][nTemp][1];
					V[i / 2] = PseudoTableYUV[0][nTemp][2];
				}
			}
			else
			{
				nTemp = ((nK * (pus_src[i] - nDownY16)) >> nZoom) + nY8Min;
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

				Y[i] = PseudoTableYUV[nPseudoNo][nTemp][0];
				if (i % 2 == 0)
				{
					U[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][1];
					V[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}
	else if (nImgType == ITA_YUV420_YUYV)
	{
		unsigned char* y = puc_dst;
		unsigned char* uv = puc_dst + n_width * n_height;
		int num, nIndex;
		int widthhalf = n_width / 2;

		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nIndex = i * n_width + j;
				nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

				if (pus_src[nIndex] < nDownY16)
				{
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);

					y[nIndex] = PseudoTableYUV[0][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						uv[num * 2 + 0] = PseudoTableYUV[0][nTemp][1];
						uv[num * 2 + 1] = PseudoTableYUV[0][nTemp][2];
					}
				}
				else
				{
					nTemp = ((nK * (pus_src[nIndex] - nDownY16)) >> nZoom) + nY8Min;
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

					y[nIndex] = PseudoTableYUV[nPseudoNo][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						uv[num * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][1];
						uv[num * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][2];
					}
				}

			}
		}
	}
	else if (nImgType == ITA_YUV420_UYVY)
	{
		unsigned char* y = puc_dst;
		unsigned char* uv = puc_dst + n_width * n_height;
		int num, nIndex;
		int widthhalf = n_width / 2;
		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nIndex = i * n_width + j;
				nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

				if (pus_src[nIndex] < nDownY16)
				{
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);

					y[nIndex] = PseudoTableYUV[0][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						uv[num * 2 + 0] = PseudoTableYUV[0][nTemp][1];
						uv[num * 2 + 1] = PseudoTableYUV[0][nTemp][2];
					}
				}
				else
				{
					nTemp = ((nK * (pus_src[nIndex] - nDownY16)) >> nZoom) + nY8Min;
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

					y[nIndex] = PseudoTableYUV[nPseudoNo][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						uv[num * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][1];
						uv[num * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][2];
					}
				}

			}
		}
	}
	else if (nImgType == ITA_YUV420_Plane)
	{
		unsigned char* y = puc_dst;
		unsigned char* u = puc_dst + n_width * n_height;
		unsigned char* v = puc_dst + n_width * n_height * 5 / 4;
		int num, nIndex;
		int widthhalf = n_width / 2;

		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nIndex = i * n_width + j;
				nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

				if (pus_src[nIndex] < nDownY16)
				{
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);

					y[nIndex] = PseudoTableYUV[0][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[0][nTemp][1];
						v[num] = PseudoTableYUV[0][nTemp][2];
					}
				}
				else
				{
					nTemp = ((nK * (pus_src[nIndex] - nDownY16)) >> nZoom) + nY8Min;
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);
					y[nIndex] = PseudoTableYUV[nPseudoNo][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[nPseudoNo][nTemp][1];
						v[num] = PseudoTableYUV[nPseudoNo][nTemp][2];
					}
				}

			}
		}
	}
	else if (nImgType == ITA_YVU420_Plane)
	{
		unsigned char* y = puc_dst;
		unsigned char* u = puc_dst + n_width * n_height * 5 / 4;
		unsigned char* v = puc_dst + n_width * n_height;
		int num, nIndex;
		int widthhalf = n_width / 2;

		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nIndex = i * n_width + j;
				nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

				if (pus_src[nIndex] < nDownY16)
				{
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);

					y[nIndex] = PseudoTableYUV[0][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[0][nTemp][1];
						v[num] = PseudoTableYUV[0][nTemp][2];
					}
				}
				else
				{
					nTemp = ((nK * (pus_src[nIndex] - nDownY16)) >> nZoom) + nY8Min;
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp);

					y[nIndex] = PseudoTableYUV[nPseudoNo][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[nPseudoNo][nTemp][1];
						v[num] = PseudoTableYUV[nPseudoNo][nTemp][2];
					}
				}

			}
		}


	}

	pos_weight_table = NULL;
	nSrcL = NULL;
	nDstDrc = NULL;
}

void CIrFireDrc::DRCFireLow(short* pus_src, unsigned char* puc_dst, int n_width, int n_height)
{
	int i, j;
	int nTemp, nDetail;
	int nLen = n_width * n_height;
	int* pos_weight_table = gIDEPosWeightTable;
	short* nSrcL = gSrcL;
	unsigned char* nDstDrc = gDstDrc;

	int nMixContrastExp = sDrcPara.mixContrastExp;
	int nMixBrightExp = sDrcPara.mixBrightExp;
	int nRestrainRangeThre = sDrcPara.restrainRangeThre;
	int nMixRange = sDrcPara.mixRange;
	int nMidValue = sDrcPara.midValue;
	int nPlatThresh = sDrcPara.platThresh;
	int nUpDiscardRatio = sDrcPara.upDiscardRatio;
	int nDownDiscardRatio = sDrcPara.downDiscardRatio;

	int nPseudoNo = format;
	if (nPseudoNo >= (PSEUDONUM - 2))
	{
		nPseudoNo = (PSEUDONUM - 2);
	}

	int nImgType = format;
	if ((nImgType >= COLORIMGTYPENUM) || (nImgType < 0))
	{
		nImgType = 0;
	}
	int nEnThr = sDrcPara.enThr;
	int nEnCoef = sDrcPara.enCoef;

	GaussianFilter16bit(nSrcL, pus_src, n_width, n_height, 3, pos_weight_table);

	//1.���Զ�����
	DRCMixLow(nDstDrc, pus_src, n_width, n_height, nMixContrastExp, nMixBrightExp, nRestrainRangeThre, nMixRange, nMidValue, nPlatThresh, nUpDiscardRatio, nDownDiscardRatio);

	if (nImgType == ITA_BGR888)
	{
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			puc_dst[3 * i] = PseudoTableRGB[nPseudoNo][nTemp][2];
			puc_dst[3 * i + 1] = PseudoTableRGB[nPseudoNo][nTemp][1];
			puc_dst[3 * i + 2] = PseudoTableRGB[nPseudoNo][nTemp][0];
			//puc_dst����bgr��˳��
		}
	}
	else if (nImgType == ITA_RGBA8888)
	{
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			puc_dst[i * 4] = PseudoTableRGB[nPseudoNo][nTemp][0];
			puc_dst[i * 4 + 1] = PseudoTableRGB[nPseudoNo][nTemp][1];
			puc_dst[i * 4 + 2] = PseudoTableRGB[nPseudoNo][nTemp][2];
			puc_dst[i * 4 + 3] = 255;
			//puc_dst����rgba��˳��
		}
	}
	else if (nImgType == ITA_RGB888)
	{
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			puc_dst[3 * i] = PseudoTableRGB[nPseudoNo][nTemp][0];
			puc_dst[3 * i + 1] = PseudoTableRGB[nPseudoNo][nTemp][1];
			puc_dst[3 * i + 2] = PseudoTableRGB[nPseudoNo][nTemp][2];
			//puc_dst����rgb��˳��
		}
	}
	else if (nImgType == ITA_RGB565)
	{
		unsigned char r, g, b;
		short* dst = (short*)puc_dst;
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			r = PseudoTableRGB[nPseudoNo][nTemp][0];
			g = PseudoTableRGB[nPseudoNo][nTemp][1];
			b = PseudoTableRGB[nPseudoNo][nTemp][2];
			//puc_dst����rgb��˳��
			*(dst + i) = ((r >> 3) << 11) | ((g >> 2) << 5) | (b >> 3);
		}
	}
	else if (ITA_YUV422_YUYV == nImgType)
	{ // YUV422_YUYV 
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			puc_dst[i * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][0];
			if (i % 2 == 0)
			{
				puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][1];
			}
			else
			{
				puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][2];
			}
		}
	}
	else if (ITA_YUV422_UYVY == nImgType)
	{	// YUV422_UYVY 
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			puc_dst[i * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][0];
			if (i % 2 == 0)
			{
				puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][2];
			}
			else
			{
				puc_dst[i * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][1];
			}
		}
	}
	else if (ITA_YUV422_Plane == nImgType)
	{	// YUV422_Plane, �ȴ�Yͨ�����е�ֵ���ٴ�Uͨ�����ٴ�Vͨ�� 
		unsigned char* Y = puc_dst;
		unsigned char* U = puc_dst + nLen;
		unsigned char* V = puc_dst + nLen * 3 / 2;
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			Y[i] = PseudoTableYUV[nPseudoNo][nTemp][0];
			if (i % 2 == 0)
			{
				U[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][1];
				V[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][2];
			}
		}
	}
	else if (ITA_YVU422_Plane == nImgType)
	{	// YVU422_Plane, �ȴ�Yͨ�����е�ֵ���ٴ�Vͨ�����ٴ�Uͨ�� 
		unsigned char* Y = puc_dst;
		unsigned char* V = puc_dst + nLen;
		unsigned char* U = puc_dst + nLen * 3 / 2;
		for (i = 0; i < nLen; i++)
		{
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);

			Y[i] = PseudoTableYUV[nPseudoNo][nTemp][0];
			if (i % 2 == 0)
			{
				U[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][1];
				V[i / 2] = PseudoTableYUV[nPseudoNo][nTemp][2];
			}
		}
	}
	else if (nImgType == ITA_YUV420_YUYV)
	{
		unsigned char* y = puc_dst;
		unsigned char* uv = puc_dst + n_width * n_height;
		int num;
		int widthhalf = n_width / 2;
		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nDetail = min_ir(max_ir(pus_src[i * n_width + j] - nSrcL[i * n_width + j], -nEnThr), nEnThr);
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i * n_width + j]);

				y[i * n_width + j] = PseudoTableYUV[nPseudoNo][nTemp][0];

				if ((i % 2 == 0) && (j % 2 == 0))
				{
					num = i / 2 * widthhalf + j / 2;
					uv[num * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][1];
					uv[num * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}
	else if (nImgType == ITA_YUV420_UYVY)
	{
		unsigned char* y = puc_dst;
		unsigned char* uv = puc_dst + n_width * n_height;
		int num;
		int widthhalf = n_width / 2;
		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nDetail = min_ir(max_ir(pus_src[i * n_width + j] - nSrcL[i * n_width + j], -nEnThr), nEnThr);
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i * n_width + j]);

				y[i * n_width + j] = PseudoTableYUV[nPseudoNo][nTemp][0];

				if ((i % 2 == 0) && (j % 2 == 0))
				{
					num = i / 2 * widthhalf + j / 2;
					uv[num * 2 + 1] = PseudoTableYUV[nPseudoNo][nTemp][1];
					uv[num * 2 + 0] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}
	else if (nImgType == ITA_YUV420_Plane)
	{
		unsigned char* y = puc_dst;
		unsigned char* u = puc_dst + n_width * n_height;
		unsigned char* v = puc_dst + n_width * n_height * 5 / 4;
		int num;
		int widthhalf = n_width / 2;
		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nDetail = min_ir(max_ir(pus_src[i * n_width + j] - nSrcL[i * n_width + j], -nEnThr), nEnThr);
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i * n_width + j]);

				y[i * n_width + j] = PseudoTableYUV[nPseudoNo][nTemp][0];

				if ((i % 2 == 0) && (j % 2 == 0))
				{
					num = i / 2 * widthhalf + j / 2;
					u[num] = PseudoTableYUV[nPseudoNo][nTemp][1];
					v[num] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}
	else if (nImgType == ITA_YVU420_Plane)
	{
		unsigned char* y = puc_dst;
		unsigned char* u = puc_dst + n_width * n_height * 5 / 4;
		unsigned char* v = puc_dst + n_width * n_height;
		int num;
		int widthhalf = n_width / 2;
		for (i = 0; i < n_height; i++)
		{
			for (j = 0; j < n_width; j++)
			{
				nDetail = min_ir(max_ir(pus_src[i * n_width + j] - nSrcL[i * n_width + j], -nEnThr), nEnThr);
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i * n_width + j]);

				y[i * n_width + j] = PseudoTableYUV[nPseudoNo][nTemp][0];

				if ((i % 2 == 0) && (j % 2 == 0))
				{
					num = i / 2 * widthhalf + j / 2;
					u[num] = PseudoTableYUV[nPseudoNo][nTemp][1];
					v[num] = PseudoTableYUV[nPseudoNo][nTemp][2];
				}
			}
		}
	}

	pos_weight_table = NULL;
	nSrcL = NULL;
	nDstDrc = NULL;
}


long CIrFireDrc::PutDrcPara(ITAFireDRCParam sPara)
{
	if (sPara.filterStd != sDrcPara.filterStd)
	{
		GetGuassPosWeightTable(gIDEPosWeightTable, 3, 3, sPara.filterStd);
	}

	memcpy(&sDrcPara, &sPara, sizeof(ITAFireDRCParam));

	if (paletteType >= PSEUDONUM)
	{
		paletteType = ITA_FIRE_FIRE;
	}

	if ((paletteType >= COLORIMGTYPENUM) || (paletteType < 0))
	{
		format = ITA_BGR888;
	}
	return 1;
}

long CIrFireDrc::GetDrcPara(ITAFireDRCParam* sPara)
{
	if (sPara == NULL)
		return ITA_NULL_PTR_ERR;

	memcpy(sPara, &sDrcPara, sizeof(ITAFireDRCParam));
	return ITA_OK;
}

void CIrFireDrc::DRCMixForZC17A(unsigned char* puc_dst, short* pus_src, int& Y16mean, int& DiscMax, int& DiscMin, int n_width, int n_height, int nMixContrastExp, int nMixBrightExp, int nRestrainRangeThre,
	int n_mixrange, int nMidValue, int nPlatThresh, int nUpDiscardRatio, int nDownDiscardRatio, int nDownY16)
{
	int i = 0;
	int n_len = n_width * n_height;
	int nGrayRange = 0;  //�׵���?��Χ    
	int nBright = 0;
	int nContrast = 0;
	int nCompensate = 0;//64;  //��̬������̬��Χ����ֵ����ֹ��̬��Χ��Сʱ������ͼ��Աȶȹ��������
	int nGrayMean = 0;
	int nOriMax = 0;
	int nOriMin = 0;
	int nDiscMax = 0;
	int nDiscMin = 0;
	int nIndex;
	int nY8start;
	int nY8Range;
	int nZoom = 1024;
	int nHistCumMax;
	unsigned short aHist[GRAYLEVEL_16BIT] = { 0 };
	unsigned int pHistCum[GRAYLEVEL_16BIT] = { 0 };
	unsigned char pMapTable[GRAYLEVEL_16BIT] = { 0 };

	// ͳ��ֱ��ͼ
	GetHist(aHist, &nOriMax, &nOriMin, &nDiscMax, &nDiscMin, &nGrayMean, pus_src, n_width, n_height, GRAYLEVEL_16BIT, nUpDiscardRatio, nDownDiscardRatio, nDownY16);
	nGrayRange = nDiscMax - nDiscMin + 1;
	Y16mean = nGrayMean;
	DiscMax = nDiscMax;
	DiscMin = nDiscMin;
	if (gCurFrameNum < FRAME_SMOOTH_NUM)
	{
		gRangeSmooth[gCurFrameNum] = nGrayRange;
		nGrayRange = 0;
		for (i = 0; i < (gCurFrameNum + 1); i++)
		{
			nGrayRange += gRangeSmooth[i];
		}
		nGrayRange /= (gCurFrameNum + 1);
	}
	else
	{
		memcpy(gRangeSmooth, gRangeSmooth + 1, (FRAME_SMOOTH_NUM - 1) * sizeof(int));
		gRangeSmooth[FRAME_SMOOTH_NUM - 1] = nGrayRange;
		nGrayRange = 0;
		for (i = 0; i < FRAME_SMOOTH_NUM; i++)
		{
			nGrayRange += gRangeSmooth[i];
		}
		nGrayRange /= FRAME_SMOOTH_NUM;
	}
	gCurFrameNum++;

	//// ����Ӧ���㲹����
	if (nGrayRange < nRestrainRangeThre)
	{
		nCompensate = nRestrainRangeThre - nGrayRange;
	}
	else
	{
		nCompensate = 0;
	}
	nContrast = nZoom * nMixContrastExp / (nGrayRange + nCompensate * 4);

	// ���Աȶ�����
	if (nContrast > nZoom * gMaxContrast)
	{
		nContrast = nZoom * gMaxContrast;
	}
	nBright = nMixBrightExp - (nGrayMean * nContrast) / nZoom;

	// ƽ̨��ֵ�������ۼ�
	unsigned int temp = 0;
	for (i = nOriMin; i <= nOriMax; i++)
	{
		nIndex = i + gOffset;
		if (aHist[nIndex] > nPlatThresh)   //ĳһ�Ҷȼ�ֱ��ͼ��������ƽ̨��ֵ
		{
			aHist[nIndex] = (unsigned short)nPlatThresh;
		}
		temp += aHist[nIndex];     //ֱ��ͼǰ����ۼӺ�?
		pHistCum[nIndex] = temp;
	}
	nHistCumMax = (int)(pHistCum[nDiscMax + gOffset]);

	//��ֹ����Ϊ0
	if (nHistCumMax == 0)
	{
		memset(puc_dst, 0, n_len * sizeof(unsigned char));
		return;
	}
	//���� ��Y16��̬��Χ��Сʱ��Сֱ��ͼ����ĳ̶ȣ����ƹ���?
	//if (nGrayRange < n_mixrange)
	//{
	//	n_mixrange = nGrayRange;
	//}

	// ����ӦȨֵ
	int nAlpha = 0;
	int nThrHigh = 300;
	int nThrLow = 100;
	int nThrLowL = int(nThrLow * 0.2);
	if (nGrayRange >= nThrHigh)
	{
		nAlpha = 204;
	}
	else if (nGrayRange < nThrHigh && nGrayRange > nThrLow)
	{
		nAlpha = 616 * (nThrHigh - nGrayRange) / (nThrHigh - nThrLow) + 204;
	}
	else if (nGrayRange > nThrLowL && nGrayRange <= nThrLow)
	{
		nAlpha = 204 * (nThrLow - nGrayRange) / (nThrLow - nThrLowL) + 820;
	}
	else if (nGrayRange <= nThrLowL)
	{
		nAlpha = 1024;
	}
	int nBeta = 1024 - nAlpha;

	nY8Range = n_mixrange;
	nY8start = nMidValue - nY8Range / 2;
	short nHistMapValue;
	short nLinearMapValue;
	for (i = nOriMin; i <= nOriMax; i++)
	{
		nIndex = i + gOffset;
		nHistMapValue = short(((pHistCum[nIndex] * nY8Range / nHistCumMax)) + nY8start);
		nLinearMapValue = short(((nContrast * i) >> 10) + nBright);
		pMapTable[nIndex] = (unsigned char)(ClipU8((nAlpha * nLinearMapValue + nBeta * nHistMapValue) >> 10));
	}
	//С��nOriMin�ĸ�ֵ0������nOriMax�ĸ�ֵ�����Ӧ�?
	for (i = nOriMax + gOffset; i < GRAYLEVEL_16BIT; i++) {
		nIndex = i;
		pMapTable[nIndex] = pMapTable[nOriMax + gOffset];
	}

	unsigned char* pMapTablePtr = pMapTable + gOffset;
	for (i = 0; i < n_len; i++)
	{
		//puc_dst[i] = pMapTable[pus_src[i] + gOffset];
		puc_dst[i] = *(pMapTablePtr + pus_src[i]);
	}
}

// ITA_RESULT  CIrFireDrc::DrcFireAdaptive2DifferentMode(short* pus_src, unsigned char* puc_dst,int n_width, int n_height, 
// int MaxTemperY16, int ThreshY16, ITAFireWorkMode work_mode, ITAFirePaletteType pesudo,ITA_PIXEL_FORMAT imgtype)
ITA_RESULT  CIrFireDrc::DrcFireAdaptive2DifferentMode(short* pus_src, unsigned char* puc_dst, int n_width, int n_height,
	int MaxTemperY16, int ThreshY16, ITAFireWorkMode work_mode, ITAFirePaletteType pesudo)
{
	if ((MaxTemperY16 - ThreshY16) <= 0)
	{
		return ITA_ARG_OUT_OF_RANGE;
	}
	int i, j;
	int nTemp, nDetail;
	int nY8Min = 0;
	int nY8Max = 255;
	int nLen = n_width * n_height;
	int* pos_weight_table = gIDEPosWeightTable;
	int* pos_1dweight_table = gIDePos1DweightTable;
	short* nSrcL = gSrcL;
	unsigned char* nDstDrc = gDstDrc;

	int nMixContrastExp = sDrcPara.mixContrastExp;
	int nMixBrightExp = gExpectBrightness;
	int nRestrainRangeThre = sDrcPara.restrainRangeThre;
	int nMixRange = sDrcPara.mixRange;
	int nMidValue = sDrcPara.midValue;
	int nPlatThresh = sDrcPara.platThresh;
	int nUpDiscardRatio = sDrcPara.upDiscardRatio;
	int nDownDiscardRatio = sDrcPara.downDiscardRatio;
	int nEnThr = sDrcPara.enThr;
	int nEnCoef = sDrcPara.enCoef;
	// format = imgtype;
	format = ITA_YUV420_Plane;
	//int nImgType = sDrcPara.imgType;

	float colorLocR[WORKMODE];
	bool ifTwoPseudoRender = false;
	int usePseudoSn01 = ITA_FIRE_WHITEHOT;
	int usePseudoSn02 = 0;
	switch (work_mode)
	{
	case BASE_FIRE_MODE:
		ifTwoPseudoRender = true;
		usePseudoSn02 = ITA_FIRE_FIRE;
		break;
	case BLACK_FIRE_EXTINGUISHING_MODE:
		break;
	case FIRE_DANGER_MODE:
		ifTwoPseudoRender = true;
		usePseudoSn02 = ITA_FIRE_FIRE;
		break;
	case RESCUE_MODE:
		ifTwoPseudoRender = true;
		usePseudoSn02 = ITA_FIRE_FIRE;
		break;
	case HEAT_DETECT_MODE:
		ifTwoPseudoRender = true;
		usePseudoSn02 = ITA_FIRE_TINT3;
		break;
	case STANDART_FIRE_MODE:
		usePseudoSn01 = pesudo;
		break;
	default:
		break;
	}

	FastGaussianFilter16bit(nSrcL, pus_src, n_width, n_height, 3, pos_1dweight_table);

	//1.���Զ�����
	int gY16Mean = 0;
	int DiscMax = 0, DiscMin = 0;

	DRCMixForZC17A(nDstDrc, pus_src, gY16Mean, DiscMax, DiscMin, n_width, n_height, nMixContrastExp, nMixBrightExp, nRestrainRangeThre, nMixRange,
		nMidValue, nPlatThresh, nUpDiscardRatio, nDownDiscardRatio, ThreshY16);
	//�������Ե����е��������Ȳ���
	if (work_mode == STANDART_FIRE_MODE)
		gExpectBrightness = AdaptiveLinearBrightExp(gY16Mean, MaxTemperY16, ThreshY16);

	int per20Y16 = 0; // �ȼ��ģ�?%20�ֽ��?
	if (work_mode == HEAT_DETECT_MODE) {
		int discScale = DiscMax - DiscMin;
		per20Y16 = DiscMax - discScale * 0.2;
		ThreshY16 = per20Y16;
		MaxTemperY16 = DiscMax;
	}

	//2.���ֶ����Ⲣ����α��
	int nK = (nY8Max << 6) / (MaxTemperY16 - ThreshY16);
#if 0
	if (sDrcPara.imgType == ITA_BGR888)
	{

		//��ɫ����Ⱦģʽ
		if (ifTwoPseudoRender == false) {
			for (i = 0; i < nLen; i++) {
				nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
				puc_dst[3 * i] = PseudoTableRGB[usePseudoSn01][nTemp][2];
				puc_dst[3 * i + 1] = PseudoTableRGB[usePseudoSn01][nTemp][1];
				puc_dst[3 * i + 2] = PseudoTableRGB[usePseudoSn01][nTemp][0];
			}

		}
		//˫ɫ����Ⱦģʽ
		else {
			for (i = 0; i < nLen; i++)
			{
				nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

				if (nSrcL[i] < ThreshY16)
				{
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
					puc_dst[3 * i] = PseudoTableRGB[usePseudoSn01][nTemp][2];
					puc_dst[3 * i + 1] = PseudoTableRGB[usePseudoSn01][nTemp][1];
					puc_dst[3 * i + 2] = PseudoTableRGB[usePseudoSn01][nTemp][0];
				}
				else
				{
					nTemp = int(nK * (nSrcL[i] - ThreshY16));
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp >> 6);
					puc_dst[3 * i] = PseudoTableRGB[usePseudoSn02][nTemp][2];
					puc_dst[3 * i + 1] = PseudoTableRGB[usePseudoSn02][nTemp][1];
					puc_dst[3 * i + 2] = PseudoTableRGB[usePseudoSn02][nTemp][0];
				}
			}
		}
	}
#else
	if (Enimage == NULL)
	{
		Enimage = (unsigned short*)porting_calloc_mem(nLen, sizeof(unsigned short), ITA_IMAGE_MODULE);
		//printf("Enimage malloc !!! \n");
	}

	if (format == ITA_BGR888)
	{
		//��ɫ����Ⱦģʽ
		if (ifTwoPseudoRender == false)
		{
			for (i = 0; i < nLen; i++)
			{
				nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
				Enimage[i] = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
			}
			for (i = 0; i < nLen - 1; i++)
			{
				nTemp = Enimage[i];
				uint32_t* p = (uint32_t*)&ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][0];
				uint32_t* q = (uint32_t*)&puc_dst[i * 3];
				*q = *p;
			}
			i = nLen - 1;
			nTemp = Enimage[i];
			puc_dst[i * 3 + 2] = ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][2];
			puc_dst[i * 3 + 1] = ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][1];
			puc_dst[i * 3 + 0] = ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][0];
		}
		//˫ɫ����Ⱦģʽ
		else {
			for (i = 0; i < nLen - 1; i++)
			{
				nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);

				if (nSrcL[i] < ThreshY16)
				{
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
					uint32_t* p = (uint32_t*)&ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][0];
					uint32_t* q = (uint32_t*)&puc_dst[i * 3];
					*q = *p;
				}
				else
				{
					nTemp = int(nK * (nSrcL[i] - ThreshY16));
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp >> 6);
					uint32_t* p = (uint32_t*)&ZC17APseudoColorTableBGRA[usePseudoSn02][nTemp][0];
					uint32_t* q = (uint32_t*)&puc_dst[i * 3];
					*q = *p;
				}
			}
			i = nLen - 1;
			nDetail = min_ir(max_ir(pus_src[i] - nSrcL[i], -nEnThr), nEnThr);
			if (nSrcL[i] < ThreshY16)
			{
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[i]);
				puc_dst[i * 3 + 2] = ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][2];
				puc_dst[i * 3 + 1] = ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][1];
				puc_dst[i * 3 + 0] = ZC17APseudoColorTableBGRA[usePseudoSn01][nTemp][0];
			}
			else {
				nTemp = int(nK * (nSrcL[i] - ThreshY16));
				nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp >> 6);
				puc_dst[i * 3 + 2] = ZC17APseudoColorTableBGRA[usePseudoSn02][nTemp][2];
				puc_dst[i * 3 + 1] = ZC17APseudoColorTableBGRA[usePseudoSn02][nTemp][1];
				puc_dst[i * 3 + 0] = ZC17APseudoColorTableBGRA[usePseudoSn02][nTemp][0];
			}
		}
	}
	else if (format == ITA_YUV420_Plane) {
		unsigned char* y = puc_dst;
		unsigned char* u = puc_dst + n_width * n_height;
		unsigned char* v = puc_dst + n_width * n_height * 5 / 4;
		int num, nIndex;
		int widthhalf = n_width / 2;
		int i, j;
		//��ɫ����Ⱦģʽ
		if (ifTwoPseudoRender == false)
		{
#if 0
			for (i = 0; i < n_height; i++)
			{
				for (j = 0; j < n_width; j++)
				{
					nIndex = i * n_width + j;
					nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);
					y[nIndex] = PseudoTableYUV[usePseudoSn01][nTemp][0];

					if ((i % 2 == 0) && (j % 2 == 0))
					{
						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[usePseudoSn01][nTemp][1];
						v[num] = PseudoTableYUV[usePseudoSn01][nTemp][2];
					}
				}
			}
#else
			for (i = 0; i < n_height; i++)
			{
				for (j = 0; j < n_width; j++)
				{
					nIndex = i * n_width + j;
					nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);
					y[nIndex] = PseudoTableYUV[usePseudoSn01][nTemp][0];
				}
			}
			for (i = 0; i < n_height; i += 2)
			{
				for (j = 0; j < n_width; j += 2)
				{
					nIndex = i * n_width + j;
					nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);
					nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);

					num = i / 2 * widthhalf + j / 2;
					u[num] = PseudoTableYUV[usePseudoSn01][nTemp][1];
					v[num] = PseudoTableYUV[usePseudoSn01][nTemp][2];
				}
			}
#endif
		}
		//˫ɫ����Ⱦģʽ
		else {
#if 0
			for (i = 0; i < n_height; i++)
			{
				for (j = 0; j < n_width; j++)
				{
					nIndex = i * n_width + j;
					nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

					if (nSrcL[nIndex] < ThreshY16)
					{
						nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);
						y[nIndex] = PseudoTableYUV[usePseudoSn01][nTemp][0];

						if ((i % 2 == 0) && (j % 2 == 0))
						{
							num = i / 2 * widthhalf + j / 2;
							u[num] = PseudoTableYUV[usePseudoSn01][nTemp][1];
							v[num] = PseudoTableYUV[usePseudoSn01][nTemp][2];
						}
					}
					else
					{
						nTemp = int(nK * (nSrcL[nIndex] - ThreshY16));
						nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp >> 6);
						y[nIndex] = PseudoTableYUV[usePseudoSn02][nTemp][0];

						if ((i % 2 == 0) && (j % 2 == 0))
						{
							num = i / 2 * widthhalf + j / 2;
							u[num] = PseudoTableYUV[usePseudoSn02][nTemp][1];
							v[num] = PseudoTableYUV[usePseudoSn02][nTemp][2];
						}
					}
				}
			}
#else
			for (i = 0; i < n_height; i++)
			{
				for (j = 0; j < n_width; j++)
				{
					nIndex = i * n_width + j;
					nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

					if (nSrcL[nIndex] < ThreshY16)
					{
						nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);
						y[nIndex] = PseudoTableYUV[usePseudoSn01][nTemp][0];
					}
					else
					{
						nTemp = int(nK * (nSrcL[nIndex] - ThreshY16));
						nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp >> 6);
						y[nIndex] = PseudoTableYUV[usePseudoSn02][nTemp][0];
					}
				}
			}
			for (i = 0; i < n_height; i += 2)
			{
				for (j = 0; j < n_width; j += 2)
				{
					nIndex = i * n_width + j;
					nDetail = min_ir(max_ir(pus_src[nIndex] - nSrcL[nIndex], -nEnThr), nEnThr);

					if (nSrcL[nIndex] < ThreshY16)
					{
						nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nDstDrc[nIndex]);

						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[usePseudoSn01][nTemp][1];
						v[num] = PseudoTableYUV[usePseudoSn01][nTemp][2];
					}
					else
					{
						nTemp = int(nK * (nSrcL[nIndex] - ThreshY16));
						nTemp = ClipU8(((nEnCoef * nDetail) >> 4) + nTemp >> 6);

						num = i / 2 * widthhalf + j / 2;
						u[num] = PseudoTableYUV[usePseudoSn02][nTemp][1];
						v[num] = PseudoTableYUV[usePseudoSn02][nTemp][2];
					}
				}
			}
#endif
		}

	}
#endif
	return ITA_OK;
}

ITA_RESULT CIrFireDrc::CalcROITemperBarHeightSimplify(int centerY16, ITAY16TempMap map, ITAFireWorkMode workMode, float* barHeight)
{
	*barHeight = 0.01f;
	// 极值判断和处理
	if (centerY16 < map.y16minus20)
	{
		*barHeight = 0;
	}
	else if (centerY16 > map.y16_2000) {
		*barHeight = 1;
	}
	else;
	if (map.y16_0 >= map.y16_650 || map.y16_150 == map.y16_650 || map.y16_0 == map.y16_650)
		return ITA_ERROR;

	int heightGear = 0;
	int downY16 = map.y16_0;
	int upY16 = map.y16_150;
	switch (workMode)
	{
	case BASE_FIRE_MODE:case BLACK_FIRE_EXTINGUISHING_MODE:case STANDART_FIRE_MODE:
		if (centerY16 > map.y16_150 && centerY16 <= map.y16_300) {
			downY16 = map.y16_150;
			upY16 = map.y16_300;
			heightGear = 1;
		}
		else if (centerY16 > map.y16_300 && centerY16 <= map.y16_450) {
			downY16 = map.y16_300;
			upY16 = map.y16_450;
			heightGear = 2;
		}
		else if (centerY16 > map.y16_450 && centerY16 <= map.y16_650) {
			downY16 = map.y16_450;
			upY16 = map.y16_650;
			heightGear = 3;
		}
		else if (centerY16 > map.y16_650) {
			downY16 = map.y16_650;
			upY16 = map.y16_2000;
			heightGear = 4;
		}
		else;
		break;
	case FIRE_DANGER_MODE:
		if (centerY16 <= map.y16_250) {
			downY16 = map.y16_0;
			upY16 = map.y16_250;
			heightGear = 0;
		}
		else if (centerY16 > map.y16_250 && centerY16 <= map.y16_400) {
			downY16 = map.y16_250;
			upY16 = map.y16_400;
			heightGear = 1;
		}
		else if (centerY16 > map.y16_400 && centerY16 <= map.y16_500) {
			downY16 = map.y16_400;
			upY16 = map.y16_500;
			heightGear = 2;
		}
		else if (centerY16 > map.y16_500 && centerY16 <= map.y16_650) {
			downY16 = map.y16_500;
			upY16 = map.y16_650;
			heightGear = 3;
		}
		else if (centerY16 > map.y16_650) {
			downY16 = map.y16_650;
			upY16 = map.y16_2000;
			heightGear = 4;
		}
		else;
		break;
	case RESCUE_MODE:case HEAT_DETECT_MODE:
		if (centerY16 <= map.y16_100) {
			downY16 = map.y16_0;
			upY16 = map.y16_100;
			heightGear = 0;
		}
		else if (centerY16 > map.y16_100 && centerY16 <= map.y16_125) {
			downY16 = map.y16_100;
			upY16 = map.y16_125;
			heightGear = 1;
		}
		else if (centerY16 > map.y16_125 && centerY16 <= map.y16_150) {
			downY16 = map.y16_125;
			upY16 = map.y16_150;
			heightGear = 2;
		}
		else if (centerY16 > map.y16_150) {
			downY16 = map.y16_150;
			upY16 = map.y16_650;
			heightGear = 3;
		}
		else;
		break;
	default:
		break;
	}

	float r = (centerY16 - downY16) / float(upY16 - downY16);
	float gamma = 0.6f;
	float r_gamma = powf(r, gamma);
	switch (workMode)
	{
	case BASE_FIRE_MODE:case BLACK_FIRE_EXTINGUISHING_MODE:case STANDART_FIRE_MODE:
		if (heightGear == 0)
			*barHeight = gTemperMarkerLocBase[1] * r_gamma;
		else
			*barHeight = gTemperMarkerLocBase[heightGear] + (gTemperMarkerLocBase[heightGear + 1] - gTemperMarkerLocBase[heightGear]) * r;
		break;
	case FIRE_DANGER_MODE:
		if (heightGear == 0)
			*barHeight = gTemperMarkerLocFire[1] * r_gamma;
		else
			*barHeight = gTemperMarkerLocFire[heightGear] + (gTemperMarkerLocFire[heightGear + 1] - gTemperMarkerLocFire[heightGear]) * r;
		break;
	case RESCUE_MODE:case HEAT_DETECT_MODE:
		if (heightGear == 0)
			*barHeight = gTemperMarkerLocSense[1] * r_gamma;
		else
			*barHeight = gTemperMarkerLocSense[heightGear] + (gTemperMarkerLocSense[heightGear + 1] - gTemperMarkerLocSense[heightGear]) * r;
		break;
	default:
		*barHeight = 0;
		break;
	}
	return ITA_OK;
}

//void CIrFireDrc::RegistryMemoryOp(ITADmaMemoryOp* memoryOp)
//{
//	memcpy(&m_memoryOp, memoryOp, sizeof(ITADmaMemoryOp));
//}

#endif // !FIRE_DRC_EDITION
