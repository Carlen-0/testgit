#include <string>
#include <string.h>
#include "PortingAPI.h"
#include "ITA.h"

void Rgb888To565(unsigned char *pDst, unsigned char *pSrc, int size)
{
	//RGB888转RGB565
	unsigned char r, g, b;
	short *dst = (short *)pDst;
	for (int i = 0; i < size; i++)
	{
		r = *(pSrc + i * 3) * 32 / 256;
		g = *(pSrc + i * 3 + 1) * 64 / 256;
		b = *(pSrc + i * 3 + 2) * 32 / 256;
		*(dst + i) = ((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F);
	}
}

/*
函数功能：实现Y8转YUV422
输入：puc_src，长度w*h
输出：puc_dst，长度w*h*2
暂支持4种YUV排列格式 colorimg_tpye=（YUV422_YUYV、YUV422_UYVY、YUV422_Plane、YVU422_Plane），2种伪彩模式pseudo_color_type=（白热、铁红）
日期：2020.8.24
*/
const unsigned char PseudoColorTableYUV[2][256][4] =
{
	// 0白热 
	{
		{ 16, 128, 128,0 },{ 17, 128, 128,0 },{ 18, 128, 128,0 },{ 19, 128, 128,0 },{ 19, 128, 128,0 },{ 20, 128, 128,0 },{ 21, 128, 128,0 },{ 22, 128, 128,0 },{ 23, 128, 128,0 },{ 24, 128, 128,0 },{ 25, 128, 128,0 },{ 25, 128, 128,0 },{ 26, 128, 128,0 },{ 27, 128, 128,0 },{ 28, 128, 128,0 },{ 29, 128, 128,0 },
		{ 30, 128, 128,0 },{ 31, 128, 128,0 },{ 31, 128, 128,0 },{ 32, 128, 128,0 },{ 33, 128, 128,0 },{ 34, 128, 128,0 },{ 35, 128, 128,0 },{ 36, 128, 128,0 },{ 37, 128, 128,0 },{ 37, 128, 128,0 },{ 38, 128, 128,0 },{ 39, 128, 128,0 },{ 40, 128, 128,0 },{ 41, 128, 128,0 },{ 42, 128, 128,0 },{ 43, 128, 128,0 },
		{ 43, 128, 128,0 },{ 44, 128, 128,0 },{ 45, 128, 128,0 },{ 46, 128, 128,0 },{ 47, 128, 128,0 },{ 48, 128, 128,0 },{ 49, 128, 128,0 },{ 49, 128, 128,0 },{ 50, 128, 128,0 },{ 51, 128, 128,0 },{ 52, 128, 128,0 },{ 53, 128, 128,0 },{ 54, 128, 128,0 },{ 55, 128, 128,0 },{ 55, 128, 128,0 },{ 56, 128, 128,0 },
		{ 57, 128, 128,0 },{ 58, 128, 128,0 },{ 59, 128, 128,0 },{ 60, 128, 128,0 },{ 61, 128, 128,0 },{ 61, 128, 128,0 },{ 62, 128, 128,0 },{ 63, 128, 128,0 },{ 64, 128, 128,0 },{ 65, 128, 128,0 },{ 66, 128, 128,0 },{ 67, 128, 128,0 },{ 68, 128, 128,0 },{ 68, 128, 128,0 },{ 69, 128, 128,0 },{ 70, 128, 128,0 },
		{ 71, 128, 128,0 },{ 72, 128, 128,0 },{ 73, 128, 128,0 },{ 74, 128, 128,0 },{ 74, 128, 128,0 },{ 75, 128, 128,0 },{ 76, 128, 128,0 },{ 77, 128, 128,0 },{ 78, 128, 128,0 },{ 79, 128, 128,0 },{ 80, 128, 128,0 },{ 80, 128, 128,0 },{ 81, 128, 128,0 },{ 82, 128, 128,0 },{ 83, 128, 128,0 },{ 84, 128, 128,0 },
		{ 85, 128, 128,0 },{ 86, 128, 128,0 },{ 86, 128, 128,0 },{ 87, 128, 128,0 },{ 88, 128, 128,0 },{ 89, 128, 128,0 },{ 90, 128, 128,0 },{ 91, 128, 128,0 },{ 92, 128, 128,0 },{ 92, 128, 128,0 },{ 93, 128, 128,0 },{ 94, 128, 128,0 },{ 95, 128, 128,0 },{ 96, 128, 128,0 },{ 97, 128, 128,0 },{ 98, 128, 128,0 },
		{ 98, 128, 128,0 },{ 99, 128, 128,0 },{ 100, 128, 128,0 },{ 101, 128, 128,0 },{ 102, 128, 128,0 },{ 103, 128, 128,0 },{ 104, 128, 128,0 },{ 104, 128, 128,0 },{ 105, 128, 128,0 },{ 106, 128, 128,0 },{ 107, 128, 128,0 },{ 108, 128, 128,0 },{ 109, 128, 128,0 },{ 110, 128, 128,0 },{ 110, 128, 128,0 },{ 111, 128, 128,0 },
		{ 112, 128, 128,0 },{ 113, 128, 128,0 },{ 114, 128, 128,0 },{ 115, 128, 128,0 },{ 116, 128, 128,0 },{ 116, 128, 128,0 },{ 117, 128, 128,0 },{ 118, 128, 128,0 },{ 119, 128, 128,0 },{ 120, 128, 128,0 },{ 121, 128, 128,0 },{ 122, 128, 128,0 },{ 122, 128, 128,0 },{ 123, 128, 128,0 },{ 124, 128, 128,0 },{ 125, 128, 128,0 },
		{ 126, 128, 128,0 },{ 127, 128, 128,0 },{ 128, 128, 128,0 },{ 128, 128, 128,0 },{ 129, 128, 128,0 },{ 130, 128, 128,0 },{ 131, 128, 128,0 },{ 132, 128, 128,0 },{ 133, 128, 128,0 },{ 134, 128, 128,0 },{ 134, 128, 128,0 },{ 135, 128, 128,0 },{ 136, 128, 128,0 },{ 137, 128, 128,0 },{ 138, 128, 128,0 },{ 139, 128, 128,0 },
		{ 140, 128, 128,0 },{ 140, 128, 128,0 },{ 141, 128, 128,0 },{ 142, 128, 128,0 },{ 143, 128, 128,0 },{ 144, 128, 128,0 },{ 145, 128, 128,0 },{ 146, 128, 128,0 },{ 146, 128, 128,0 },{ 147, 128, 128,0 },{ 148, 128, 128,0 },{ 149, 128, 128,0 },{ 150, 128, 128,0 },{ 151, 128, 128,0 },{ 152, 128, 128,0 },{ 152, 128, 128,0 },
		{ 153, 128, 128,0 },{ 154, 128, 128,0 },{ 155, 128, 128,0 },{ 156, 128, 128,0 },{ 157, 128, 128,0 },{ 158, 128, 128,0 },{ 158, 128, 128,0 },{ 159, 128, 128,0 },{ 160, 128, 128,0 },{ 161, 128, 128,0 },{ 162, 128, 128,0 },{ 163, 128, 128,0 },{ 164, 128, 128,0 },{ 165, 128, 128,0 },{ 165, 128, 128,0 },{ 166, 128, 128,0 },
		{ 167, 128, 128,0 },{ 168, 128, 128,0 },{ 169, 128, 128,0 },{ 170, 128, 128,0 },{ 171, 128, 128,0 },{ 171, 128, 128,0 },{ 172, 128, 128,0 },{ 173, 128, 128,0 },{ 174, 128, 128,0 },{ 175, 128, 128,0 },{ 176, 128, 128,0 },{ 177, 128, 128,0 },{ 177, 128, 128,0 },{ 178, 128, 128,0 },{ 179, 128, 128,0 },{ 180, 128, 128,0 },
		{ 181, 128, 128,0 },{ 182, 128, 128,0 },{ 183, 128, 128,0 },{ 183, 128, 128,0 },{ 184, 128, 128,0 },{ 185, 128, 128,0 },{ 186, 128, 128,0 },{ 187, 128, 128,0 },{ 188, 128, 128,0 },{ 189, 128, 128,0 },{ 189, 128, 128,0 },{ 190, 128, 128,0 },{ 191, 128, 128,0 },{ 192, 128, 128,0 },{ 193, 128, 128,0 },{ 194, 128, 128,0 },
		{ 195, 128, 128,0 },{ 195, 128, 128,0 },{ 196, 128, 128,0 },{ 197, 128, 128,0 },{ 198, 128, 128,0 },{ 199, 128, 128,0 },{ 200, 128, 128,0 },{ 201, 128, 128,0 },{ 201, 128, 128,0 },{ 202, 128, 128,0 },{ 203, 128, 128,0 },{ 204, 128, 128,0 },{ 205, 128, 128,0 },{ 206, 128, 128,0 },{ 207, 128, 128,0 },{ 207, 128, 128,0 },
		{ 208, 128, 128,0 },{ 209, 128, 128,0 },{ 210, 128, 128,0 },{ 211, 128, 128,0 },{ 212, 128, 128,0 },{ 213, 128, 128,0 },{ 213, 128, 128,0 },{ 214, 128, 128,0 },{ 215, 128, 128,0 },{ 216, 128, 128,0 },{ 217, 128, 128,0 },{ 218, 128, 128,0 },{ 219, 128, 128,0 },{ 219, 128, 128,0 },{ 220, 128, 128,0 },{ 221, 128, 128,0 },
		{ 222, 128, 128,0 },{ 223, 128, 128,0 },{ 224, 128, 128,0 },{ 225, 128, 128,0 },{ 225, 128, 128,0 },{ 226, 128, 128,0 },{ 227, 128, 128,0 },{ 228, 128, 128,0 },{ 229, 128, 128,0 },{ 230, 128, 128,0 },{ 231, 128, 128,0 },{ 231, 128, 128,0 },{ 232, 128, 128,0 },{ 233, 128, 128,0 },{ 234, 128, 128,0 },{ 235, 128, 128,0 }
	},

	// 1 铁红色（简单） 
	{
		{ 19, 142, 126,0 },{ 20, 143, 126,0 },{ 20, 144, 126,0 },{ 21, 144, 127,0 },{ 21, 145, 127,0 },{ 21, 146, 127,0 },{ 22, 147, 128,0 },{ 22, 147, 128,0 },{ 23, 148, 128,0 },{ 23, 149, 128,0 },{ 24, 150, 129,0 },{ 24, 150, 129,0 },{ 25, 151, 129,0 },{ 25, 152, 130,0 },{ 26, 153, 130,0 },{ 26, 153, 130,0 },
		{ 27, 154, 131,0 },{ 27, 155, 131,0 },{ 28, 156, 131,0 },{ 28, 156, 132,0 },{ 28, 157, 132,0 },{ 29, 158, 132,0 },{ 29, 159, 132,0 },{ 30, 159, 133,0 },{ 30, 160, 133,0 },{ 31, 161, 133,0 },{ 31, 162, 134,0 },{ 32, 162, 134,0 },{ 32, 163, 134,0 },{ 33, 164, 135,0 },{ 33, 165, 135,0 },{ 34, 165, 135,0 },
		{ 34, 166, 136,0 },{ 35, 166, 137,0 },{ 36, 166, 138,0 },{ 36, 166, 139,0 },{ 37, 166, 140,0 },{ 38, 166, 141,0 },{ 38, 166, 142,0 },{ 39, 166, 143,0 },{ 40, 167, 144,0 },{ 41, 167, 145,0 },{ 41, 167, 146,0 },{ 42, 167, 147,0 },{ 43, 167, 148,0 },{ 43, 167, 148,0 },{ 44, 167, 149,0 },{ 45, 167, 150,0 },
		{ 46, 168, 151,0 },{ 46, 168, 152,0 },{ 47, 168, 153,0 },{ 48, 168, 154,0 },{ 48, 168, 155,0 },{ 49, 168, 156,0 },{ 50, 168, 157,0 },{ 50, 168, 158,0 },{ 51, 168, 159,0 },{ 52, 169, 160,0 },{ 53, 169, 161,0 },{ 53, 169, 162,0 },{ 54, 169, 163,0 },{ 55, 169, 164,0 },{ 55, 169, 165,0 },{ 56, 169, 165,0 },
		{ 57, 169, 166,0 },{ 57, 170, 167,0 },{ 58, 170, 168,0 },{ 59, 170, 169,0 },{ 60, 170, 170,0 },{ 60, 170, 171,0 },{ 61, 170, 172,0 },{ 62, 170, 173,0 },{ 62, 170, 174,0 },{ 63, 171, 175,0 },{ 64, 171, 176,0 },{ 64, 171, 177,0 },{ 65, 171, 178,0 },{ 66, 171, 179,0 },{ 67, 171, 180,0 },{ 67, 171, 181,0 },
		{ 68, 171, 182,0 },{ 69, 172, 182,0 },{ 69, 172, 183,0 },{ 70, 172, 184,0 },{ 71, 172, 185,0 },{ 71, 172, 186,0 },{ 72, 172, 187,0 },{ 73, 172, 188,0 },{ 74, 172, 189,0 },{ 74, 173, 190,0 },{ 75, 173, 191,0 },{ 76, 173, 192,0 },{ 76, 173, 193,0 },{ 77, 173, 194,0 },{ 78, 173, 195,0 },{ 78, 173, 196,0 },
		{ 80, 170, 196,0 },{ 81, 167, 197,0 },{ 82, 164, 198,0 },{ 83, 161, 198,0 },{ 84, 157, 199,0 },{ 85, 154, 200,0 },{ 86, 151, 200,0 },{ 87, 148, 201,0 },{ 88, 145, 202,0 },{ 89, 141, 202,0 },{ 91, 138, 203,0 },{ 92, 135, 204,0 },{ 93, 132, 204,0 },{ 94, 129, 205,0 },{ 95, 126, 206,0 },{ 96, 122, 206,0 },
		{ 97, 119, 207,0 },{ 98, 116, 207,0 },{ 99, 113, 208,0 },{ 100, 110, 209,0 },{ 102, 107, 209,0 },{ 103, 103, 210,0 },{ 104, 100, 211,0 },{ 105, 97, 211,0 },{ 106, 94, 212,0 },{ 107, 91, 213,0 },{ 108, 87, 213,0 },{ 109, 84, 214,0 },{ 110, 81, 215,0 },{ 111, 78, 215,0 },{ 113, 75, 216,0 },{ 114, 72, 217,0 },
		{ 115, 71, 216,0 },{ 116, 70, 215,0 },{ 117, 70, 214,0 },{ 118, 69, 214,0 },{ 119, 69, 213,0 },{ 120, 68, 212,0 },{ 121, 68, 212,0 },{ 122, 67, 211,0 },{ 123, 66, 210,0 },{ 124, 66, 209,0 },{ 125, 65, 209,0 },{ 126, 65, 208,0 },{ 127, 64, 207,0 },{ 128, 63, 206,0 },{ 129, 63, 206,0 },{ 130, 62, 205,0 },
		{ 131, 62, 204,0 },{ 132, 61, 203,0 },{ 133, 61, 203,0 },{ 134, 60, 202,0 },{ 135, 59, 201,0 },{ 136, 59, 201,0 },{ 137, 58, 200,0 },{ 138, 58, 199,0 },{ 139, 57, 198,0 },{ 140, 57, 198,0 },{ 141, 56, 197,0 },{ 142, 55, 196,0 },{ 143, 55, 195,0 },{ 144, 54, 195,0 },{ 145, 54, 194,0 },{ 146, 53, 193,0 },
		{ 147, 52, 193,0 },{ 148, 52, 192,0 },{ 149, 51, 191,0 },{ 150, 51, 190,0 },{ 151, 50, 190,0 },{ 152, 50, 189,0 },{ 153, 49, 188,0 },{ 154, 48, 187,0 },{ 155, 48, 187,0 },{ 156, 47, 186,0 },{ 157, 47, 185,0 },{ 158, 46, 184,0 },{ 159, 46, 184,0 },{ 160, 45, 183,0 },{ 161, 44, 182,0 },{ 162, 44, 182,0 },
		{ 163, 43, 181,0 },{ 164, 43, 180,0 },{ 165, 42, 179,0 },{ 166, 41, 179,0 },{ 167, 41, 178,0 },{ 168, 40, 177,0 },{ 169, 40, 176,0 },{ 170, 39, 176,0 },{ 171, 39, 175,0 },{ 172, 38, 174,0 },{ 173, 37, 173,0 },{ 174, 37, 173,0 },{ 175, 36, 172,0 },{ 176, 36, 171,0 },{ 177, 35, 171,0 },{ 178, 34, 170,0 },
		{ 179, 34, 169,0 },{ 180, 33, 168,0 },{ 181, 33, 168,0 },{ 182, 32, 167,0 },{ 183, 32, 166,0 },{ 184, 31, 165,0 },{ 185, 30, 165,0 },{ 186, 30, 164,0 },{ 187, 29, 163,0 },{ 188, 29, 163,0 },{ 189, 28, 162,0 },{ 190, 28, 161,0 },{ 191, 27, 160,0 },{ 192, 26, 160,0 },{ 193, 26, 159,0 },{ 194, 25, 158,0 },
		{ 195, 25, 157,0 },{ 196, 24, 157,0 },{ 197, 23, 156,0 },{ 198, 23, 155,0 },{ 199, 22, 154,0 },{ 200, 22, 154,0 },{ 201, 21, 153,0 },{ 202, 21, 152,0 },{ 203, 20, 152,0 },{ 204, 19, 151,0 },{ 205, 19, 150,0 },{ 206, 18, 149,0 },{ 207, 18, 149,0 },{ 208, 17, 148,0 },{ 209, 17, 147,0 },{ 210, 16, 146,0 },
		{ 211, 19, 146,0 },{ 211, 21, 146,0 },{ 212, 24, 145,0 },{ 212, 27, 145,0 },{ 213, 30, 144,0 },{ 214, 32, 144,0 },{ 214, 35, 143,0 },{ 215, 38, 143,0 },{ 215, 41, 142,0 },{ 216, 43, 142,0 },{ 217, 46, 142,0 },{ 217, 49, 141,0 },{ 218, 52, 141,0 },{ 219, 54, 140,0 },{ 219, 57, 140,0 },{ 220, 60, 139,0 },
		{ 220, 63, 139,0 },{ 221, 65, 138,0 },{ 222, 68, 138,0 },{ 222, 71, 138,0 },{ 223, 74, 137,0 },{ 223, 76, 137,0 },{ 224, 79, 136,0 },{ 225, 82, 136,0 },{ 225, 85, 135,0 },{ 226, 87, 135,0 },{ 226, 90, 134,0 },{ 227, 93, 134,0 },{ 228, 96, 134,0 },{ 228, 98, 133,0 },{ 229, 101, 133,0 },{ 230, 104, 132,0 }
	},
};
void Y8toYUV(unsigned char *puc_dst, unsigned char *puc_src, int height, int width, int pseudo_color_type, ITA_PIXEL_FORMAT colorimg_tpye)
{
	int nLen = height * width;
	int i;
	if (pseudo_color_type < 0 || pseudo_color_type >= 2)
		pseudo_color_type = 0;

	if (ITA_YUV422_YUYV == colorimg_tpye)
	{ // YUV422_YUYV 
		for (i = 0; i < nLen; i++)
		{
			puc_dst[i * 2 + 0] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][0];
			if (i % 2 == 0)
			{
				puc_dst[i * 2 + 1] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][1];
			}
			else
			{
				puc_dst[i * 2 + 1] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][2];
			}
		}
	}
	else if (ITA_YUV422_UYVY == colorimg_tpye)
	{	// YUV422_UYVY 
		for (i = 0; i < nLen; i++)
		{
			puc_dst[i * 2 + 0] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][0];
			if (i % 2 == 0)
			{
				puc_dst[i * 2 + 1] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][2];
			}
			else
			{
				puc_dst[i * 2 + 1] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][1];
			}
		}
	}
	else if (ITA_YUV422_Plane == colorimg_tpye)
	{	// YUV422_Plane, 先存Y通道所有的值，再存U通道，再存V通道 
		for (i = 0; i < nLen; i++)
		{
			puc_dst[i] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][0];
			if (i % 2 == 0)
			{
				puc_dst[i / 2 + nLen] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][1];
				puc_dst[i / 2 + nLen * 3 / 2] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][2];
			}
		}
	}
	else if (ITA_YVU422_Plane == colorimg_tpye)
	{	// YVU422_Plane, 先存Y通道所有的值，再存V通道，再存U通道 
		for (i = 0; i < nLen; i++)
		{
			puc_dst[i] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][0];
			if (i % 2 == 0)
			{
				puc_dst[i / 2 + nLen] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][2];
				puc_dst[i / 2 + nLen * 3 / 2] = PseudoColorTableYUV[pseudo_color_type][puc_src[i]][1];
			}
		}
	}
}

BOOL_T isFile(CONST CHAR_T * path)
{
	//查找最后一个'/'
	CONST CHAR_T *p = strrchr(path, '/');
	if (p)
	{
		//查找'.'
		CONST CHAR_T *q = strchr(p, '.');
		if (q)
			return TRUE_T;
	}
	return FALSE_T;
}

